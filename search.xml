<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>完善公众号功能</title>
      <link href="/%E5%AE%8C%E5%96%84%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8A%9F%E8%83%BD/"/>
      <url>/%E5%AE%8C%E5%96%84%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>idea插件开发</title>
      <link href="/idea%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
      <url>/idea%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器</title>
      <link href="/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在我们实际开发过程中,Redis 使用越来越广泛,随之而来很多问题,比如 Redis 缓存穿透问题(大量请求根本不存在的key),很多人都知道使用布隆过滤器可以解决这个问题。那么什么是布隆过滤器？布隆过滤器原理是什么呢?</p><span id="more"></span><h4 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h4><p>讲布隆过滤器前,先了解一下位图(Bitmap),即位(Bit)的集合,是一种数据结构,可用于记录大量的0-1状态,在很多地方都会用到,其优势是可以在一个非常高的空间利用率下保存大量0-1状态,通常是用来判断某个数据存不存在的。</p><h4 id="位图法的基本原理"><a href="#位图法的基本原理" class="headerlink" title="位图法的基本原理"></a>位图法的基本原理</h4><p>位图法的原理主要就是利用int类型数据，一个int类型占4个字节，而一个字节有8个bit位，因此一个int数据就可以表示0-31的数是否存在(数值是多少就用第几位Bit位，0和1表示这个数值是否存在)。如果要查找总数为 N 的数据存在性，只需要申请一个长度为<code>N/32+1</code>的int数组即可完成这些数据的存储,其中数组中每个元素可标识32个数据的状态。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">举个栗子🌰:现要存放3、6、11、37、48、64、71、97等数值存在的状态。</span><br><span class="line">1:申请一个长度为97/32+1=4的数组。</span><br><span class="line">2:将要存放的数字除以32取整数部分,比如3/32=0,6/32=0,11/32=0,37/32=1,48/32=1,64/32=2,71/32=2,97/32=3</span><br><span class="line">3:将要存放的数字除以32取余数,比如3%32=3,6%32=6,11%32=11,37%32=5,48%32=16,64%32=0,71%32=7,97%32=1</span><br><span class="line">4:便可得到:数字3存放于第0个int的第3个bit位</span><br><span class="line">          数字6存放于第0个int的第6个bit位</span><br><span class="line">          数字11存放于第0个int的第11个bit位</span><br><span class="line">          数字37存放于第1个int的第5个bit位</span><br><span class="line">          数字48存放于第1个int的第16个bit位</span><br><span class="line">          数字64存放于第2个int的第0个bit位</span><br><span class="line">          数字71存放于第2个int的第7个bit位</span><br><span class="line">          数字97存放于第3个int的第1个bit位</span><br></pre></td></tr></table></figure><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304242207336.png" style="zoom:50%;" /><h4 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h4><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难。</p><h4 id="布隆过滤器的基本原理"><a href="#布隆过滤器的基本原理" class="headerlink" title="布隆过滤器的基本原理"></a>布隆过滤器的基本原理</h4><p>布隆过滤器就是通过将元素进行多个Hash算法计算，都存入位图中，查询时使用同样的Hash算法计算，<strong>只要有一个比特位为零， 代表该元素一定不在哈希表中，否则可能在哈希表中。</strong></p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304262141686.png" style="zoom:50%;" /><p><strong>注意:布隆过滤器如果说某个元素不存在时，该元素一定不存在，如果该元素存在时，该元素可能存在，因为有些哈希函数存在一定的误判。</strong></p><p>比如:在布隆过滤器中查找”HEIHEIHEI”时，假设3个哈希函数计算的哈希值为:1、13、16，刚好和其他元素的比特位重叠，此时布隆过滤器判断该元素是存在的，但实际上该元素是不存在的。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis与MySQL数据一致性</title>
      <link href="/Redis%E4%B8%8EMySQL%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/"/>
      <url>/Redis%E4%B8%8EMySQL%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>Redis和MySQL数据的一致性,这是个老生常谈的问题,主要原因是为了减少数据库的IO,提高数据查询的性能,经常将Redis做为应用程序与数据库之间的缓存,但是随之而来就出现各种各样的问题,这次就来深度剖析一下。</p><span id="more"></span><h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><blockquote><p>在传统的应用程序中,当大量的用户去请求一些热点数据的时候,应用程序会频繁去操作对应的数据库,不仅造成数据库压力太大,而且性能及实效性不好。所以为了解决这个问题,引入Redis作为缓存,当应用程序需要去读取数据库的时候，首先会先尝试去 Redis 中加载，如果命中就直接将数据返回，如果没有命中则去从数据库进行查询,查询到数据之后,把这个数据重新缓存到 Redis 里面,然后返回给用户。</p></blockquote><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304142215938.png" style="zoom:50%;" /><p>只是查询的话,看起来没什么问题,但是如果有请求去修改数据库数据的时候,问题就浮现出来了,因为数据库更新和 Redis 更新并不是一个原子操作,有先后顺序,其中的一个操作也可能会失败,这样的话就会出现 Redis 和 MySQL 中的数据有不一致的情况。</p><h4 id="问题剖析"><a href="#问题剖析" class="headerlink" title="问题剖析"></a>问题剖析</h4><ul><li><p>先更新 MySQL ,再更新 Redis</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304151715157.png" style="zoom:50%;" /><p>如图,在高并发情况下，如果用户 A 的请求在写 Redis 时网络阻塞了一下,而用户 B 的请求后发先至依次完成了数据的更新,此时就会出现MySQL中stock&#x3D;5,而Redis中stock&#x3D;10的情况,所以先更新 MySQL ,再更新 Redis的方案是不可行的。</p></li><li><p>先更新 Redis ,再更新 MySQL</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304151725342.png" style="zoom:50%;" /><p>与上一种情况类似,如果用户 A 的请求在写 MySQL 时网络阻塞了一下,而用户 B 的请求后发先至依次完成了数据的更新,此时就会出现 MySQ L中 stock&#x3D;10,而 Redis 中 stock&#x3D;5的情况,所以先更新 Redis ,再更新 MySQL 的方案也是不可行的。</p></li><li><p>先删除 Redis ,再更新 MySQL</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304151744427.png" style="zoom:50%;" /><p>这种情况很容易发生,因为一般更新数据花费的时间较长,而请求数据花费的时间较短,所以会出现即使更新 MySQL 前删除了 Redis ,但依旧被写入了不一致的数据,故此种方案依旧不可行。</p></li><li><p>先删除 Redis ,再更新 MySQL ,再删除 Redis</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304152205788.png" style="zoom:50%;" /><p>这种方案是针对上个方案提出的,但是这种方案有个关键就是,图中的8操作必须要在6操作之后,而且8删除操作一定要成功,否则的话仍旧会出现数据不一致的问题。因此有人提出延时双删(确保能删除其他线程回写到Redis的数据),但是这个延时的时间不好把握,不可控。还有失败重试机制,否则第二次删除失败的话,仍然不行。这种方案能用是能用,但是存在风险,慎用。</p></li><li><p>先更新 MySQL ,再删除 Redis</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304152239449.png" style="zoom:50%;" /><p>这种方案在一般情况下都可以使用,只是会存在一部分查询请求会返回不一致的数据,但是还是能保证最终一致性的,但在极端情况下还是会有一点问题。</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304152242878.png" style="zoom:50%;" /><p>如上图,缓存正好失效的时候还是会造成数据不一致的情况,但毕竟比较极端。所以这种方案的可行性还是可以的。</p></li><li><p>先写 MySQL ,通过 Binlog ,异步更新 Redis</p><p>这种方案是通过拉取MySQL master 节点的 binlog ,然后通过消息队列异步去更新 Redis ,这样是能保证最终一致性的。但是对代码业务入侵太大,可斟酌使用。</p></li></ul><div class="note green icon-padding flat"><i class="note-icon fas fa-thumbs-up"></i><p>以上就是对 Redis 和 MySQL 保证数据一致性的分析。一般情况下<code>先更新 MySQL ,再删除 Redis</code>这种方案较优,能满足大部分需求。</p></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus+Grafana搭建线上监控</title>
      <link href="/Prometheus+Grafana%E6%90%AD%E5%BB%BA%E7%BA%BF%E4%B8%8A%E7%9B%91%E6%8E%A7/"/>
      <url>/Prometheus+Grafana%E6%90%AD%E5%BB%BA%E7%BA%BF%E4%B8%8A%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<p>“线上出了问题，你们是怎么排查的？排查的思路是怎么样的？”,你有被问过这个问题吗？像我们一般查生产问题都是从生产环境将日志拉下来查看,如果JVM异常也只能分析dump文件。但这远远不够，如果有个线上JVM监控系统，出了问题可以快速定位问题，所以这次试着搭建一个线上JVM监控。使用的是业界比较出名的Prometheus(普罗米修斯)+Grafna看板。</p><span id="more"></span><h4 id="部署Prometheus、Grafana"><a href="#部署Prometheus、Grafana" class="headerlink" title="部署Prometheus、Grafana"></a>部署Prometheus、Grafana</h4><ul><li><p>编写DockerFile文件,命名为<code>monitor.yml</code></p>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">monitor:</span></span><br><span class="line">        <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">prometheus:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">prom/prometheus</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">prometheus</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">prometheus</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/Users/mizhuo/Path/docker/prometheus/config:/etc/prometheus</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">monitor</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">grafana:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">grafana/grafana</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">grafana</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">grafana</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">monitor</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">node-exporter:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">quay.io/prometheus/node-exporter</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">node-exporter</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">node-exporter</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9100:9100&quot;</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">monitor</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">mysqld-exporter:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">prom/mysqld-exporter</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">mysqld-exporter</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">mysqld-exporter</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9104:9104&quot;</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="comment">#- DATA_SOURCE_NAME=root:mizhuo123@(host.docker.internal:3306)/  ##连接宿主机mysql</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DATA_SOURCE_NAME=root:mizhuo123@(mysql:3306)/</span>                  <span class="comment">##连接docker的mysql容器</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">monitor</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">cadvisor:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">gcr.io/google/cadvisor:latest</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">cadvisor</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">cadvisor</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/var/run:/var/run:rw</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/sys:/sys:ro</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/var/lib/docker/:/var/lib/docker:ro</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8899:8080&quot;</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">monitor</span></span><br></pre></td></tr></table></figure></li><li><p>编写<code>prometheus.yml</code>配置文件(路径要与dockerFile中配置的路径一致)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">          <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - &quot;first_rules.yml&quot;</span></span><br><span class="line">  <span class="comment"># - &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;prometheus:9090&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;cadvisor&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;cadvisor:8080&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;node&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;node-exporter:9100&#x27;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;mysqld-exporter:9104&#x27;</span>]</span><br></pre></td></tr></table></figure>  <div class="note red icon-padding flat"><i class="note-icon fas fa-triangle-exclamation"></i><p>其中<code>targets</code>后为链接的各容器地址及端口,ip要与dockerfile中hostname保持一致,端口要与容器原端口一致,<strong>不能写映射到宿主机的端口</strong>！</p></div></li><li><p>使用命令<code>docker-compose -f monitor.yml up -d</code>编排容器。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@Mac-mini  ~/Path/docker/dockerFiles/prometheus  docker-compose -f prometheus.yml up -d</span><br><span class="line">[+] Running 6/6</span><br><span class="line">⠿ Network prometheus_monitor  Created                                                                                                                                                                                                                                     0.1s</span><br><span class="line">⠿ Container node-exporter     Started                                                                                                                                                                                                                                     1.8s</span><br><span class="line">⠿ Container mysqld-exporter   Started                                                                                                                                                                                                                                     1.2s</span><br><span class="line">⠿ Container cadvisor          Started                                                                                                                                                                                                                                     1.7s</span><br><span class="line">⠿ Container prometheus        Started                                                                                                                                                                                                                                     1.8s</span><br><span class="line">⠿ Container grafana           Started                                                                                                                                                                                                                                     1.5s</span><br></pre></td></tr></table></figure></li></ul><h4 id="访问Prometheus"><a href="#访问Prometheus" class="headerlink" title="访问Prometheus"></a>访问Prometheus</h4>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304072140358.png" style="zoom:50%;" /><p>  可以看到<code>prometheus</code>已经成功连接到了各个exporter,并且能够监控到mysql、linux、docker容器等状态,但是是以文本的形式展示的,所以需要<code>Grafana</code>面板将这些数据转化为图形化界面。</p>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304072208944.png" style="zoom:50%;" /><h4 id="Grafana图形化面板"><a href="#Grafana图形化面板" class="headerlink" title="Grafana图形化面板"></a>Grafana图形化面板</h4><ul><li><p>登录Grafana后添加数据源</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304072230215.png" style="zoom:50%;" /></li><li><p>去官网<a href="https://grafana.com/grafana/dashboards/">Dashboards | Grafana Labs</a>下载模板或者拷贝ID</p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304081531454.png"></p></li><li><p>Grafana 展示监控数据</p><ul><li><p>导入仪表盘,拿MySQL为例,ID为7362</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304072232883.png"  /></li><li><p>连接prometheus数据源并导入</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304072233168.png"  /></li></ul></li><li><p>查看MySQL监控面板</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304072235155.png"  /></li><li><p>查看Linux监控面板</p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304081607759.png"></p></li></ul><h4 id="监控SpringCloud"><a href="#监控SpringCloud" class="headerlink" title="监控SpringCloud"></a>监控SpringCloud</h4><p>因为我使用的是Nacos做为注册中心,要想被监控只能将Nacos伪装成Consul<a href="https://github.com/weixiaohui-1/nacos-consul-adapter">Releases · weixiaohui-1&#x2F;nacos-consul-adapter (github.com)</a>,如果是Consul或者是Eureka可以查看官方的配置<a href="https://blog.csdn.net/qq_33257527/article/details/88388278">https://prometheus.io/docs/prometheus/latest/configuration/configuration/</a></p><ul><li><p>在GateWay中引入依赖<code>implementation &#39;io.github.chen-gliu:nacos-consul-adapter:0.0.5.M&#39;</code></p></li><li><p>在每个服务中引入依赖<code>implementation &#39;io.micrometer:micrometer-registry-prometheus:1.10.5&#39;</code></p></li><li><p>注册Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">MeterRegistryCustomizer&lt;MeterRegistry&gt; <span class="title function_">configurer</span><span class="params">(</span></span><br><span class="line"><span class="params">  <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span> String applicationName)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (registry) -&gt; registry.config().commonTags(<span class="string">&quot;application&quot;</span>, applicationName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启服务并访问<code>http://localhost:8848/nacos/actuator/prometheus</code>就能看到采集的指标数据了。<img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304111515870.png" style="zoom:50%;" /></p></li><li><p>修改prometheus.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">2s</span>    </span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">&#x27;/nacos/actuator/prometheus&#x27;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;host.docker.internal:8848&#x27;</span>] <span class="comment">##因为我使用的是Docker中的prometheus去监控宿主机的微服务,所以ip是host.docker.internal</span></span><br></pre></td></tr></table></figure></li><li><p>Grafana中添加仪表盘,我这里使用的是4701</p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304111512392.png"></p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304111512573.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> JVM </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysqld-exporter无法连接到mysql的问题</title>
      <link href="/mysqld-exporter%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E5%88%B0mysql%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/mysqld-exporter%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E5%88%B0mysql%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近在搭建Prometheus+Grafana线上监控的时候,在使用Mysqld-exporter时出现连接不上Mysql的问题,尝试了很多方法终于解决了,这里记录一下。</p><span id="more"></span><p>最开始使用的DockerFile版本:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysqld-exporter:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/mysqld-exporter</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysqld-exporter</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mysqld-exporter</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;9104:9104&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DATA_SOURCE_NAME=&quot;root:mizhuo123@(mysql:3306)/&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">monitor</span></span><br></pre></td></tr></table></figure><p>启动后发现没有连上Mysql,查看日志发现如下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2022-12-20 21:44:13 level=error ts=2022-12-20T13:44:13.508Z caller=exporter.go:149 msg=&quot;Error pinging mysqld&quot; err=&quot;dial tcp: lookup mysql on 192.168.65.7:53: no such host&quot;</span><br></pre></td></tr></table></figure><p>使用了&#96;docker inspect命令查看了一下两个容器的网络情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@Mac-mini  ~/Path/docker/dockerFiles  docker inspect --format=&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125; &#123;&#123;end&#125;&#125;&#x27; $(docker ps -aq)</span><br><span class="line">/cadvisor - 172.31.0.3</span><br><span class="line">/prometheus - 172.31.0.5</span><br><span class="line">/mysqld-exporter - 172.31.0.6</span><br><span class="line">/grafana - 172.31.0.4</span><br><span class="line">/node-exporter - 172.31.0.2</span><br><span class="line">/mysql - 172.17.0.2</span><br></pre></td></tr></table></figure><p>可以发现两个容器是不在一个网段的,所以使用容器名称和docker内的ip连接是连接不上的。于是我创建了一个网络,并把mysql和mysqld-exporter两个容器都加入到这个网络中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@Mac-mini  ~/Path/docker/dockerFiles  docker network create -d bridge common</span><br><span class="line">mizhuo@Mac-mini  ~/Path/docker/dockerFiles  docker network connect common mysql</span><br><span class="line">mizhuo@Mac-mini  ~/Path/docker/dockerFiles  docker network connect common mysqld-exporter</span><br></pre></td></tr></table></figure><p>重新查看一下两个容器的网络情况,两个容器可以相互访问了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@Mac-mini  ~/Path/docker/dockerFiles   docker inspect --format=&#x27;&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125; &#123;&#123;end&#125;&#125;&#x27; $(docker ps -aq)</span><br><span class="line">/cadvisor - 172.31.0.3</span><br><span class="line">/prometheus - 172.31.0.5</span><br><span class="line">/mysqld-exporter - 172.27.0.3 172.31.0.6</span><br><span class="line">/grafana - 172.31.0.4</span><br><span class="line">/node-exporter - 172.31.0.2</span><br><span class="line">/nacos -</span><br><span class="line">/mysql - 172.17.0.2 172.27.0.2</span><br></pre></td></tr></table></figure><p>本以为问题已经解决了,但是重启容器后又报错了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">level=error msg=&quot;Error pinging mysqld: Error 1045: Access denied for user &#x27;\&quot;root&#x27;@&#x27;172.27.0.3&#x27; (using password: YES)&quot; source=&quot;exporter.go:146&quot;</span><br></pre></td></tr></table></figure><p>我尝试使用我配置的账号密码去登录数据库,发现并没有错误,也开启了远程连接,使用本地navicat可以成功连接,甚至我不使用DockerFile,使用<code>docker run -d --name mysqld_exporter2 -p 9105:9104 -e DATA_SOURCE_NAME=&quot;root:mizhuo123@(mysql:3306)/&quot; --network common prom/mysqld-exporter</code>单独创建一个mysqld-exporter2容器也能成功连接,完全排除数据库的问题。最后在Github源码的issues中找到了解决方案:<a href="https://github.com/prometheus/mysqld_exporter/issues/440">错误 1045：拒绝用户访问 ·问题 #440 ·普罗米修斯&#x2F;mysqld_exporter (github.com)</a>,问题竟然出现在<code>- DATA_SOURCE_NAME=&quot;root:mizhuo123@(mysql:3306)/&quot;</code>中不能使用单引号或双引号!去除后果然成功连接mysql并监控mysql状态。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内无法拉取gcr.io镜像的解决方案</title>
      <link href="/%E5%9B%BD%E5%86%85%E6%97%A0%E6%B3%95%E6%8B%89%E5%8F%96gcr-io%E9%95%9C%E5%83%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/%E5%9B%BD%E5%86%85%E6%97%A0%E6%B3%95%E6%8B%89%E5%8F%96gcr-io%E9%95%9C%E5%83%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>今天在使用Dokcer拉取一个镜像的时候,控制台报了如下错误:<code>Error response from daemon: Get &quot;https://gcr.io/v2/&quot;: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</code>,主要是需要科学上网,但也可以曲线救国,这里记录一下解决方案。</p><span id="more"></span><h4 id="使用阿里云容器镜像服务"><a href="#使用阿里云容器镜像服务" class="headerlink" title="使用阿里云容器镜像服务"></a>使用阿里云容器镜像服务</h4><ul><li><p>登陆阿里云,进入到容器镜像服务,如果没有实例列表就新建一个,如果有的话就直接进入。</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304032155556.png" style="zoom:50%;" /></li><li><p>创建一个镜像仓库,这个名称可以随意</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304032156372.png" style="zoom:50%;" /></li><li><p>点击下一步后选择Github,当然也可以使用其它代码源,刚进来的时候需要绑定授权,然后选择对应的仓库,像我这是在github新建了一个grc.io的仓库,最后选择海外机器构建。</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304041032328.png" style="zoom:50%;" /></li><li><p>在github仓库中新建一个dockerfile文件，内容是你想要拉取的镜像。</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304041129682.png" style="zoom:50%;" /></li><li><p>返回镜像仓库,点击管理,然后构建规则,它会根据上面选择的仓库去获取,选择分支及文件名,填好要拉取的镜像名称。</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304041141505.png" style="zoom:50%;" /></li><li><p>选择立即构建,然后查看日志。</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304041142626.png" style="zoom:50%;" /><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304041143855.png" style="zoom:50%;" /></li><li><p>根据仓库基本信息上面的操作,连接远程仓库,并将镜像拉取到本地。</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202304041145666.png" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@MacBook-Pro  ~/Path/docker/dockerfiles/prometheus  docker login --username=xxxxxxxxx registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">Password:</span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line">Logging in with your password grants your terminal complete access to your account.</span><br><span class="line">For better security, log in with a limited-privilege personal access token. Learn more at https://docs.docker.com/go/access-tokens/</span><br><span class="line">mizhuo@MacBook-Pro  ~/Path/docker/dockerfiles/prometheus  docker pull registry.cn-hangzhou.aliyuncs.com/mizhuo/gcr.io:latest</span><br><span class="line">latest: Pulling from mizhuo/gcr.io</span><br><span class="line">188c0c94c7c5: Pull complete</span><br><span class="line">2d4828968d6c: Pull complete</span><br><span class="line">b28a9b13dc6d: Pull complete</span><br><span class="line">031224e6222c: Pull complete</span><br><span class="line">Digest: sha256:32c7931328521a182b34718b943fed35d91ca403a85faa7ad271bfd2c2504c69</span><br><span class="line">Status: Downloaded newer image for registry.cn-hangzhou.aliyuncs.com/mizhuo/gcr.io:latest</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/mizhuo/gcr.io:latest</span><br><span class="line">mizhuo@MacBook-Pro  ~/Path/docker/dockerfiles/prometheus  docker tag registry.cn-hangzhou.aliyuncs.com/mizhuo/gcr.io gcr.io/google/cadvisor</span><br><span class="line">mizhuo@MacBook-Pro  ~/Path/docker/dockerfiles/prometheus  docker images gcr.io/google/cadvisor</span><br><span class="line">REPOSITORY               TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">gcr.io/google/cadvisor   latest    96d423e05772   2 years ago   163MB</span><br><span class="line">mizhuo@MacBook-Pro  ~/Path/docker/dockerfiles/prometheus </span><br></pre></td></tr></table></figure></li></ul><p>可以看到,镜像成功拉取到本地了。</p>]]></content>
      
      
      <categories>
          
          <category> 问题集锦 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Jenkins自动化部署SpringCloud项目</title>
      <link href="/%E4%BD%BF%E7%94%A8Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2SpringCloud%E9%A1%B9%E7%9B%AE/"/>
      <url>/%E4%BD%BF%E7%94%A8Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2SpringCloud%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p><code>Jenkins</code>是一个持续集成工具,主要是通过拉取远程git仓库的代码到本地,然后使用编译工具编译拉取的代码,最后将编译的结果部署到指定机器上。这样大大的减少了开发人员的工作,开发人员只需要将代码上传至仓库中,其余的工作Jenkins会自动完成。</p><span id="more"></span><h3 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h3><h4 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h4><p>Jenkins中文官网：<a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/</a></p><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202212052159317.png" style="zoom:50%;" /><h4 id="启动Jenkins"><a href="#启动Jenkins" class="headerlink" title="启动Jenkins"></a>启动Jenkins</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name jenkins -d -p 18080:8080 -p 50000:50000 -v /Users/mizhuo/Path/docker/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkins/jenkins:2.375.1-lts</span><br></pre></td></tr></table></figure><h4 id="访问Jenkins"><a href="#访问Jenkins" class="headerlink" title="访问Jenkins"></a>访问Jenkins</h4><p>根据映射的端口号访问Jenkins,提示需要解锁。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202212052218983.png" style="zoom:30%;" /></p><p>根据提示到容器中找到密码,便可以成功访问Jenkins。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202212052211818.png" style="zoom:50%;" /></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>这里直接选择安装推荐的插件了,嫌安装速度慢的也可以按需安装。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202212052213358.png" style="zoom:30%;" /></p><p>安装完成后,会新建一个管理员用户,然后就会进入到Jenkins的主页。进入插件管理,安装下面几个插件。</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202212052240054.png" style="zoom:30%;" /><ul><li>安装Maven Integration</li><li>安装Gradle Plugins(推荐的插件中有)</li><li>安装Publish Over SSH(如果不需要远程推送，不用安装)</li></ul><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><p>进入<code>Dashboard</code>-&gt;<code>系统管理</code>-&gt;<code>全局工具配置</code>,配置JDK、Git、Maven等环境,可以下载后上传到jenkins中,也可以选择自动安装。</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202212052308411.png" style="zoom:33%;" />]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feign传递token</title>
      <link href="/Feign%E4%BC%A0%E9%80%92token/"/>
      <url>/Feign%E4%BC%A0%E9%80%92token/</url>
      
        <content type="html"><![CDATA[<p>今天做项目的时候遇到一个问题,项目中使用的安全框架是Oauth2+Security,使用JWT来进行鉴权,正常请求调用服务是没有问题的,但是使用Feign远程调用其它微服务后,目标服务中无法获取这个header中的信息,这里记录一下解决方案。</p><span id="more"></span><h4 id="问题剖析"><a href="#问题剖析" class="headerlink" title="问题剖析"></a>问题剖析</h4><p>header丢失的原因是因为Feign远程调用的时候,会重新创建一个新的请求,其中包含路径和参数,但不会携带请求头。具体代码在<code>SynchronousMethodHandler</code>中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">RequestTemplate</span> <span class="variable">template</span> <span class="operator">=</span> buildTemplateFromArgs.create(argv);</span><br><span class="line">    <span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> findOptions(argv);</span><br><span class="line">    <span class="type">Retryer</span> <span class="variable">retryer</span> <span class="operator">=</span> <span class="built_in">this</span>.retryer.clone();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> executeAndDecode(template, options);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          retryer.continueOrPropagate(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RetryableException th) &#123;</span><br><span class="line">          <span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> th.getCause();</span><br><span class="line">          <span class="keyword">if</span> (propagationPolicy == UNWRAP &amp;&amp; cause != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> cause;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> th;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">          logger.logRetry(metadata.configKey(), logLevel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用拦截器,手动将header信息添加到新的请求中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * feign传递token拦截统一处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mizhuo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RequestInterceptor <span class="title function_">requestInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> requestTemplate -&gt; &#123;</span><br><span class="line">            <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> Optional.ofNullable(attributes).get().getRequest();</span><br><span class="line">            Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">            <span class="keyword">if</span> (headerNames != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> headerNames.nextElement();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">values</span> <span class="operator">=</span> request.getHeader(name);</span><br><span class="line">                    requestTemplate.header(name, values);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加拦截器后,目标服务可以成功获取header信息了,但这里还有一个问题,我在header中存放了一个用户基本信息的json串,<code>requestTemplate.header(name, values);</code>添加时,对value进行解析,丢失了部分字符,导致目标服务解析这个header中的json串失败,具体代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public static Expression create(String value) &#123;</span><br><span class="line">    String expression = stripBraces(value);</span><br><span class="line">    if (expression != null &amp;&amp; !expression.isEmpty()) &#123;</span><br><span class="line">        Optional&lt;Entry&lt;Pattern, Class&lt;? extends Expression&gt;&gt;&gt; matchedExpressionEntry = expressions.entrySet().stream().filter((entry) -&gt; &#123;</span><br><span class="line">            return ((Pattern)entry.getKey()).matcher(expression).matches();</span><br><span class="line">        &#125;).findFirst();</span><br><span class="line">        if (!matchedExpressionEntry.isPresent()) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Entry&lt;Pattern, Class&lt;? extends Expression&gt;&gt; matchedExpression = (Entry)matchedExpressionEntry.get();</span><br><span class="line">            Pattern expressionPattern = (Pattern)matchedExpression.getKey();</span><br><span class="line">            String variableName = null;</span><br><span class="line">            String variablePattern = null;</span><br><span class="line">            Matcher matcher = expressionPattern.matcher(expression);</span><br><span class="line">            if (matcher.matches()) &#123;</span><br><span class="line">                variableName = matcher.group(2).trim();</span><br><span class="line">                if (variableName.contains(&quot;:&quot;)) &#123;</span><br><span class="line">                    String[] parts = variableName.split(&quot;:&quot;);</span><br><span class="line">                    variableName = parts[0];</span><br><span class="line">                    variablePattern = parts[1];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (variableName.contains(&quot;&#123;&quot;)) &#123;</span><br><span class="line">                    return null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return new Expressions.SimpleExpression(variableName, variablePattern);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;an expression is required.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了解决这个问题,我将用户解析的方法封装到了公共工具类中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class CommonUtils &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当前登录用户信息</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static UserDto getCurrentUser(HttpServletRequest request) &#123;</span><br><span class="line">        String token = request.getHeader(AuthConstant.JWT_TOKEN_HEADER);</span><br><span class="line">        //从token中解析用户信息</span><br><span class="line">        String realToken = token.replace(AuthConstant.JWT_TOKEN_PREFIX, &quot;&quot;);</span><br><span class="line">        JWSObject jwsObject = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            jwsObject = JWSObject.parse(realToken);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        String userStr = jwsObject.getPayload().toString();</span><br><span class="line">        if(StrUtil.isEmpty(userStr))&#123;</span><br><span class="line">            Asserts.fail(ResultCode.UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">        UserDto userDto = JSONUtil.toBean(userStr, UserDto.class);</span><br><span class="line">        return userDto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然,也可以存放到Redis中,这样使用Feign远程调用的时候,只要保证token成功传递就好了。</p>]]></content>
      
      
      <categories>
          
          <category> 问题集锦 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle引用Lombok编译失败的问题</title>
      <link href="/Gradle%E5%BC%95%E7%94%A8Lombok%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/Gradle%E5%BC%95%E7%94%A8Lombok%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天在搭建项目的时候,遇到了一个很奇怪的问题,使用Gradle构建的项目引用了Lombok依赖,但怎么设置项目都无法编译成功,这里记录一下解决方案。</p><span id="more"></span><h4 id="问题回顾"><a href="#问题回顾" class="headerlink" title="问题回顾"></a>问题回顾</h4><p>项目使用Gradle构建,build.gradle中引用了lombok依赖:<code>implementation &quot;org.projectlombok:lombok:$&#123;lombokVersion&#125;&quot;</code>,Idea中也安装了Lombok插件。但编译代码的时候还是会报<code>错误:找不到符号</code>的问题。</p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202211031022887.png"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>查阅大量资料,终于找到了问题所在:Gradle中要使用<code>Annotation Processor(注解处理器)</code>,Annotation Processor是javac的一个工具，它用来在编译时扫描和处理注解。通过Annotation Processor可以获取到注解和被注解对象的相关信息，然后根据注解自动生成Java代码。于是在build.gradle中添加代码:<code>annotationProcessor &quot;org.projectlombok:lombok:$&#123;lombokVersion&#125;&quot;</code>,问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> 问题集锦 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转Kafka【二】</title>
      <link href="/%E7%8E%A9%E8%BD%ACKafka%E3%80%90%E4%BA%8C%E3%80%91/"/>
      <url>/%E7%8E%A9%E8%BD%ACKafka%E3%80%90%E4%BA%8C%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>上节内容,我们已经使用 Docker 将 Zookeeper 集群与 Kafka 集群搭建好,这节内容我们就来演示一下如何使用 Kafka,以及Kafka的一些源码分析。</p><span id="more"></span><h3 id="Kafka-Controller"><a href="#Kafka-Controller" class="headerlink" title="Kafka Controller"></a>Kafka Controller</h3><div class="note orange icon-padding flat"><i class="note-icon fas fa-anchor"></i><p>Controller是 Apache Kafka 的核心组件。它的主要作用是在 Apache ZooKeeper 的帮助下管理和协调整个 Kafka 集群。集群中任意一台 Broker 都能充当控制器的角色，但是，在运行过程中，只能有一个 Broker 成为控制器，行使其管理和协调的职责。换句话说，每个正常运转的 Kafka 集群，在任意时刻都有且只有一个控制器。官网上有个名为 activeController 的 JMX 指标，可以帮助我们实时监控控制器的存活状态。这个 JMX 指标非常关键，在实际运维操作过程中，一定要实时查看这个指标的值。</p></div><h4 id="Controller-是如何被选出来的"><a href="#Controller-是如何被选出来的" class="headerlink" title="Controller 是如何被选出来的"></a>Controller 是如何被选出来的</h4><p>实际上,集群中的每台Broker启动时,都会向Zookeeper上创建一个<code>/controller</code>的节点,而第一个创建成功的Broker则为Leader。当作为Leader的Broker发生故障后,其余的Follower会再次竞争去创建<code>/controller</code>的节点,从而选出新的Leader。但在实际应用中,很可能由于网络波动问题,让Kafka误以为Leader挂掉了,导致产生新一轮选举,此时会出现同时存在两个Leader,剩下的Follower就不知道该听谁的了。这就是一个典型的脑裂问题。</p><h4 id="Kafka如何解决脑裂问题"><a href="#Kafka如何解决脑裂问题" class="headerlink" title="Kafka如何解决脑裂问题"></a>Kafka如何解决脑裂问题</h4><p>Kafka在每个Leader产生的时候,会在Zookeeper中生成一个更大的<code>/controller_epoch</code>,并同步给所有的Follower。这样,原epoch较小的Leader发送的命令会被其余Follower忽略掉。</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202210071739901.png" style="zoom:50%;" /><h3 id="Kafka脚本及源码分析"><a href="#Kafka脚本及源码分析" class="headerlink" title="Kafka脚本及源码分析"></a>Kafka脚本及源码分析</h3><ul><li><p>进入Kafka的容器内部</p><p><code>docker exec -it kafka1 /bin/bash</code></p></li><li><p>跳转Kafka的bin目录,<code>cd /opt/bitnami/kafka/bin</code>可以看到很多shell脚本</p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202210051541188.png"></p></li><li><p>这些shell脚本就是封装了一系列用于操作kafka的命令,接下来我们一起演示一下kafka常用的一些操作,并跟着源码一起分析具体流程。</p></li></ul><h4 id="创建Topic"><a href="#创建Topic" class="headerlink" title="创建Topic"></a>创建Topic</h4><p>我们创建一个Topic,副本为3,分区数为5,名称为<code>FirstTopic</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it kafka1 /bin/bash</span><br><span class="line">kafka-topics.sh --create --zookeeper zk1:2181,zk2:2181,zk3:2181 --replication-factor 3 --partitions 5 --topic FirstTopic</span><br></pre></td></tr></table></figure><p>这时就有个问题了,我们集群有3台Broker,5个Partition和三个副本,那么Kafka是如何管理这些Partition和副本的呢？每个分区的Leader是怎么选出来的呢？我们一起来看一下源码,打开<code>kafka-topics.sh</code>文件,内容很简单,只有一条命令:<code>exec $(dirname $0)/kafka-run-class.sh kafka.admin.TopicCommand &quot;$@&quot;</code>,可以看到是调用的<code>TopicCommand</code>类的<code>main</code>方法,我们跟踪代码可找到<code>assignReplicasToBrokersRackUnaware</code>方法。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">assignReplicasToBrokersRackUnaware</span></span>(nPartitions: <span class="type">Int</span>, <span class="comment">//本例分区数为5</span></span><br><span class="line">                                                 replicationFactor: <span class="type">Int</span>, <span class="comment">//本例副本数为3</span></span><br><span class="line">                                                 brokerList: <span class="type">Seq</span>[<span class="type">Int</span>], <span class="comment">// 本例的BrokerList 为[1,2,3]</span></span><br><span class="line">                                                 fixedStartIndex: <span class="type">Int</span>, <span class="comment">//缺省值为 -1</span></span><br><span class="line">                                                 startPartitionId: <span class="type">Int</span> <span class="comment">//缺省值为 -1</span></span><br><span class="line">                                                ): <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Seq</span>[<span class="type">Int</span>]] = &#123;</span><br><span class="line">    <span class="keyword">val</span> ret = mutable.<span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Seq</span>[<span class="type">Int</span>]]()</span><br><span class="line">    <span class="comment">// 获取Broker列表</span></span><br><span class="line">    <span class="keyword">val</span> brokerArray = brokerList.toArray</span><br><span class="line">    <span class="comment">// 随机选取一个Broker作为起始位置。本例中，起始位置为1</span></span><br><span class="line">    <span class="keyword">val</span> startIndex = <span class="keyword">if</span> (fixedStartIndex &gt;= <span class="number">0</span>) fixedStartIndex <span class="keyword">else</span> rand.nextInt(brokerArray.length)</span><br><span class="line">    <span class="comment">// 赋当前分区ID为0</span></span><br><span class="line">    <span class="keyword">var</span> currentPartitionId = math.max(<span class="number">0</span>, startPartitionId)</span><br><span class="line">    <span class="comment">// 随机获取一个数字作为下一个副本的偏移量。本例中，偏移量为2</span></span><br><span class="line">    <span class="keyword">var</span> nextReplicaShift = <span class="keyword">if</span> (fixedStartIndex &gt;= <span class="number">0</span>) fixedStartIndex <span class="keyword">else</span> rand.nextInt(brokerArray.length)</span><br><span class="line">    <span class="comment">// 遍历所有的分区数</span></span><br><span class="line">    <span class="keyword">for</span> (_ &lt;- <span class="number">0</span> until nPartitions) &#123;</span><br><span class="line">      <span class="comment">// 第一个分区不满足该条件</span></span><br><span class="line">      <span class="comment">// 第二个分区不满足该条件</span></span><br><span class="line">      <span class="comment">// 第三个分区不满足该条件</span></span><br><span class="line">      <span class="comment">// 第四个分区满足该条件,偏移量+1=3</span></span><br><span class="line">      <span class="comment">// 第五个分区不满足该条件</span></span><br><span class="line">      <span class="keyword">if</span> (currentPartitionId &gt; <span class="number">0</span> &amp;&amp; (currentPartitionId % brokerArray.length == <span class="number">0</span>))</span><br><span class="line">        nextReplicaShift += <span class="number">1</span></span><br><span class="line">      <span class="comment">//当前分区ID加上起始位置，对Broker数量取余得到第一个副本的位置。</span></span><br><span class="line">      <span class="comment">// 第一个分区,第一个副本位置=(0+1)%3=1,取brokerArray(1),即ID为2的Broker</span></span><br><span class="line">      <span class="comment">// 第二个分区,第一个副本位置=(1+1)%3=2,取brokerArray(2),即ID为3的Broker</span></span><br><span class="line">      <span class="comment">// 第三个分区,第一个副本位置=(2+1)%3=0,取brokerArray(0),即ID为1的Broker</span></span><br><span class="line">      <span class="comment">// 第四个分区,第一个副本位置=(3+1)%3=1,取brokerArray(1),即ID为2的Broker</span></span><br><span class="line">      <span class="comment">// 第五个分区,第一个副本位置=(4+1)%3=2,取brokerArray(2),即ID为3的Broker</span></span><br><span class="line">      <span class="keyword">val</span> firstReplicaIndex = (currentPartitionId + startIndex) % brokerArray.length</span><br><span class="line">      <span class="keyword">val</span> replicaBuffer = mutable.<span class="type">ArrayBuffer</span>(brokerArray(firstReplicaIndex))</span><br><span class="line">      <span class="comment">//计算出剩余副本的位置</span></span><br><span class="line">      <span class="keyword">for</span> (j &lt;- <span class="number">0</span> until replicationFactor - <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 第一个分区,replicaIndex(1,2,0,3) 第二个副本位置=(1+1)%3=2,取brokerArray(2),即ID为3的Broker</span></span><br><span class="line">        <span class="comment">// 第一个分区,replicaIndex(1,2,1,3) 第三个副本位置=(1+2)%3=0,取brokerArray(0),即ID为1的Broker</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个分区,replicaIndex(2,2,0,3) 第二个副本位置=(2+1)%3=0,取brokerArray(0),即ID为1的Broker</span></span><br><span class="line">        <span class="comment">// 第二个分区,replicaIndex(2,2,1,3) 第三个副本位置=(2+2)%3=1,取brokerArray(1),即ID为2的Broker</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个分区,replicaIndex(0,2,0,3) 第二个副本位置=(0+1)%3=1,取brokerArray(1),即ID为2的Broker</span></span><br><span class="line">        <span class="comment">// 第三个分区,replicaIndex(0,2,1,3) 第三个副本位置=(0+2)%3=2,取brokerArray(2),即ID为3的Broker</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第四个分区,replicaIndex(1,3,0,3) 第二个副本位置=(1+2)%3=0,取brokerArray(0),即ID为1的Broker</span></span><br><span class="line">        <span class="comment">// 第四个分区,replicaIndex(1,3,1,3) 第三个副本位置=(1+1)%3=2,取brokerArray(2),即ID为3的Broker</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第五个分区,replicaIndex(2,3,0,3) 第二个副本位置=(2+2)%3=1,取brokerArray(1),即ID为2的Broker</span></span><br><span class="line">        <span class="comment">// 第五个分区,replicaIndex(2,3,1,3) 第三个副本位置=(2+1)%3=0,取brokerArray(0),即ID为1的Broker</span></span><br><span class="line">        replicaBuffer += brokerArray(replicaIndex(firstReplicaIndex, nextReplicaShift, j, brokerArray.length))</span><br><span class="line">      ret.put(currentPartitionId, replicaBuffer)</span><br><span class="line">      currentPartitionId += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    ret</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">replicaIndex</span></span>(firstReplicaIndex: <span class="type">Int</span>, secondReplicaShift: <span class="type">Int</span>, replicaIndex: <span class="type">Int</span>, nBrokers: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="comment">// 第一个分区第二个副本,shift=1+(2+0)%2=1</span></span><br><span class="line">    <span class="comment">// 第一个分区第三个副本,shift=1+(2+1)%2=2</span></span><br><span class="line">    <span class="comment">// 第二个分区第二个副本,shift=1+(2+0)%2=1</span></span><br><span class="line">    <span class="comment">// 第二个分区第三个副本,shift=1+(2+1)%2=2</span></span><br><span class="line">    <span class="comment">// 第三个分区第二个副本,shift=1+(2+0)%2=1</span></span><br><span class="line">    <span class="comment">// 第三个分区第三个副本,shift=1+(2+1)%2=2</span></span><br><span class="line">    <span class="comment">// 第四个分区第二个副本,shift=1+(3+0)%2=2</span></span><br><span class="line">    <span class="comment">// 第四个分区第三个副本,shift=1+(3+1)%2=1</span></span><br><span class="line">    <span class="comment">// 第五个分区第二个副本,shift=1+(3+0)%2=2</span></span><br><span class="line">    <span class="comment">// 第五个分区第三个副本,shift=1+(3+1)%2=1</span></span><br><span class="line">    <span class="keyword">val</span> shift = <span class="number">1</span> + (secondReplicaShift + replicaIndex) % (nBrokers - <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 第一个分区第二个副本,(1+1)%3=2</span></span><br><span class="line">    <span class="comment">// 第一个分区第三个副本,(1+2)%3=1</span></span><br><span class="line">    <span class="comment">// 第二个分区第二个副本,(2+1)%3=0</span></span><br><span class="line">    <span class="comment">// 第二个分区第三个副本,(2+2)%3=1</span></span><br><span class="line">    <span class="comment">// 第三个分区第二个副本,(0+1)%3=1</span></span><br><span class="line">    <span class="comment">// 第三个分区第三个副本,(0+2)%3=2</span></span><br><span class="line">    <span class="comment">// 第四个分区第二个副本,(1+2)%3=0</span></span><br><span class="line">    <span class="comment">// 第四个分区第三个副本,(1+1)%3=2</span></span><br><span class="line">    <span class="comment">// 第五个分区第二个副本,(2+2)%3=1</span></span><br><span class="line">    <span class="comment">// 第五个分区第三个副本,(2+1)%3=0</span></span><br><span class="line">    (firstReplicaIndex + shift) % nBrokers</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当分区和副本确定后,Kafka会默认设置每个分区第一个副本为Leader。我们可以使用<code>describe</code>命令查看一下是否与我们分析的一致。</p><h4 id="查看Topic描述信息"><a href="#查看Topic描述信息" class="headerlink" title="查看Topic描述信息"></a>查看Topic描述信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it kafka1 /bin/bash</span><br><span class="line">kafka-topics.sh --describe --zookeeper zk1:2181,zk2:2181,zk3:2181 --topic FirstTopic</span><br></pre></td></tr></table></figure><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202210062216077.png" style="zoom:50%;" />可以看出,与我们分析代码完全一致,每个分区的副本都被均匀散布在3台Broker上。<h4 id="删除Topic"><a href="#删除Topic" class="headerlink" title="删除Topic"></a>删除Topic</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it kafka1 /bin/bash</span><br><span class="line">kafka-topics.sh --delete --zookeeper zk1:2181,zk2:2181,zk3:2181 --topic FirstTopic</span><br></pre></td></tr></table></figure><p>删除命令执行完,会发现控制台打印了两句话:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I have no name!@kafka3:/$ kafka-topics.sh --delete --zookeeper zk1:2181,zk2:2181,zk3:2181 --topic FirstTopic</span><br><span class="line">Topic FirstTopic is marked for deletion.</span><br><span class="line">Note: This will have no impact if delete.topic.enable is not set to true.</span><br></pre></td></tr></table></figure><p>提示我们Topic已经被标记删除了,但是并没有立即删除,并且需要开启<code>delete.topic.enable=true</code>的配置,才可以删除Topic。当然这个<code>delete.topic.enable=true</code>是默认开启的,这个我们在kafka启动的时候可以看到。</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202210071529216.png" style="zoom:50%;" /><p>那么这个Topic是怎么从标记删除到真正被Kafka删除的呢？同样一起来看一下源码,进入<code>TopicCommand</code>类的<code>main</code>方法,这次跟踪的是<code>  topicService.deleteTopic(opts)</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">deleteTopic</span></span>(opts: <span class="type">TopicCommandOptions</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> topics = getTopics(opts.topic, opts.excludeInternalTopics)</span><br><span class="line">      ensureTopicExists(topics, opts.topic, !opts.ifExists)</span><br><span class="line">      topics.foreach &#123; topic =&gt;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="type">Topic</span>.isInternal(topic)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AdminOperationException</span>(<span class="string">s&quot;Topic <span class="subst">$topic</span> is a kafka internal topic and is not allowed to be marked for deletion.&quot;</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//可以看到kafka向zk发送了创建一个删除Topic的路径的命令后,就打印了我们在控制台看到的那两句话。</span></span><br><span class="line">            zkClient.createDeleteTopicPath(topic)</span><br><span class="line">            println(<span class="string">s&quot;Topic <span class="subst">$topic</span> is marked for deletion.&quot;</span>)</span><br><span class="line">            println(<span class="string">&quot;Note: This will have no impact if delete.topic.enable is not set to true.&quot;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> _: <span class="type">NodeExistsException</span> =&gt;</span><br><span class="line">            println(<span class="string">s&quot;Topic <span class="subst">$topic</span> is already marked for deletion.&quot;</span>)</span><br><span class="line">          <span class="keyword">case</span> e: <span class="type">AdminOperationException</span> =&gt;</span><br><span class="line">            <span class="keyword">throw</span> e</span><br><span class="line">          <span class="keyword">case</span> e: <span class="type">Throwable</span> =&gt;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">AdminOperationException</span>(<span class="string">s&quot;Error while deleting topic <span class="subst">$topic</span>&quot;</span>, e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">AdminZNode</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">path</span> </span>= <span class="string">&quot;/admin&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DeleteTopicsZNode</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">path</span> </span>= <span class="string">s&quot;<span class="subst">$&#123;AdminZNode.path&#125;</span>/delete_topics&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DeleteTopicsTopicZNode</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">path</span></span>(topic: <span class="type">String</span>) = <span class="string">s&quot;<span class="subst">$&#123;DeleteTopicsZNode.path&#125;</span>/<span class="subst">$topic</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Creates the delete topic znode.</span></span><br><span class="line"><span class="comment">   * @param topicName topic name</span></span><br><span class="line"><span class="comment">   * @throws KeeperException if there is an error while setting or creating the znode</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDeleteTopicPath</span></span>(topicName: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  createRecursive(<span class="type">DeleteTopicsTopicZNode</span>.path(topicName))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出Kafka是在ZK的<code>/admin/delete_topics</code> 目录下创建了一个topicName的节点,也就是所谓的标记删除。那么真正删除的操作在哪呢？从Kafka在ZK中创建了一个节点,很容易猜到是使用了ZK的监听器,监听<code>admin/delete-topics</code>下是否存在数据, 具体操作我们可以在源码中找到<code>TopicDeletionManager</code>类,从类名就能看出来这是一个管理删除Topic的类。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopicDeletionManager</span>(<span class="params">config: <span class="type">KafkaConfig</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                           controllerContext: <span class="type">ControllerContext</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                           replicaStateMachine: <span class="type">ReplicaStateMachine</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                           partitionStateMachine: <span class="type">PartitionStateMachine</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                           client: <span class="type">DeletionClient</span></span>) <span class="keyword">extends</span> <span class="title">Logging</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.logIdent = <span class="string">s&quot;[Topic Deletion Manager <span class="subst">$&#123;config.brokerId&#125;</span>] &quot;</span></span><br><span class="line">  <span class="comment">// 获取&quot;delete.topic.enable&quot;的配置是否为true</span></span><br><span class="line">  <span class="keyword">val</span> isDeleteTopicEnabled: <span class="type">Boolean</span> = config.deleteTopicEnable</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">init</span></span>(initialTopicsToBeDeleted: <span class="type">Set</span>[<span class="type">String</span>], initialTopicsIneligibleForDeletion: <span class="type">Set</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    info(<span class="string">s&quot;Initializing manager with initial deletions: <span class="subst">$initialTopicsToBeDeleted</span>, &quot;</span> +</span><br><span class="line">      <span class="string">s&quot;initial ineligible deletions: <span class="subst">$initialTopicsIneligibleForDeletion</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isDeleteTopicEnabled) &#123;</span><br><span class="line">      <span class="comment">// 如果&quot;delete.topic.enable=true&quot;的话,则将要删除的Topic加入到删除队列中。</span></span><br><span class="line">      controllerContext.queueTopicDeletion(initialTopicsToBeDeleted)</span><br><span class="line">      controllerContext.topicsIneligibleForDeletion ++= initialTopicsIneligibleForDeletion &amp; controllerContext.topicsToBeDeleted</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果&quot;delete.topic.enable=false&quot;的话,则将 /admin/delete_topics 下的标记删除</span></span><br><span class="line">      info(<span class="string">s&quot;Removing <span class="subst">$initialTopicsToBeDeleted</span> since delete topic is disabled&quot;</span>)</span><br><span class="line">      client.deleteTopicDeletions(initialTopicsToBeDeleted.toSeq, controllerContext.epochZkVersion)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">tryTopicDeletion</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDeleteTopicEnabled) &#123;</span><br><span class="line">      resumeDeletions()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">resumeDeletions</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> topicsQueuedForDeletion = <span class="type">Set</span>.empty[<span class="type">String</span>] ++ controllerContext.topicsToBeDeleted</span><br><span class="line">    <span class="keyword">if</span> (topicsQueuedForDeletion.nonEmpty)</span><br><span class="line">      info(<span class="string">s&quot;Handling deletion for topics <span class="subst">$&#123;topicsQueuedForDeletion.mkString(&quot;,&quot;)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">// 遍历队列进行Topic删除</span></span><br><span class="line">    topicsQueuedForDeletion.foreach &#123; topic =&gt;</span><br><span class="line">      <span class="comment">// 判断所有副本是否都标记为已成功删除</span></span><br><span class="line">      <span class="keyword">if</span> (controllerContext.areAllReplicasInState(topic, <span class="type">ReplicaDeletionSuccessful</span>)) &#123;</span><br><span class="line">        <span class="comment">// 删除缓存以及ZK中的Topic信息,具体为 &quot;brokers/topics/topicName&quot;、&quot;config/topics/topicName&quot;、&quot;admin/delete-topics/topicName&quot;</span></span><br><span class="line">        completeDeleteTopic(topic)</span><br><span class="line">        info(<span class="string">s&quot;Deletion of topic <span class="subst">$topic</span> successfully completed&quot;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!controllerContext.isAnyReplicaInState(topic, <span class="type">ReplicaDeletionStarted</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (controllerContext.isAnyReplicaInState(topic, <span class="type">ReplicaDeletionIneligible</span>)) &#123;</span><br><span class="line">          retryDeletionForIneligibleReplicas(topic)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果符合要求,尝试删除Topic</span></span><br><span class="line">      <span class="keyword">if</span> (isTopicEligibleForDeletion(topic)) &#123;</span><br><span class="line">        info(<span class="string">s&quot;Deletion of topic <span class="subst">$topic</span> (re)started&quot;</span>)</span><br><span class="line">        <span class="comment">// 启动Topic删除,即删除Topic所有的分区及副本数据</span></span><br><span class="line">        onTopicDeletion(<span class="type">Set</span>(topic))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="生产消息"><a href="#生产消息" class="headerlink" title="生产消息"></a>生产消息</h4><ul><li><p>开启kafka1作为生产者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it kafka1 /bin/bash</span><br><span class="line">kafka-console-producer.sh --broker-list docker.for.mac.host.internal:9091 --topic FirstTopic</span><br></pre></td></tr></table></figure></li></ul><h4 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h4><ul><li><p>开启kafka2、kafka3作为消费者,其中<code>--from-beginning</code>代表重头开始消费消息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it kafka2 /bin/bash</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server docker.for.mac.host.internal:9092 --topic FirstTopic --from-beginning</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it kafka3 /bin/bash</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server docker.for.mac.host.internal:9093 --topic FirstTopic --from-beginning</span><br></pre></td></tr></table></figure></li></ul><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202210062229469.png" style="zoom: 25%;" />]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mq </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转Kafka【一】</title>
      <link href="/%E7%8E%A9%E8%BD%ACKafka%E3%80%90%E4%B8%80%E3%80%91/"/>
      <url>/%E7%8E%A9%E8%BD%ACKafka%E3%80%90%E4%B8%80%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>首先,何为Kafka？</p><blockquote><p>Kafka是一种高吞吐量的分布式发布订阅系统,支持分区、多副本,它以高吞吐、可持久化、可水平扩展、支持流处理等多种特性而被广泛应用。主要应用于:日志收集、消息系统、用户活动跟踪、运营指标、流式处理等。</p></blockquote><p>为什么选择Kafka？我们知道消息队列有很多,像我们熟知的mq,还有<code>RocketMQ</code>、<code>RabbitMQ</code>、<code>ActivityMQ</code>,那相较于这些MQ来说,Kafka优势体现在哪里呢？我认为主要表现为:性能极致突出、生态成熟。接下来就让我们一起玩转Kafka吧!</p><span id="more"></span><h3 id="Kafka-的基本概念"><a href="#Kafka-的基本概念" class="headerlink" title="Kafka 的基本概念"></a>Kafka 的基本概念</h3><table><thead><tr><th>名词</th><th>解释</th></tr></thead><tbody><tr><td>Producer</td><td>消息生产者,向Broker发送消息的客户端</td></tr><tr><td>Broker</td><td>Kafka节点,多个Broker组成一个Kafka集群</td></tr><tr><td>Topic</td><td>消息主题,每个消息都会有一个Topic,用于对消息进行归类</td></tr><tr><td>Partition</td><td>消息分区,每个Topic数据可以拆分到多个分区中,每个分区中的消息是有序的</td></tr><tr><td>Consumer</td><td>消息消费者,向Broker拉取消息的客户端</td></tr><tr><td>ConsumerGroup</td><td>消费者组,每个消费者都属于一个特定的消费者,一条消息可以被多个消费组消费,但一个消费组中只有一个消费者可以消费这条消息</td></tr></tbody></table><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a><strong>Zookeeper</strong></h3><blockquote><p>Zookeeper 是一个开源的分布式协调服务框架,适合存储一些公共的配置信息，以及集群的一些元数据等。</p></blockquote><ul><li><p>为什么要提到 Zookeeper 呢？</p><ul><li>因为在 Kafka2.8 版本之前,Kafka 是强依赖 Zookeeper 的,没有 ZooKeeper 的话 Kafka 都无法运行,所以学习 Kafka 之前,得掌握 Zookeeper 的知识。</li><li>Zookeeper 为 Kafka 提供了元数据管理,例如: Borker 的信息、主题数据、分区数据等等。每个 Broker 启动时,都会与 Zookeeper 进行交互，将集群中所有的主题、配置、副本等信息保存到 Zookeeper 中。还有一些选举、扩容等机制也依赖 Zookeeper。</li></ul><p> </p></li><li><p>为什么 Kafka 要抛弃 Zookeeper 呢？</p><ul><li>1): Kafka 是强依赖 Zookeeper 的,所以你如果要使用 Kafka,就必须要跟着使用 Zookeeper,而对于企业来说,这样被动的增加了运维的成本。</li><li>2): Zookeeper 集群是强一致性的,如果 Zookeeper 集群中某个节点数据进行了变更,会通知其它的 Zookeeper 节点进行同步,必须等到半数以上节点同步完成后,才会返回成功。这样性能是有一些损耗的。</li><li>3): Zookeeper 只适用于存储一些简单的数据,如果写入量过大的话, Zookeeper 的性能和稳定性会下降,当Kafka集群以及分区较大的时候,Zookeeper 性能就很差了。</li><li>4): Zookeeper 集群选举时,是不对外提供服务的！</li></ul></li><li><p>移除 Zookeeper 的好处</p><ul><li>无需维护 Zookeeper 集群了，只需要维护 Kafka 集群即可。</li><li>使用 KRaft ,也就是基于 Raft 协议来实现故障转移和Leader选举。效率更高,可以支持更多的分区。</li></ul></li></ul><h3 id="使用Docker安装Kafka集群"><a href="#使用Docker安装Kafka集群" class="headerlink" title="使用Docker安装Kafka集群"></a><strong>使用Docker安装Kafka集群</strong></h3><blockquote><p>鉴于目前工作中主要还是使用的还是 Kafka 依赖 Zookeeper 的版本,故此次内容使用的 Zookeeper 版本为3.5.7,Kafka 的版本为 2.4.1</p></blockquote><ul><li><p>使用<code>docker-compose</code>编排 Zookeeper 集群</p><ul><li><p>新建<code>ZookeeperDockerfile.yaml</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line">networks:</span><br><span class="line"> zk-kafka-cluster:</span><br><span class="line">  name: zk-kafka-cluster</span><br><span class="line">services:</span><br><span class="line"> zk1:</span><br><span class="line">  image: zookeeper:<span class="number">3.5</span>.<span class="number">7</span></span><br><span class="line">  hostname: zk1</span><br><span class="line">  container_name: zk1</span><br><span class="line">  ports:</span><br><span class="line">   - <span class="number">2182</span>:<span class="number">2181</span></span><br><span class="line">   - <span class="number">8090</span>:<span class="number">8080</span></span><br><span class="line">  environment:</span><br><span class="line">   ZOO_MY_ID: <span class="number">1</span></span><br><span class="line">   ZOO_SERVERS: server.<span class="number">1</span>=zk1:<span class="number">2888</span>:<span class="number">3888</span>;<span class="number">2181</span> server.<span class="number">2</span>=zk2:<span class="number">2888</span>:<span class="number">3888</span>;<span class="number">2181</span> server.<span class="number">3</span>=zk3:<span class="number">2888</span>:<span class="number">3888</span>;<span class="number">2181</span> </span><br><span class="line">  volumes:</span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk1/data:/data</span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk1/datalog:/datalog</span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk1/conf:/conf </span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk1/logs:/logs </span><br><span class="line">  networks:</span><br><span class="line">   - zk-kafka-cluster</span><br><span class="line"> zk2:</span><br><span class="line">  image: zookeeper:<span class="number">3.5</span>.<span class="number">7</span></span><br><span class="line">  hostname: zk2</span><br><span class="line">  container_name: zk2</span><br><span class="line">  ports:</span><br><span class="line">   - <span class="number">2183</span>:<span class="number">2181</span></span><br><span class="line">   - <span class="number">8091</span>:<span class="number">8080</span></span><br><span class="line">  environment:</span><br><span class="line">   ZOO_MY_ID: <span class="number">2</span></span><br><span class="line">   ZOO_SERVERS: server.<span class="number">1</span>=zk1:<span class="number">2888</span>:<span class="number">3888</span>;<span class="number">2181</span> server.<span class="number">2</span>=zk2:<span class="number">2888</span>:<span class="number">3888</span>;<span class="number">2181</span> server.<span class="number">3</span>=zk3:<span class="number">2888</span>:<span class="number">3888</span>;<span class="number">2181</span> </span><br><span class="line">  volumes:</span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk2/data:/data</span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk2/datalog:/datalog</span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk2/conf:/conf </span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk2/logs:/logs</span><br><span class="line">  networks:</span><br><span class="line">   - zk-kafka-cluster</span><br><span class="line"> zk3:</span><br><span class="line">  image: zookeeper:<span class="number">3.5</span>.<span class="number">7</span></span><br><span class="line">  hostname: zk3</span><br><span class="line">  container_name: zk3</span><br><span class="line">  ports:</span><br><span class="line">   - <span class="number">2184</span>:<span class="number">2181</span></span><br><span class="line">   - <span class="number">8092</span>:<span class="number">8080</span></span><br><span class="line">  environment:</span><br><span class="line">   ZOO_MY_ID: <span class="number">3</span></span><br><span class="line">   ZOO_SERVERS: server.<span class="number">1</span>=zk1:<span class="number">2888</span>:<span class="number">3888</span>;<span class="number">2181</span> server.<span class="number">2</span>=zk2:<span class="number">2888</span>:<span class="number">3888</span>;<span class="number">2181</span> server.<span class="number">3</span>=zk3:<span class="number">2888</span>:<span class="number">3888</span>;<span class="number">2181</span> </span><br><span class="line">  volumes:</span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk3/data:/data</span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk3/datalog:/datalog</span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk3/conf:/conf </span><br><span class="line">   - /Users/mizhuo/Path/docker/zookeeper/zk3/logs:/logs</span><br><span class="line">  networks:</span><br><span class="line">    - zk-kafka-cluster</span><br></pre></td></tr></table></figure></li><li><p>构建 Zookeeper 集群</p><p><code>docker-compose -f zookeeperDokerfile.yaml up -d</code></p></li><li><p>浏览器查看 Zookeeper 运行情况</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202210041346579.png" style="zoom:50%;" /></li></ul></li><li><p>使用<code>docker-compose</code>编排 Kafka 集群</p><ul><li>新建<code>KafkaDockerfile.yaml</code></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line">networks:</span><br><span class="line"> zk-kafka-cluster:</span><br><span class="line">  name: zk-kafka-cluster</span><br><span class="line">services:</span><br><span class="line"> kafka1:</span><br><span class="line">  image: bitnami/kafka:<span class="number">2.4</span>.<span class="number">1</span></span><br><span class="line">  hostname: kafka1</span><br><span class="line">  container_name: kafka1</span><br><span class="line">  ports:</span><br><span class="line">   - <span class="number">9091</span>:<span class="number">9091</span></span><br><span class="line">  environment:</span><br><span class="line">   KAFKA_BROKER_ID: <span class="number">1</span></span><br><span class="line">   KAFKA_ADVERTISED_HOST_NAME: kafka1</span><br><span class="line">   KAFKA_ZOOKEEPER_CONNECT: zk1:<span class="number">2181</span>,zk2:<span class="number">2181</span>,zk3:<span class="number">2181</span></span><br><span class="line">   KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://docker.for.mac.host.internal:<span class="number">9091</span></span><br><span class="line">   KAFKA_LISTENERS: PLAINTEXT://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9091</span></span><br><span class="line">   ALLOW_PLAINTEXT_LISTENER: yes</span><br><span class="line">  volumes:</span><br><span class="line">   - /Users/mizhuo/Path/docker/kafka1/logs:/opt/bitnami/kafka/logs</span><br><span class="line">   - /Users/mizhuo/Path/docker/kafka1/data:/bitnami/kafka/data</span><br><span class="line">   - /etc/localtime:/etc/localtime:ro</span><br><span class="line">  external_links:</span><br><span class="line">   - zk1</span><br><span class="line">   - zk2</span><br><span class="line">   - zk3</span><br><span class="line">  networks:</span><br><span class="line">   - zk-kafka-cluster</span><br><span class="line">   </span><br><span class="line"> kafka2:</span><br><span class="line">  image: bitnami/kafka:<span class="number">2.4</span>.<span class="number">1</span></span><br><span class="line">  hostname: kafka2</span><br><span class="line">  container_name: kafka2</span><br><span class="line">  ports:</span><br><span class="line">   - <span class="number">9092</span>:<span class="number">9092</span></span><br><span class="line">  environment:</span><br><span class="line">   KAFKA_BROKER_ID: <span class="number">2</span></span><br><span class="line">   KAFKA_ADVERTISED_HOST_NAME: kafka2</span><br><span class="line">   KAFKA_ZOOKEEPER_CONNECT: zk1:<span class="number">2181</span>,zk2:<span class="number">2181</span>,zk3:<span class="number">2181</span></span><br><span class="line">   KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://docker.for.mac.host.internal:<span class="number">9092</span></span><br><span class="line">   KAFKA_LISTENERS: PLAINTEXT://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9092</span></span><br><span class="line">   ALLOW_PLAINTEXT_LISTENER: yes</span><br><span class="line">  volumes:</span><br><span class="line">   - /Users/mizhuo/Path/docker/kafka2/logs:/opt/bitnami/kafka/logs</span><br><span class="line">   - /Users/mizhuo/Path/docker/kafka2/data:/bitnami/kafka/data</span><br><span class="line">   - /etc/localtime:/etc/localtime:ro</span><br><span class="line">  external_links:</span><br><span class="line">   - zk1</span><br><span class="line">   - zk2</span><br><span class="line">   - zk3</span><br><span class="line">  networks:</span><br><span class="line">   - zk-kafka-cluster</span><br><span class="line">   </span><br><span class="line"> kafka3:</span><br><span class="line">  image: bitnami/kafka:<span class="number">2.4</span>.<span class="number">1</span></span><br><span class="line">  hostname: kafka3</span><br><span class="line">  container_name: kafka3</span><br><span class="line">  ports:</span><br><span class="line">   - <span class="number">9093</span>:<span class="number">9093</span></span><br><span class="line">  environment:</span><br><span class="line">   KAFKA_BROKER_ID: <span class="number">3</span></span><br><span class="line">   KAFKA_ADVERTISED_HOST_NAME: kafka3</span><br><span class="line">   KAFKA_ZOOKEEPER_CONNECT: zk1:<span class="number">2181</span>,zk2:<span class="number">2181</span>,zk3:<span class="number">2181</span></span><br><span class="line">   KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://docker.for.mac.host.internal:<span class="number">9093</span></span><br><span class="line">   KAFKA_LISTENERS: PLAINTEXT://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9093</span></span><br><span class="line">   ALLOW_PLAINTEXT_LISTENER: yes</span><br><span class="line">  volumes:</span><br><span class="line">   - /Users/mizhuo/Path/docker/kafka3/logs:/opt/bitnami/kafka/logs</span><br><span class="line">   - /Users/mizhuo/Path/docker/kafka3/data:/bitnami/kafka/data</span><br><span class="line">   - /etc/localtime:/etc/localtime:ro</span><br><span class="line">  external_links:</span><br><span class="line">   - zk1</span><br><span class="line">   - zk2</span><br><span class="line">   - zk3</span><br><span class="line">  networks:</span><br><span class="line">   - zk-kafka-cluster</span><br><span class="line">   </span><br><span class="line"> kafka-manager:</span><br><span class="line">   image: sheepkiller/kafka-manager:latest</span><br><span class="line">   container_name: kafka-manager</span><br><span class="line">   hostname: kafka-manager</span><br><span class="line">   ports:</span><br><span class="line">     - <span class="number">9001</span>:<span class="number">9000</span></span><br><span class="line">   links:</span><br><span class="line">     - kafka1</span><br><span class="line">     - kafka2</span><br><span class="line">     - kafka3</span><br><span class="line">   external_links:</span><br><span class="line">     - zk1</span><br><span class="line">     - zk2</span><br><span class="line">     - zk3</span><br><span class="line">   environment:</span><br><span class="line">     ZK_HOSTS: zk1:<span class="number">2181</span>,zk2:<span class="number">2181</span>,zk3:<span class="number">2181</span></span><br><span class="line">   networks:</span><br><span class="line">    - zk-kafka-cluster</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>构建 Kafka 集群</p><p><code>docker-compose -f kafkaDockerfile.yaml up -d</code></p></li><li><p>浏览器查看 kafka Manager</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202210042148973.png" style="zoom:50%;" /></li><li><p>查看 Zookeeper,可以看到 Kafka 创建的很多节点<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202210051535201.png"></p></li></ul></li></ul><div class="note green icon-padding flat"><i class="note-icon fas fa-thumbs-up"></i><p>至此,Kafka集群已经搭建完成了,后续会演示如何整合SpringBoot,生产消息、消费消息以及如何解决消息丢失、消息堆积等问题。</p></div>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mq </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么InnoDB要使用B+树</title>
      <link href="/%E4%B8%BA%E4%BB%80%E4%B9%88InnoDB%E8%A6%81%E4%BD%BF%E7%94%A8B+%E6%A0%91/"/>
      <url>/%E4%B8%BA%E4%BB%80%E4%B9%88InnoDB%E8%A6%81%E4%BD%BF%E7%94%A8B+%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>最近在研究数据库调优,最常用的优化手段就是<code>缩小结果集</code>、<code>分页</code>、<code>优化SQL避免出现索引失效</code>、<code>建索引</code>、<code>分库分表</code>,但不管怎么样都绕不开索引。而说到索引,查询很快、有序,就会想到<code>树</code>这个数据结构。但是MySQL默认的InnoDB引擎为什么使用B+树作为索引结构,而不是B树、平衡二叉树、红黑树呢？首先我们来了解一下各种树型结构。</p><span id="more"></span><h3 id="常见的树型结构"><a href="#常见的树型结构" class="headerlink" title="常见的树型结构"></a>常见的树型结构</h3><h4 id="二叉查找树-Binary-Search-Tree"><a href="#二叉查找树-Binary-Search-Tree" class="headerlink" title="二叉查找树(Binary Search Tree)"></a>二叉查找树(Binary Search Tree)</h4><p>但凡是个程序员都应该很熟悉二叉查找树了,是一个很经典的数据结构。它能够高效的进行增删查操作,每个操作的时间复杂度均为<code>O(logn)</code>,但是在极端情况下,比如:若一直插入递增的元素,它就会退化成链表,而链表查询的时间复杂度为<code>O(n)</code>,查找速度会大幅下降。</p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220823214631.png"></p><h4 id="AVL树-AVL-Tree"><a href="#AVL树-AVL-Tree" class="headerlink" title="AVL树(AVL Tree)"></a>AVL树(AVL Tree)</h4><p>为了解决二叉查找树退化成链表的问题,<code>自平衡二叉树</code>诞生了。而<code>AVL树</code>是最早诞生的自平衡二叉树,每增加和删除元素时它会通过一次或多次树旋转来平衡这个树,因此它不仅拥有二叉查找树的全部特性,并且每个节点的左子树和右子树的高度不会相差超过1。但是如果频繁的插入元素,这颗树会不断的进行左旋右旋来维持平衡,效率会越来越低。</p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/avl.gif"></p><h4 id="红黑树-Red-Black-Tree"><a href="#红黑树-Red-Black-Tree" class="headerlink" title="红黑树(Red Black Tree)"></a>红黑树(Red Black Tree)</h4><p><code>红黑树</code>也是<code>自平衡二叉树</code>的一种,它是一种特殊的<code>AVL树</code>,每当插入数据和删除数据的时候,它也会通过特定操作保持树的平衡,但与<code>AVL树</code>不同的是,<code>红黑树</code>的左右子树高度差可能会大于1。在最坏条件下时间复杂度也为<code>O(logn)</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1:结点是红色或黑色。</span><br><span class="line">2:根结点是黑色。</span><br><span class="line">3:所有叶子都是黑色。（叶子是NIL结点）</span><br><span class="line">4:每个红色结点的两个子结点都是黑色。（从每个叶子到根的所有路径上不能有两个连续的红色结点）</span><br><span class="line">5:从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点。 </span><br></pre></td></tr></table></figure><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202208232234864.gif"></p><h4 id="B树-B-Tree"><a href="#B树-B-Tree" class="headerlink" title="B树(B Tree)"></a>B树(B Tree)</h4><p>B树是从平衡二叉树演化而来，B树的每个节点可以存储多个关键字，它将节点大小设置为磁盘页的大小，充分利用了磁盘预读的功能。每次读取磁盘页时就会读取一整个节点。也正因每个节点存储着非常多个关键字，树的深度就会非常的小。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一棵 m 阶的 B 树具有如下特征:</span><br><span class="line"></span><br><span class="line">1:根节点至少有2个子女；</span><br><span class="line">2:每个中间节点都包含 k-1 个元素和 k 个孩子，其中 m/2&lt;=k&lt;=m；</span><br><span class="line">3:每一个叶子节点都包含 k-1 个元素，其中 m/2&lt;=k&lt;=m；</span><br><span class="line">4:所有的叶子节点均位于同一层；</span><br><span class="line">5:每个节点中的元素从小到大排列，节点当中 k-1 个元素正好是 k 个孩子包含的元素的值域划分。</span><br></pre></td></tr></table></figure><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202208242207835.gif"></p><p>对于B树来说,数据存在结点中,所以查询不太稳定,最好的情况是根结点查到了,最坏的情况是查到叶子结点。</p><h4 id="B-树-B-Tree"><a href="#B-树-B-Tree" class="headerlink" title="B+树(B+ Tree)"></a>B+树(B+ Tree)</h4><p>为了解决B树的弊端,B+树出现了,它将所有的数据存放在叶子结点中,在非叶子结点中只存储索引的指针。故每次查询都要找叶子结点,查询性能相对稳定。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">B+ 树的定义：</span><br><span class="line"></span><br><span class="line">1:B+ 树内存分为叶子结点以及非叶子结点：</span><br><span class="line">非叶子结点只是存储索引，叶子结点存储相关的数据</span><br><span class="line">2:底层的叶子结点之间形成了一个有序链表，方便了区间查询</span><br><span class="line">3:m阶B+树非根节点的子节点的数量是：取整（m/2）&lt;= x &lt;= m</span><br></pre></td></tr></table></figure><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/202208242210676.gif"></p><hr><h3 id="为什么B-树脱颖而出"><a href="#为什么B-树脱颖而出" class="headerlink" title="为什么B+树脱颖而出"></a>为什么B+树脱颖而出</h3><p>介绍完这几种树后,我们来思考一个问题,因为数据库表数据很多,一般都是存放在硬盘上的,而磁盘读取的效率要比内存低的多,所以要想加快数据库查询的效率,就必须要减少磁盘的IO,通过内存来提高效率。那么,要如何保证有效、高效的从磁盘将大量数据提取到内存中呢？<br>首先,二叉树就得排除掉了,因为当数据量很大的时候,二叉树的树高将会很大,在查找数据的时候就会进行很多次磁盘IO，效率将会极低。而B树与B+树相比较,B+树只有叶子结点存放数据,其他结点只存放索引,所以B+树比B树更加<code>矮胖</code>。磁盘的IO会更少,效率会更高。而且B+树的叶子节点中的索引数据是按顺序排列的,并且叶子节点间是通过双向链表进行连接的。这个特点使B+树在实现范围查找、排序查找、分组查找等操作时变得异常简单。而B树由于数据分散在各个节点,要实现这些操作很不容易。</p><div class="note green icon-padding flat"><i class="note-icon fas fa-thumbs-up"></i><p>所以,综合比较,B+树更加适合作为数据库的索引结构。</p></div>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合ELFK实现查看日志自由</title>
      <link href="/SpringBoot%E6%95%B4%E5%90%88ELFK%E5%AE%9E%E7%8E%B0%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97%E8%87%AA%E7%94%B1/"/>
      <url>/SpringBoot%E6%95%B4%E5%90%88ELFK%E5%AE%9E%E7%8E%B0%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97%E8%87%AA%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>之前讲过如何使用Docker安装ELK,本章来讲讲如何使用SpringBoot整合ELK以及ELFK,从而实现日志自由,再也不用跑服务器上捞日志了。</p><span id="more"></span><h4 id="搭建ELK"><a href="#搭建ELK" class="headerlink" title="搭建ELK"></a>搭建ELK</h4><p>如果还没搭建好ELK的,可以看看之前的博客。传送门:<a href="https://mizhuo.site/Docker%E5%AE%89%E8%A3%85ELK/">🚪🚪🚪</a></p><h4 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h4><blockquote><p>要使用logstash收集SpringBoot的日志,主要是通过Logback配置来实现。</p></blockquote><ul><li><p>添加依赖,我这里用的是gradle工程,maven的话可以拿下面的坐标自行转换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;net.logstash.logback:logstash-logback-encoder:6.3&#x27;</span><br><span class="line">implementation &#x27;ch.qos.logback:logback-classic:1.2.3&#x27;</span><br><span class="line">implementation &#x27;ch.qos.logback:logback-core:1.2.3&#x27;</span><br></pre></td></tr></table></figure></li><li><p>在resources下新建<code>logback-spring.xml</code>配置文件。</p><div class="note red icon-padding flat"><i class="note-icon fas fa-triangle-exclamation"></i><p>注意:此处不能命名为<code>logback.xml</code>,否则logback无法加载到<code>application.properties</code>里面的东西,因为加载顺序是这样的:<code>logback.xml—&gt;application.properties—&gt;logback-spring.xml</code></p></div></li><li><p>配置<code>logback-spring.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用默认日志配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用默认的控制台日志输出实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/console-appender.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--应用名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;APP_NAME&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;springBoot&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--LogStash访问host--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">name</span>=<span class="string">&quot;LOG_STASH_HOST&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logstash.host&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;localhost&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DEBUG日志输出到LogStash--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOG_STASH_DEBUG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOG_STASH_HOST&#125;:6001<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">timeZone</span>&gt;</span>Asia/Shanghai<span class="tag">&lt;/<span class="name">timeZone</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--自定义日志输出格式--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        &quot;project&quot;: &quot;mizhuo-logstash-demo&quot;,</span><br><span class="line">                        &quot;level&quot;: &quot;%level&quot;,</span><br><span class="line">                        &quot;service&quot;: &quot;$&#123;APP_NAME:-&#125;&quot;,</span><br><span class="line">                        &quot;pid&quot;: &quot;$&#123;PID:-&#125;&quot;,</span><br><span class="line">                        &quot;thread&quot;: &quot;%thread&quot;,</span><br><span class="line">                        &quot;class&quot;: &quot;%logger&quot;,</span><br><span class="line">                        &quot;message&quot;: &quot;%message&quot;,</span><br><span class="line">                        &quot;stack_trace&quot;: &quot;%exception&#123;20&#125;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当有多个LogStash服务时，设置访问策略为轮询--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">connectionTTL</span>&gt;</span>5 minutes<span class="tag">&lt;/<span class="name">connectionTTL</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--ERROR日志输出到LogStash--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOG_STASH_ERROR&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>$&#123;LOG_STASH_HOST&#125;:6002<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">providers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">timeZone</span>&gt;</span>Asia/Shanghai<span class="tag">&lt;/<span class="name">timeZone</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--自定义日志输出格式--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        &quot;project&quot;: &quot;mizhuo-logstash-demo&quot;,</span><br><span class="line">                        &quot;level&quot;: &quot;%level&quot;,</span><br><span class="line">                        &quot;service&quot;: &quot;$&#123;APP_NAME:-&#125;&quot;,</span><br><span class="line">                        &quot;pid&quot;: &quot;$&#123;PID:-&#125;&quot;,</span><br><span class="line">                        &quot;thread&quot;: &quot;%thread&quot;,</span><br><span class="line">                        &quot;class&quot;: &quot;%logger&quot;,</span><br><span class="line">                        &quot;message&quot;: &quot;%message&quot;,</span><br><span class="line">                        &quot;stack_trace&quot;: &quot;%exception&#123;20&#125;&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">providers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当有多个LogStash服务时，设置访问策略为轮询--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">connectionTTL</span>&gt;</span>5 minutes<span class="tag">&lt;/<span class="name">connectionTTL</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roundRobin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionStrategy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制框架输出日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.slf4j&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOG_STASH_DEBUG&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOG_STASH_ERROR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;site.mizhuo.springtransaction&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOG_STASH_DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;site.mizhuo.springtransaction&quot;</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOG_STASH_ERROR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>application.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span> <span class="string">transaction</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">mizhuo123</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.slf4j.Slf4jImpl</span></span><br><span class="line"><span class="attr">logstash:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com:</span></span><br><span class="line">      <span class="attr">baomidou:</span></span><br><span class="line">        <span class="attr">mybatisplus:</span> <span class="string">DEBUG</span></span><br><span class="line">    <span class="attr">site:</span></span><br><span class="line">      <span class="attr">mizhuo:</span></span><br><span class="line">        <span class="attr">springtransaction:</span></span><br><span class="line">          <span class="attr">mapper:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>logstash.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 6001</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">    type =&gt; &quot;debug&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 6002</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">    type =&gt; &quot;error&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 6003</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">    type =&gt; &quot;info&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; &quot;es:9200&quot;</span><br><span class="line">    index =&gt; &quot;trans-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开kibana控制面板<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220710091745.png"><br>可以看到已经创建了索引,对应的就是logstash配置的索引名称。</p></li><li><p>添加索引到kibana的索引模式<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220709233920.png"></p></li><li><p>进入<code>Discover</code><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220709234702.png"><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220709235335.png"><br>可以看到日志已经全部可以在kibana上查看了，并且可以根据其中关键字查询。</p></li></ul><div class="note red icon-padding flat"><i class="note-icon fa fa-triangle-exclamation"></i><p>​ELK已经搭建好了，但是有个弊端就是SpringBoot运用logstash-logbak-encoder将日志发送给logstash，相当耗费服务器资源，会对CPU，内存造成一个相当高的损耗。因此我们需要对我们的架构进行升级。</p></div><h4 id="FileBeat"><a href="#FileBeat" class="headerlink" title="FileBeat"></a>FileBeat</h4><blockquote><p>FileBeat，它是一个轻量级的日志收集处理工具(Agent)，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。</p></blockquote><ul><li><p>新建<code>filebeat.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/filebeat/test/logs/*.log</span></span><br><span class="line">    <span class="attr">fields_under_root:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 用来处理将多行数据当作一条日志的情况，根据自己的日志的格式做修改</span></span><br><span class="line">    <span class="attr">multiline.pattern:</span> <span class="string">&#x27;[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27;</span> <span class="comment">###   &#x27;^\[&#x27;</span></span><br><span class="line">    <span class="attr">multiline.negate:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">multiline.match:</span> <span class="string">after</span></span><br><span class="line">    <span class="attr">ignore_older:</span> <span class="string">168h</span></span><br><span class="line">    <span class="attr">tail_files:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;192.168.204.128:6001&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>修改<code>logstash.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 6001 </span><br><span class="line">    codec =&gt; json &#123;charset =&gt; &quot;UTF-8&quot;&#125;</span><br><span class="line">    client_inactivity_timeout =&gt; 36000</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter&#123;</span><br><span class="line">    mutate&#123;</span><br><span class="line">        #删除无效的字段</span><br><span class="line">        remove_field =&gt; [&quot;@version&quot;]</span><br><span class="line">        add_field =&gt; &#123; &quot;@fields&quot; =&gt; &quot;%&#123;fields&#125;&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    #新增timestamp字段，将@timestamp时间增加8小时</span><br><span class="line">    ruby &#123; code =&gt; &quot;event.set(&#x27;timestamp&#x27;, event.get(&#x27;@timestamp&#x27;).time.localtime + 8*60*60)&quot; &#125;</span><br><span class="line">    json &#123;</span><br><span class="line">        source =&gt; &quot;@fields&quot;</span><br><span class="line">        remove_field =&gt; [ &quot;@fields&quot;, &quot;fields&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; &quot;es:9200&quot;</span><br><span class="line">    index =&gt; &quot;beat-test-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>logback-spring.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用默认日志配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用默认的控制台日志输出实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/console-appender.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--应用名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;APP_NAME&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;springBoot&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志文件保存路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FILE_PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/home/logs&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DEBUG日志输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE_DEBUG&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出DEBUG以上级别日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置为默认的文件日志格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置文件命名格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE_PATH&#125;/debug/$&#123;APP_NAME&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置日志文件大小，超过就重新生成文件，默认10M--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;LOG_FILE_MAX_SIZE:-10MB&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数，默认30天--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;LOG_FILE_MAX_HISTORY:-30&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--ERROR日志输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE_ERROR&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只输出ERROR级别的日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置为默认的文件日志格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置文件命名格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE_PATH&#125;/error/$&#123;APP_NAME&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置日志文件大小，超过就重新生成文件，默认10M--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;LOG_FILE_MAX_SIZE:-10MB&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数，默认30天--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;LOG_FILE_MAX_HISTORY:-30&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制框架输出日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.slf4j&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;springfox&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;io.swagger&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_DEBUG&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_ERROR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;site.mizhuo.springtransaction&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;site.mizhuo.springtransaction&quot;</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_ERROR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将SpringBoot应用部署到docker<br>映射日志目录到宿主机</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> mizhuo</span><br><span class="line"><span class="comment"># VOLUME 指定了临时文件目录为/springboot。</span></span><br><span class="line"><span class="comment"># 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/springboot</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /springboot</span></span><br><span class="line"><span class="comment"># 将jar包添加到容器中并更名为app.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> spring-transaction-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="comment"># 运行jar包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure><p><code>docker run --name demo -v /root/logs:/home/logs -p 8888:8888 d 镜像ID</code></p></li><li><p>启动filebeat<br>将日志目录映射至filebeat，这样filebeat就能读到springboot的日志文件了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name filebeat --net elk_network -d --link logstash:logstash -e &quot;TZ=Asia/Shanghai&quot; -v /root/docker/Filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml -v /root/logs:/usr/share/filebeat/test/logs elastic/filebeat:7.17.4</span><br></pre></td></tr></table></figure></li><li><p>查看kibana<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/image-20220711065634659.png"></p></li></ul><div class="note green icon-padding flat"><i class="note-icon fas fa-thumbs-up"></i><p>​至此,ELFK已经搭建好了。后续可以再将kafka接入进来，进一步提高日志收集器的性能。</p></div>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arthas真的好用吗</title>
      <link href="/Arthas%E7%9C%9F%E7%9A%84%E5%A5%BD%E7%94%A8%E5%90%97/"/>
      <url>/Arthas%E7%9C%9F%E7%9A%84%E5%A5%BD%E7%94%A8%E5%90%97/</url>
      
        <content type="html"><![CDATA[<h4 id="Arthas介绍"><a href="#Arthas介绍" class="headerlink" title="Arthas介绍"></a>Arthas介绍</h4><p><code>Arthas</code> 是Alibaba开源的Java诊断工具,一般用于排查线上比较难以定位以及线下难以重现的问题,采用命令式交互模式,简单易上手,可以实时无侵入的监控JVM状态,以及动态追踪JAVA代码,并且可以动态替换class文件。</p><span id="more"></span><h4 id="基础教程"><a href="#基础教程" class="headerlink" title="基础教程"></a>基础教程</h4><p><code>Arthas</code>相关命令使用及下载安装请查官方文档,十分详细。传送门:<a href="https://arthas.aliyun.com/doc/">Arthas 用户文档</a></p><h4 id="线上定位问题"><a href="#线上定位问题" class="headerlink" title="线上定位问题"></a>线上定位问题</h4><div class="note orange icon-padding flat"><i class="note-icon fas fa-anchor"></i><p>你有没有遇到这样的问题:生产环境代码执行结果为什么和我本地不一致?难道我的代码没有部署成功?遇到问题开发环境很难重现出来,只能捞日志慢慢分析,系统突然变得卡顿,只能dump下来,使用工具慢慢分析,这样耗时耗力,而<code>Arthas</code>不仅可以实时监控JVM状态,反编译代码,还可以快速定位到问题所在,这次我们就一起来探索一下<code>Arthas</code>是如何做到的。</p></div><ul><li><p>启动一个SpringBoot的WEB项目,并在项目中定义了一处异常,现在探索一下使用Arthas如何定位异常并解决。</p></li><li><p>运行arthas,根据序号选择要监控的java程序。</p><p>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220717214442.png"></p></li><li><p><code>dashboard</code>命令可以查看仪表盘,线程信息、堆栈信息、gc次数及耗时等。</p><p>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220717225913.png"></p></li><li><p>使用<code> watch 类名 方法名 -x 2</code>命令查看发生异常的接口</p><p>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220717221457.png"></p><p>  可以看到接口接收的参数是正常的，但是代码发生了异常退出。</p></li><li><p>使用<code>trace 类名 方法名</code>查看方法调用过程</p><p>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220717222132.png"></p><p>  可以看到代码报了<code>/by zero</code>的异常,并且是在<code>ITransService</code>实现类的第47行。</p></li><li><p>使用<code>jad 类名</code>反编译代码</p><p>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220717222620.png"></p><p>  很快啊，就看到了第47行，的确出现了错误代码。但是临时修改代码，重新停机发布，不仅麻烦而且很影响用户体验。</p></li><li><p>修改代码并编译成class文件</p><p>  可以使用jad&amp;mc命令直接修改代码并编译</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jad --source-only 类名 &gt; /路径/类名.java</span><br><span class="line"></span><br><span class="line">mc /路径/类名.java -d /路径</span><br><span class="line"></span><br><span class="line">retransform /路径/类名.class</span><br></pre></td></tr></table></figure><p>  也可以自行编辑代码并编译，然后上传到服务器。</p></li><li><p>使用<code>redefine</code>或者<code>retransform</code>动态加载修改后的代码</p><p>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220717223727.png"></p><p>  很快啊，代码就被动态替换掉了，不用停机，不用等待。重新访问该接口，成功执行并返回。</p></li></ul><div class="note green icon-padding flat"><i class="note-icon fas fa-thumbs-up"></i><p>初探<code>Arthas</code>，十分满意。使用简单的命令就能查出绝大部分生产问题。还有很多命令就不一一演示了，可以自行查询官方文档。有了<code>Arthas</code>,妈妈再也不用担心我出生产事故了。</p></div>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arthas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务的7种传播行为</title>
      <link href="/Spring%E4%BA%8B%E5%8A%A1%E7%9A%847%E7%A7%8D%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/"/>
      <url>/Spring%E4%BA%8B%E5%8A%A1%E7%9A%847%E7%A7%8D%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>说到事务,大家都很熟悉,事务是数据库逻辑处理的基本单元,一般由一条或多条甚至是整个程序组成,事务保证成批的SQL要么全部执行,要么全部不执行。但是也存在一个问题,如果一个事务方法被另一个事务方法调用时,事务该如何管理呢?被调用的方法是在现有的事务中运行还是创建一个新事务并运行呢？因此在Spring中,将数据库事务定义了7个传播行为,分别对应着7种不同的方案。</p><span id="more"></span><h4 id="7种传播行为"><a href="#7种传播行为" class="headerlink" title="7种传播行为"></a>7种传播行为</h4><p>我们在<code>org.springframework.transaction</code>包中可以找到<code>TransactionDefinition</code>接口类。里面定义了spring事务的5种隔离级别以及7中传播行为。</p><table><thead><tr><th align="center">序号</th><th align="center">传播行为</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">PROPAGATION_REQUIRED</td><td align="center">默认行为,如果当前存在事务,则加入,否则新建一个新的事务并加入</td></tr><tr><td align="center">2</td><td align="center">PROPAGATION_SUPPORTS</td><td align="center">如果当前存在事务,则加入,否则以非事务方法执行</td></tr><tr><td align="center">3</td><td align="center">PROPAGATION_MANDATORY</td><td align="center">如果当前存在事务,则加入,否则抛出异常</td></tr><tr><td align="center">4</td><td align="center">PROPAGATION_REQUIRES_NEW</td><td align="center">新建一个新的事务,加入新事务,如果当前存在事务,暂停该事务</td></tr><tr><td align="center">5</td><td align="center">PROPAGATION_NOT_SUPPORTED</td><td align="center">始终以非事务方式执行</td></tr><tr><td align="center">6</td><td align="center">PROPAGATION_NEVER</td><td align="center">如果当前存在事务,则抛异常</td></tr><tr><td align="center">7</td><td align="center">PROPAGATION_NESTED</td><td align="center">如果当前存在事务,则以嵌套事务的方式执行</td></tr></tbody></table><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><blockquote><p>模拟一个的应用场景:银行转账。客户A转账给客户B 100元,那么A的账户减少100,B的账户增加100元,并且A要扣减千分之一的手续费。</p></blockquote><h5 id="创建库表"><a href="#创建库表" class="headerlink" title="创建库表"></a>创建库表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> transdemo (</span><br><span class="line">`id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>,</span><br><span class="line">`amt` <span class="type">decimal</span>(<span class="number">32</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">) engine INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> transdemo <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">2000.00</span>),(<span class="number">2</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="number">2000.00</span>),(<span class="number">3</span>,<span class="string">&#x27;mizhuo&#x27;</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> free_info (</span><br><span class="line">`from_id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">`amt` <span class="type">decimal</span>(<span class="number">32</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">    `tx_time` datetime</span><br><span class="line">) engine INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@InterfaceName</span> ITransMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 定义一个扣减金额和一个增加金额的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span>: 2022-06-30 22:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITransMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Update(&quot;update transdemo set amt = amt + #&#123;amt&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addMoney</span><span class="params">(String id,Double amt)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update transdemo set amt = amt - #&#123;amt&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">decrMoney</span><span class="params">(String id,Double amt)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@InterfaceName</span>: IFreeMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/7/3 14:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 定义一个扣减金额和一个增加金额的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IFreeMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Update(&quot;insert into free_info values(#&#123;from_id&#125;,#&#123;amt&#125;,CURRENT_TIME)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addFreeInfo</span><span class="params">(String id,Double amt)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> TransService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 转账服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span>: 2022-06-30 22:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ITransService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ITransMapper transMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IFreeService freeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> MiZhuo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 转账</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 12:55 上午 2022/7/2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [from_id, to_id, amt]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trans</span><span class="params">(String from_id, String to_id, Double amt)</span> &#123;</span><br><span class="line">        transMapper.decrMoney(from_id,amt);</span><br><span class="line">        transMapper.addMoney(to_id,amt);</span><br><span class="line">        <span class="built_in">this</span>.deducFree(from_id,amt);</span><br><span class="line">        freeService.addFreeInfo(from_id,amt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deducFree</span><span class="params">(String from_id, Double amt)</span> &#123;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">free</span> <span class="operator">=</span> amt * <span class="number">0.001</span>;</span><br><span class="line">        transMapper.decrMoney(from_id,free);</span><br><span class="line">        transMapper.addMoney(<span class="string">&quot;3&quot;</span>,free);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: FreeServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/7/3 13:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 手续费服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IFreeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IFreeMapper freeMapper;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> MiZhuo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 新增手续费记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 12:55 上午 2022/7/2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [from_id, amt]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFreeInfo</span><span class="params">(String from_id, Double amt)</span> &#123;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">free</span> <span class="operator">=</span> amt * <span class="number">0.001</span>;</span><br><span class="line">        freeMapper.addFreeInfo(from_id,free);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> TransController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span>: 2022-06-30 21:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/trans&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ITransService transService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IFreeService freeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/trade&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">trans</span><span class="params">(String from_id,String to_id,Double amt)</span>&#123;</span><br><span class="line">        transService.trans(from_id,to_id,amt);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success trans&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/free&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">free</span><span class="params">(String from_id,Double amt)</span>&#123;</span><br><span class="line">        freeService.addFreeInfo(from_id,amt);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success addFreeInfo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><h5 id="PROPAGATION-REQUIRED"><a href="#PROPAGATION-REQUIRED" class="headerlink" title="PROPAGATION_REQUIRED"></a>PROPAGATION_REQUIRED</h5><p>1:两个Service中,方法都使用了<code>@Transactional(propagation= Propagation.REQUIRED)</code><br>2:在<code>FreeServiceImpl.class</code>的<code>addFreeInfo</code>的方法中自定义一个错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFreeInfo</span><span class="params">(String from_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">free</span> <span class="operator">=</span> amt * <span class="number">0.001</span>;</span><br><span class="line">    freeMapper.addFreeInfo(from_id,free);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3:访问转账接口:<a href="http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100">http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100</a><br>可以发现SQL执行了,并且错误信息也打印了出来。</p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220703144602.png"></p><p>但是执行后数据没有任何变化,说明主事务与子事务都进行了回滚。</p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220703145043.png"></p><p>4:修改代码,将错误挪到主事务中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除int i = 1/0;</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFreeInfo</span><span class="params">(String from_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">free</span> <span class="operator">=</span> amt * <span class="number">0.001</span>;</span><br><span class="line">    freeMapper.addFreeInfo(from_id,free);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deducFree新增int i = 1/0;</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trans</span><span class="params">(String from_id, String to_id, Double amt)</span> &#123;</span><br><span class="line">    transMapper.decrMoney(from_id, amt);</span><br><span class="line">    transMapper.addMoney(to_id, amt);</span><br><span class="line">    freeService.addFreeInfo(from_id, amt);</span><br><span class="line">    <span class="built_in">this</span>.deducFree(from_id, amt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deducFree</span><span class="params">(String from_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">free</span> <span class="operator">=</span> amt * <span class="number">0.001</span>;</span><br><span class="line">    transMapper.decrMoney(from_id,free);</span><br><span class="line">    transMapper.addMoney(<span class="string">&quot;3&quot;</span>,free);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5:查看数据库,依旧没有发生变化<br>6:修改代码,使用try-catch将主事务方法体包裹起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除int i = 1/0;</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFreeInfo</span><span class="params">(String from_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">free</span> <span class="operator">=</span> amt * <span class="number">0.001</span>;</span><br><span class="line">    freeMapper.addFreeInfo(from_id,free);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deducFree新增int i = 1/0;并使用try-catch将方法体包裹起来</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trans</span><span class="params">(String from_id, String to_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        transMapper.decrMoney(from_id, amt);</span><br><span class="line">        transMapper.addMoney(to_id, amt);</span><br><span class="line">        freeService.addFreeInfo(from_id, amt);</span><br><span class="line">        <span class="built_in">this</span>.deducFree(from_id, amt);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deducFree</span><span class="params">(String from_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">free</span> <span class="operator">=</span> amt * <span class="number">0.001</span>;</span><br><span class="line">    transMapper.decrMoney(from_id,free);</span><br><span class="line">    transMapper.addMoney(<span class="string">&quot;3&quot;</span>,free);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7:查看结果,发现sql全部执行了，没有发生回滚。</p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220703173633.png"></p><p>8:结论:</p><table><thead><tr><th>子事务</th><th>主事务</th><th>结果</th></tr></thead><tbody><tr><td>异常</td><td>正常</td><td>均回滚</td></tr><tr><td>正常</td><td>异常</td><td>均回滚</td></tr><tr><td>正常</td><td>异常，并try-catch异常</td><td>不回滚</td></tr></tbody></table><h5 id="PROPAGATION-SUPPORTS"><a href="#PROPAGATION-SUPPORTS" class="headerlink" title="PROPAGATION_SUPPORTS"></a>PROPAGATION_SUPPORTS</h5><p>1:将方法<code>addFreeInfo</code>上的注释修改为<code> @Transactional(propagation= Propagation.SUPPORTS)</code><br>2:重启项目,再次访问:<a href="http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100">http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100</a><br>3:查看结果,数据没有发生变化,说明该方法加入了当前事务,并且进行了回滚。<br>4:这次访问<code>free</code>接口,只调用<code>addFreeInfo</code>方法。<a href="http://localhost:8888/trans/free?from_id=1&amp;amt=100">http://localhost:8888/trans/free?from_id=1&amp;amt=100</a><br>5:查看结果发现SQL执行成功,报错了数据并没有发生回滚。说明当前方法是没有被事务管理的。</p><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220703145440.png"></p><p>6:结论:当事务传播行为为<code>PROPAGATION_SUPPORTS</code>时,若当前存在事务,则加入事务,否则以非事务状态执行。</p><h5 id="PROPAGATION-MANDATORY"><a href="#PROPAGATION-MANDATORY" class="headerlink" title="PROPAGATION_MANDATORY"></a>PROPAGATION_MANDATORY</h5><p>1:将方法<code>addFreeInfo</code>上的注释修改为<code> @Transactional(propagation= Propagation.MANDATORY)</code><br>2:重启项目,再次访问:<a href="http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100">http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100</a><br>3:查看结果,数据没有发生变化,说明该方法加入了当前事务,并且进行了回滚。<br>4:这次访问<code>free</code>接口,只调用<code>deducFree</code>方法。<a href="http://localhost:8888/trans/free?from_id=1&amp;amt=100">http://localhost:8888/trans/free?from_id=1&amp;amt=100</a><br>5:发现控制台直接报错了,且报错原因就是:<code>No existing transaction found for transaction marked with propagation &#39;mandatory&#39;</code>,意思就是当前没有找到事务。<img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220703145649.png">6:结论:当事务传播行为为<code>PROPAGATION_MANDATORY</code>时,若当前存在事务,则加入事务,否则直接抛出异常。</p><h5 id="PROPAGATION-REQUIRES-NEW"><a href="#PROPAGATION-REQUIRES-NEW" class="headerlink" title="PROPAGATION_REQUIRES_NEW"></a>PROPAGATION_REQUIRES_NEW</h5><p>1:将方法<code>addFreeInfo</code>上的注释修改为<code> @Transactional(propagation= Propagation.REQUIRES_NEW)</code><br>2:重启项目,再次访问:<a href="http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100">http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100</a><br>3:查看结果,数据没有发生变化,说明该方法有事务,并且进行了回滚。<br>4:修改代码,使用try-catch将主事务方法体包裹起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trans</span><span class="params">(String from_id, String to_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        transMapper.decrMoney(from_id, amt);</span><br><span class="line">        transMapper.addMoney(to_id, amt);</span><br><span class="line">        freeService.addFreeInfo(from_id, amt);</span><br><span class="line">        <span class="built_in">this</span>.deducFree(from_id, amt);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5:重启项目,再次访问:<a href="http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100">http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100</a><br>6:查看结果,可以看出子事务回滚了,而主事务没有回滚<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220703181056.png"><br>7:修改代码,将错误挪到主事务中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除int i = 1/0;</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFreeInfo</span><span class="params">(String from_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">free</span> <span class="operator">=</span> amt * <span class="number">0.001</span>;</span><br><span class="line">    freeMapper.addFreeInfo(from_id,free);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deducFree新增int i = 1/0;</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trans</span><span class="params">(String from_id, String to_id, Double amt)</span> &#123;</span><br><span class="line">    transMapper.decrMoney(from_id,amt);</span><br><span class="line">    transMapper.addMoney(to_id,amt);</span><br><span class="line">    freeService.addFreeInfo(from_id,amt);</span><br><span class="line">    <span class="built_in">this</span>.deducFree(from_id,amt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deducFree</span><span class="params">(String from_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">free</span> <span class="operator">=</span> amt * <span class="number">0.001</span>;</span><br><span class="line">    transMapper.decrMoney(from_id,free);</span><br><span class="line">    transMapper.addMoney(<span class="string">&quot;3&quot;</span>,free);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8:重启项目,再次访问:<a href="http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100">http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100</a><br>9:查看数据库结果,发现主事务回滚了,而子事务没有回滚。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220703150418.png"><br>10:结论:</p><table><thead><tr><th>子事务</th><th>主事务</th><th>结果</th></tr></thead><tbody><tr><td>异常</td><td>正常，并try-catch异常</td><td>子事务回滚，主事务不回滚</td></tr><tr><td>正常</td><td>异常</td><td>子事务不回滚，主事务回滚</td></tr><tr><td>异常</td><td>正常</td><td>均回滚</td></tr></tbody></table><h5 id="PROPAGATION-NOT-SUPPORTED"><a href="#PROPAGATION-NOT-SUPPORTED" class="headerlink" title="PROPAGATION_NOT_SUPPORTED"></a>PROPAGATION_NOT_SUPPORTED</h5><p>1:将方法<code>addFreeInfo</code>上的注释修改为<code> @Transactional(propagation= Propagation.NOT_SUPPORTED)</code><br>2:重启项目,访问<code>free</code>接口,只调用<code>addFreeInfo</code>方法。<a href="http://localhost:8888/trans/free?from_id=1&amp;amt=100">http://localhost:8888/trans/free?from_id=1&amp;amt=100</a><br>3:查看结果发现SQL执行成功,报错了数据并没有发生回滚。说明当前方法是没有被事务管理的。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220703150418.png"><br>4:结论:<code>PROPAGATION_NOT_SUPPORTED</code>修饰的方法,都会以非事务状态执行。</p><h5 id="PROPAGATION-NEVER"><a href="#PROPAGATION-NEVER" class="headerlink" title="PROPAGATION_NEVER"></a>PROPAGATION_NEVER</h5><p>1:将方法<code>addFreeInfo</code>上的注释修改为<code> @Transactional(propagation= Propagation.NEVER)</code><br>2:重启项目,再次访问:<a href="http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100">http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100</a><br>3:查看控制台发现直接报错了,且报错原因就是:<code> Existing transaction found for transaction marked with propagation &#39;never&#39;</code><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220703213844.png"><br>4:访问<code>free</code>接口,只调用<code>addFreeInfo</code>方法。<a href="http://localhost:8888/trans/free?from_id=1&amp;amt=100">http://localhost:8888/trans/free?from_id=1&amp;amt=100</a><br>5:查看结果,说明只执行该方法时,未被事务控制。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220703150418.png"><br>6:结论:<code>PROPAGATION_NEVER</code>修饰,若当前存在事务，则直接抛出异常。若当前不存在事务,则以非事务状态执行。</p><h5 id="PROPAGATION-NESTED"><a href="#PROPAGATION-NESTED" class="headerlink" title="PROPAGATION_NESTED"></a>PROPAGATION_NESTED</h5><p>1:将方法<code>addFreeInfo</code>上的注释修改为<code> @Transactional(propagation= Propagation.NESTED)</code><br>2:重启项目,再次访问:<a href="http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100">http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100</a><br>3:查看结果,数据没有发生变化,说明该方法有事务,并且进行了回滚。<br>4:修改<code>trans</code>方法,使用try-catch把代码体包裹起来.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trans</span><span class="params">(String from_id, String to_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        transMapper.decrMoney(from_id, amt);</span><br><span class="line">        transMapper.addMoney(to_id, amt);</span><br><span class="line">        <span class="built_in">this</span>.deducFree(from_id, amt);</span><br><span class="line">        freeService.addFreeInfo(from_id, amt);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5:重启项目,再次访问:<a href="http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100">http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100</a><br>6:查看结果,子事务回滚了,而主事务没有回滚<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20220703160051.png"><br>7:修改代码,将错误挪到主事务中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除int i = 1/0;</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.NESTED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFreeInfo</span><span class="params">(String from_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">free</span> <span class="operator">=</span> amt * <span class="number">0.001</span>;</span><br><span class="line">    freeMapper.addFreeInfo(from_id,free);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deducFree新增int i = 1/0;</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trans</span><span class="params">(String from_id, String to_id, Double amt)</span> &#123;</span><br><span class="line">    transMapper.decrMoney(from_id,amt);</span><br><span class="line">    transMapper.addMoney(to_id,amt);</span><br><span class="line">    freeService.addFreeInfo(from_id,amt);</span><br><span class="line">    <span class="built_in">this</span>.deducFree(from_id,amt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deducFree</span><span class="params">(String from_id, Double amt)</span> &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">free</span> <span class="operator">=</span> amt * <span class="number">0.001</span>;</span><br><span class="line">    transMapper.decrMoney(from_id,free);</span><br><span class="line">    transMapper.addMoney(<span class="string">&quot;3&quot;</span>,free);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8:重启项目,再次访问:<a href="http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100">http://localhost:8888/trans/trade?from_id=1&amp;to_id=2&amp;amt=100</a><br>9:查看数据库结果,发现主事务与子事务都回滚了。<br>10:结论:</p><table><thead><tr><th>子事务</th><th>主事务</th><th>结果</th></tr></thead><tbody><tr><td>异常</td><td>正常，并try-catch异常</td><td>子回滚，主不回滚</td></tr><tr><td>正常</td><td>异常</td><td>均回滚</td></tr><tr><td>异常</td><td>正常</td><td>均回滚</td></tr></tbody></table><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>本文demo代码:<a href="https://github.com/MiZhuo/Code/tree/main/StudyDemo/spring-transaction">https://github.com/MiZhuo/Code/tree/main/StudyDemo/spring-transaction</a></p></div>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paxos算法与Raft算法</title>
      <link href="/Paxos%E7%AE%97%E6%B3%95%E4%B8%8ERaft%E7%AE%97%E6%B3%95/"/>
      <url>/Paxos%E7%AE%97%E6%B3%95%E4%B8%8ERaft%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>上篇讲到CAP和BASE理论,这章就来聊聊Paxos算法与Raft算法,这两种算法是用来解决分布式一致性问题的,被广泛的应用于各种分布式系统中。这两种算法是怎么解决一致性问题的呢?我们来深入探讨一下。</p><span id="more"></span><h3 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-tags"></i><p>Paxos算法的基本介绍这里就不多说了,感兴趣的可以百度一下,这里直接开始了解Paxos算法的基本原理。Paxos算法中有着三个角色,在讲这三个角色之前,先介绍一下美国总统竞选的流程,像奥巴马呀，川普呀，拜登呀，他们在参加竞选时,得先提出提案,意思就是通知大家,我要竞选总统了,大家都来给我投票呀，而拥有投票权的民众就有权利同意或者拒绝这个提案。当所有票数都计算出来了,总统确定了,各个媒体就开始向全世界传播这则消息。</p></div><ul><li><code>Proposer(提案者)</code>：就像是总统参选人,主要职责就是提出提案。</li><li><code>Acceptor(决策者)</code>：就像是拥有选举权的民众,主要职责就是接受提案,对提案进行投票。</li><li><code>Learner(学习者)</code>：就像是媒体,主要职责就是获取选举结果,然后进行传播,不参与投票。</li></ul><p>这种选举呢,根据竞选人数与投票人数是息息相关的,就比如现在只有一个人去参加竞选,根本没有人竞争,那肯定是这个人当选。所以要具体情况具体分析。</p><h4 id="单提案与多决策"><a href="#单提案与多决策" class="headerlink" title="单提案与多决策"></a>单提案与多决策</h4><p>这种情况很简单,因为根本没得选,非你莫属,所以很快就结束选举了,但是如果提案者挂掉了,系统就无法工作了。所以系统中一般不会这么选择单提案者。</p><h4 id="多提案与单决策"><a href="#多提案与单决策" class="headerlink" title="多提案与单决策"></a>多提案与单决策</h4><p>这种情况也不难,川普和拜登在竞争,就一张选票,谁拿到了,谁就当选。当然,在系统中可没有什么贿赂啊,或者我跟你关系好,我就选你。在系统中,先收到哪个提案者的提案,就选谁,没有什么情分可言的,就是一个投票机器。这种模式也有相同的问题,不稳定,当决策者发生故障或者首个提案者发生故障,系统也就无法工作了。</p><h4 id="多提案与多决策"><a href="#多提案与多决策" class="headerlink" title="多提案与多决策"></a>多提案与多决策</h4><p>上面两种模式都不稳定,所以还是得看这种多提案者和多个决策者的模式。但因为参与的角色多了起来,流程也就变得复杂起来。</p><ul><li><p>情况一:同一时间内,只有一个提案者提出提案。</p><p>这种情况下,决策者先收到谁就会选谁,所以最开始提出提案的提案者就选举成功。</p></li><li><p>情况二:同一时间内,有多个提案者提出提案。</p><p>这种情况下,决策者会同时收到多个提案,没法判断是谁先来的,所以无法决策。为此,提案者提出提案的时候,会带上一个序号,谁的序号大决策者就选谁,这个序号由ID加上时间戳组合,但这也有个问题,就是网络可能波动,导致序号大的晚接受到。就比如:民众接受川普(003号选手)的提案是2021年09月09日11时32分50秒,这个时候民众不知道还有人也参加了选举,就答应了川普,到时候一定选你,但民众又在2021年09月09日11时32分57秒接受拜登(007号选手)的提案,这个时候怎么办呢?拜登的序号比较大呀,但是民众已经答应将投票给川普了呀。所以为解决这个问题,系统将其拆分成了两阶段提交。</p></li></ul><h4 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h4><p>还是刚刚那个问题,两阶段提交是怎么解决的呢?</p><ul><li>准备阶段:当民众先答应将投票川普后,又接受了序号较大的拜登的提案,这个时候也会答应将选票投给拜登。当然后面如果又收到了序号更大的提案,仍然会答应。收到了序号小的则会直接拒绝。</li><li>提交阶段:当真正投票的时候,川普开开心心的去参加,心想大部分人都答应投我,这把稳了,可是这些人全部反水了,都投序号大的拜登去了。而一旦多数人都投拜登了,这场选举就结束了,拜登胜出。</li></ul><h3 id="Raft算法"><a href="#Raft算法" class="headerlink" title="Raft算法"></a>Raft算法</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-tags"></i><p>Raft算法是基于Paxos算法的思想,进行了简化和限制。在Raft算法中也有三个角色,在讲这三个角色前,也举个例子:假设现在有五个小兄弟开黑打王者农药,五个人水平都很强,都是最强王者,但没有总指挥,各打各的,而对面实力也很强,且配合很好,被打的节节败退。他们也需要一个总指挥,但谁来当呢?他们是这么解决的,他们每个人都有一个随机时间的倒计时器,时间倒计时结束,就把自己作为总指挥候选人,然后派 <code>微信</code> 同志去通知其它几位兄弟说自己要当总指挥。而其它兄弟倒计时还没结束,也没有接受任何的消息,就会同意这个请求。跟派来的微信通知说“可以,就选你做总指挥了”,当接收一半以上兄弟的这个消息,就可以成功升任总指挥。现在每个决策都由总指挥确定,确定好策略就派 <code>微信</code> 同志去通知其它几位兄弟,如果有兄弟没有收到消息,就重新派个同志继续同志,直到收到应答。</p></div><ul><li><code>Leader</code>：就像是总指挥,主要负责发起心跳，响应客户端，创建日志，同步日志。</li><li><code>Candidate</code>：就像是选出总指挥前五个开黑的兄弟,每个人都可以去竞选总指挥这个位置。Leader 选举过程中的临时角色，由 Follower 转化而来，发起投票参与竞选。</li><li><code>Follower</code>：就像是选出总指挥后,除了总指挥外,剩余的兄弟,接受总指挥的安排。接受 Leader 的心跳和日志同步数据，投票给 Candidate。</li></ul><p><em><strong>想比较直观的了解<a href="http://thesecretlivesofdata.com/raft/">Raft</a>,可以访问这个网站:<a href="%60http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a>,它用动画的模式,将Raft选举过程讲的十分清楚。</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAP和BASE理论</title>
      <link href="/CAP%E5%92%8CBASE%E7%90%86%E8%AE%BA/"/>
      <url>/CAP%E5%92%8CBASE%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p>现在大家天天在说分布式系统,通常我们理解的分布式系统,就是将一个复杂的系统拆分成多个简单的子系统,然后将这些子系统分别部署到不同的服务器下,而这些子系统共同构成的系统,就是我们所说的分布式系统。与传统的单体应用架构相比,分布式有着更强的机动性、可拓展性,但是分布式依靠网络通信,所以随着网络风险都会导致系统出现问题,因此就有了CAP和BASE理论。</p><span id="more"></span><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-tags"></i><p>所谓CAP定理就是指在一个分布式系统中,<code>一致性(Consistency)、可用性(Availability)和分区容错性(Partition tolerance)</code>这三个基本需求，最多只能同时满足其中的2个。</p></div><ul><li>一致性:指数据在多个副本直接要保持一致。</li><li>可用性:指任何操作都可以得到响应的结果,也就是要保证系统提供的服务要一直保持在可用的状态。</li><li>分区容错性:指系统在遇到任何问题而导致部分节点之间通信失败,但此时仍然可以对外提供满足一致性与可用性的服务。<br>有人可能会说为什么只能满足其中2个呢?我追求完美,就要全部满足!那么我们来举个栗子:</li></ul><div class="note pink icon-padding flat"><i class="note-icon fas fa-lemon"></i><p>现在有一个分布式架构搭建的购物网站,数据库是一主多从,现在有个秒杀促销活动,999秒杀一台苹果18PRO MAX 10TB,限量只有10台。某用户抢到了一台,主数据库已经将库存减1了,此时还没同步到从数据库的时候,主数据库挂掉了。此时主数据库库存是9,其它从数据库库存是10。</p></div><p>按照我们上面讲的CAP理论,如果此时我们要保证数据的一致性的话,那么我们就必须等主数据库重启并将数据同步到从数据库后,才能响应结果,而这个时长我们是无法保证的。因此,在这种情况下,我们如果要保证一致性的话那么就无法保证可用性了。而如果保证可用性的话,那么在数据还没同步的情况下,就将响应结果返回了,如果此时有一位用户也抢到了,此时请求会落在另一台数据库,而这台数据库库存是10,与原主数据库库存是不一致的,这样的话,一致性就满足不了。所以在保证分区容错性的情况下,一致性和可用性是互斥的。</p><p><em><strong>在分布式系统,分区容错性是一定要满足的。因此,我们必须权衡我们的业务,是要优先保证一致性还是可用性</strong></em></p><h4 id="CP-强一致"><a href="#CP-强一致" class="headerlink" title="CP(强一致)"></a>CP(强一致)</h4><p>为保证数据的强一致性,就必须拒绝请求。像<code>Zookeeper</code>就是CP的代表,在<code>Zookeeper</code>选举过程中或者是半数及以上的机器不可用时,对外是不提供服务的。当数据发生修改时,必须同步之半数以上节点,才会返回结果。</p><h4 id="AP-高可用"><a href="#AP-高可用" class="headerlink" title="AP(高可用)"></a>AP(高可用)</h4><p>为保证系统的高可用,可以将旧值返回。像Redis集群模式就是AP的,在数据发生修改时,Redis会马上返回结果,再去同步数据。也比如Eureka也是AP,当客户端心跳丢失后,Eureka不会马上停止服务,而是保护一段时间后再剔除该服务。</p><blockquote><p>所以基于CAP理论,权衡各种情况,BASE理论诞生了。</p></blockquote><h3 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-tags"></i><p>BASE指的是<code>Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）</code>,它是对CAP中的一致性与可用性权衡的结果,核心思想是<strong>即使无法做到强一致性,但是每个应用可以根据自身业务特点,采用适当的方式来使系统达到最终一致性</strong>。</p></div><ul><li>基本可用:在系统出现不可预知的故障时,允许损失部分可用性。<ul><li>时间损失:比如正常访问的功能,1s内就能返回结果,但由于出现故障,导致要2-3s才返回结果,这就是时间损失。</li><li>功能损失:很多网站搞活动的时候,经常会出现<code>活动太火爆了!</code>等等,这些就是功能上的损失。</li></ul></li><li>软状态:允许系统中的数据存在中间状态,并认为该中间状态的存在不会影响系统的整体可用性,即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</li><li>最终一致性:系统中所有的数据副本,在经过一段时间的同步后,最终能够达到一个一致的状态。因此最终一致性的本质是需要系统保证最终数据能够达到一致,而不需要实时保证系统数据的强一致性。</li></ul><div class="note green icon-padding flat"><i class="note-icon fas fa-thumbs-up"></i><p>具体选择强一致性还是最终一致性,还是得看实际业务需求,像银行转账这种对数据十分严格的,肯定是要保证强一致性的,而一些对数据不严格的系统,还是推崇最终一致性。因为虽然牺牲了强一致性,但是不仅得到了高可用性,而且最终数据也能够保持一致。</p></div>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA设计模式详解</title>
      <link href="/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
      <url>/JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="JAVA设计模式分类"><a href="#JAVA设计模式分类" class="headerlink" title="JAVA设计模式分类"></a>JAVA设计模式分类</h4><p>设计模式主要分为三大类：</p><ul><li>创建型<blockquote><p>工厂方法、抽象工厂方法、单例模式、建造者模式、原型模式</p></blockquote></li><li>结构型<blockquote><p>适配器模式、桥接模式、组合模式、装饰器模式、外观模式、享元模式、代理模式</p></blockquote></li><li>行为型<blockquote><p>责任链模式、命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、策略模式、模板方法模式、观察者模式、状态模式、访问者模式</p></blockquote><span id="more"></span></li></ul><h4 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h4><h5 id="总原则：开闭原则"><a href="#总原则：开闭原则" class="headerlink" title="总原则：开闭原则"></a>总原则：开闭原则</h5><blockquote><p>开闭原则：对扩展开放，对修改关闭。在程序需要拓展的时候，不能去修改原有的代码。而是要扩展原有的代码，实现一个热插拔的效果。</p></blockquote><h5 id="单一职责模式"><a href="#单一职责模式" class="headerlink" title="单一职责模式"></a>单一职责模式</h5><p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</p><h5 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h5><p>任何基类可以出现的地方，子类一定可以出现。里氏替换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受影响时，基类才能真正被复用吗，而衍生类也能够在基类的基础上增加新的行为。里氏替换原则是对“开闭”原则的补充。实现“开闭”原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化具体实现，所以里氏替换原则是对实现抽象化的具体步骤的规范。</p><pre><code>在里氏替换原则中，子类尽量不要重写和重载父类的方法。因为父类代表了定义好的结构，通过这个规范的接口和外界交互，子类不应该随便破坏它。</code></pre><h5 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h5><p>这个是开闭原则的基础，具体内容：面对接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而是与具体类上曾接口交互。</p><h5 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h5><p>每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分，使用多个隔离的接口，比使用单个接口要好。</p><h5 id="迪米特法则（最少知道原则）"><a href="#迪米特法则（最少知道原则）" class="headerlink" title="迪米特法则（最少知道原则）"></a>迪米特法则（最少知道原则）</h5><p>一个类对自己的依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部，这样当被依赖的类变化。</p><h5 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h5><p>尽量使用合成&#x2F;聚合的方式，而不是使用继承。</p><h4 id="JAVA中的23中设计模式"><a href="#JAVA中的23中设计模式" class="headerlink" title="JAVA中的23中设计模式"></a>JAVA中的23中设计模式</h4><p><em><strong>创建型</strong></em>:</p><h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><ul><li>普通简单工厂</li></ul><blockquote><p>通俗来说，就是建立一个工厂类，对实现了同一接口的类进行实例的创建。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 首先创建一个共用接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mobile</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mobileInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 然后创建两个实现类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplePhone</span> <span class="keyword">implements</span> <span class="title class_">Mobile</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mobileInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Apple,iphone11,A13&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiPhone</span> <span class="keyword">implements</span> <span class="title class_">Mobile</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mobileInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HuaWei,P40Pro,麒麟990 5G&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 最后创建工厂类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobileFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Mobile <span class="title function_">productionMobile</span><span class="params">(String modelNumber)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;Apple&quot;</span>.equals(modelNumber))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApplePhone</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;HuaWei&quot;</span>.equals(modelNumber))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWeiPhone</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**测试如下**/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">MobileFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MobileFactory</span>();</span><br><span class="line">  <span class="type">Mobile</span> <span class="variable">mobile</span> <span class="operator">=</span> factory.productionMobile(<span class="string">&quot;HuaWei&quot;</span>);</span><br><span class="line">  mobile.mobileInfo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**输出结果**/</span></span><br><span class="line">HuaWei,P40Pro,麒麟<span class="number">990</span> 5G</span><br></pre></td></tr></table></figure><ul><li>多方法简单工厂</li></ul><blockquote><p>很容易看出简单工厂是用字符串传值，所以很容易出现传错值的情况，因此稍微改动一下。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobileFactory</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> Mobile <span class="title function_">productionAppleMobile</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApplePhone</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> Mobile <span class="title function_">productionHuaWeiMobile</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWeiPhone</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**测试如下**/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">MobileFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MobileFactory</span>();</span><br><span class="line">  <span class="type">Mobile</span> <span class="variable">mobile</span> <span class="operator">=</span> factory.productionAppleMobile();</span><br><span class="line">  mobile.mobileInfo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**输出结果**/</span></span><br><span class="line">Apple,iphone11,A13</span><br></pre></td></tr></table></figure><ul><li>静态方法简单工厂</li></ul><blockquote><p>将工厂类设置为静态方法，这样就不需要每次实例化一个工厂类,直接调用就可以了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobileFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Mobile <span class="title function_">productionAppleMobile</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApplePhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Mobile <span class="title function_">productionHuaWeiMobile</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWeiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**测试如下**/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">  MobileFactory.productionHuaWeiMobile().mobileInfo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**输出结果**/</span></span><br><span class="line">HuaWei,P40Pro,麒麟<span class="number">990</span> 5G</span><br></pre></td></tr></table></figure><blockquote><p>根据上面的例子，可以看出简单工厂有一个问题，就是每一个实例的创建都依赖于工厂类，也就是说，如果需要拓展程序，必须要对工厂类进行修改，这违背了<a href="https://www.baidu.com/s?ie=UTF-8&wd=%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99">开闭原则</a>。所以从设计层面来讲，这样是有问题的，那么要如何解决呢？这里就引用到了工厂方法模式，就是创建一个工厂接口，每个工厂类实现这个接口，之后改动的话，只需要新建一个实现类，不需要改动之前的代码。</p></blockquote><ul><li>工厂方法模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个工厂接口</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MobileFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Mobile <span class="title function_">producationMobile</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建两个工厂实现类</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiPhoneFactory</span> <span class="keyword">implements</span> <span class="title class_">MobileFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mobile <span class="title function_">producationMobile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuaWeiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplePhoneFactory</span> <span class="keyword">implements</span> <span class="title class_">MobileFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mobile <span class="title function_">producationMobile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApplePhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**测试如下**/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">MobileFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuaWeiPhoneFactory</span>();</span><br><span class="line">  <span class="type">Mobile</span> <span class="variable">mobile</span> <span class="operator">=</span> factory.producationMobile();</span><br><span class="line">  mobile.mobileInfo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**输出结果**/</span></span><br><span class="line">HuaWei,P40Pro,麒麟<span class="number">990</span> 5G</span><br></pre></td></tr></table></figure><blockquote><p>这样的话就可以将类的加载推迟到子类中进，而且能满足“开闭原则”。但是问题随之而来，每次增加一个产品的时候，都需要增加一个具体类和对象实现工厂。在一定程度上增加了系统的复杂度。</p></blockquote><h5 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建一个抽象工厂，并定义两个抽象方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Mobile <span class="title function_">producationMobile</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title function_">producationComputer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建一个具体的工厂类继承抽象工厂，并实现抽象方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoMiFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractFactory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mobile <span class="title function_">producationMobile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaoMiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">producationComputer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XiaoMiComputer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**测试如下**/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">AbstractFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XiaoMiFactory</span>();</span><br><span class="line">  <span class="type">Mobile</span> <span class="variable">mobile</span> <span class="operator">=</span> factory.producationMobile();</span><br><span class="line">  mobile.mobileInfo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**输出结果**/</span></span><br><span class="line">XiaoMi,Mix4,骁龙<span class="number">888</span>+</span><br></pre></td></tr></table></figure><blockquote><p>抽象工厂模式和工厂方法模式一样，都符合开闭原则，但不同的是，工厂方法模式在添加一个具体产品的时候，都要增加相应的工厂。而抽象工厂模式只有在新增一个类型的具体产品时才需要新增工厂。也就是说工厂方法模式只能创建一个具体产品，而抽象工厂模式的一个工厂可以创建属于一个类型的多种具体产品。</p></blockquote><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><p>单例模式是Java中最简单的设计模式之一，属于创建型设计模式，提供了一种创建对象的最佳方式。能够保证在一个JVM中，该对象只有一个实例存在。</p><ul><li>饿汉式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>饿汉式在类加载的时候就实例化，所以是线程安全的，执行效率也较高，但是比较浪费内存。</p></blockquote><ul><li>懒汉式（非线程安全）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式虽然实现类延迟加载，但是最大的问题就是不支持多线程，因为没有加锁，在多线程下不能正常工作。</p></blockquote><ul><li>懒汉式（线程安全）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazySingleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(LazySingleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">LazySafeSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>synchronized</code>关键字如果直接将对象锁住的话，性能上会有所下降，而我们只需要在第一次创建对象的时候枷锁，之后就不需要了，所以我们只需将<code>synchronized</code>加在内部。</p></blockquote><ul><li>静态内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用类加载机制来保证初始化只有一个线程。</p></blockquote><ul><li>枚举类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">SingletonEnum</span>&#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        <span class="keyword">private</span> Singleton singleton;</span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">SingletonEnum</span><span class="params">()</span>&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonEnum.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h5><p>建造者模式就是使用多个简单的对象一步步构建一个复杂的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义商品基本信息：名称、包装方式、价格</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义包装方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Packing</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现包装的两种方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wrapper</span> <span class="keyword">implements</span> <span class="title class_">Packing</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;盒装&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bottle</span> <span class="keyword">implements</span> <span class="title class_">Packing</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;瓶装&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义商品-汉堡🍔</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Burger</span> <span class="keyword">implements</span> <span class="title class_">Item</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Wrapper</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现商品-蔬菜汉堡和鸡肉汉堡</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VegBurger</span> <span class="keyword">extends</span> <span class="title class_">Burger</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;蔬菜汉堡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChickenBurger</span> <span class="keyword">extends</span> <span class="title class_">Burger</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;鸡肉汉堡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">15.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义商品-饮料🥤</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ColdDrink</span> <span class="keyword">implements</span> <span class="title class_">Item</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*实现商品-可口可乐和百事可乐</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coke</span> <span class="keyword">extends</span> <span class="title class_">ColdDrink</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;可口可乐&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pepsi</span> <span class="keyword">extends</span> <span class="title class_">ColdDrink</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;百事可乐&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4.5f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*构建Meal类，包含商品信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Meal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Item&gt; itemList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Item&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(Item item)</span> &#123;</span><br><span class="line">        itemList.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> itemList.stream().map(Item::price).reduce(Float::sum).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showItems</span><span class="params">()</span>&#123;</span><br><span class="line">        itemList.forEach(item -&gt; System.out.println(<span class="string">&quot;项目:&quot;</span> + item.name() + <span class="string">&quot;,包装:&quot;</span> + item.packing().pack() + <span class="string">&quot;,单价:&quot;</span> + item.price()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建Builder类，负责创建Meal类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MealBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Meal <span class="title function_">prepareVegMeal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Meal</span> <span class="variable">meal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Meal</span>();</span><br><span class="line">        meal.addItem(<span class="keyword">new</span> <span class="title class_">VegBurger</span>());</span><br><span class="line">        meal.addItem(<span class="keyword">new</span> <span class="title class_">Pepsi</span>());</span><br><span class="line">        <span class="keyword">return</span> meal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Meal <span class="title function_">prepareChickenMeal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Meal</span> <span class="variable">meal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Meal</span>();</span><br><span class="line">        meal.addItem(<span class="keyword">new</span> <span class="title class_">ChickenBurger</span>());</span><br><span class="line">        meal.addItem(<span class="keyword">new</span> <span class="title class_">Coke</span>());</span><br><span class="line">        <span class="keyword">return</span> meal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">MealBuilder</span> <span class="variable">mealBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MealBuilder</span>();</span><br><span class="line">  <span class="type">Meal</span> <span class="variable">meal</span> <span class="operator">=</span> mealBuilder.prepareVegMeal();</span><br><span class="line">  System.out.println(<span class="string">&quot;蔬菜套餐:&quot;</span>);</span><br><span class="line">  meal.showItems();</span><br><span class="line">  System.out.println(<span class="string">&quot;花费:&quot;</span> + meal.getCost());</span><br><span class="line">  System.out.println(<span class="string">&quot;鸡肉套餐:&quot;</span>);</span><br><span class="line">  <span class="type">Meal</span> <span class="variable">meal2</span> <span class="operator">=</span> mealBuilder.prepareChickenMeal();</span><br><span class="line">  meal2.showItems();</span><br><span class="line">  System.out.println(<span class="string">&quot;花费:&quot;</span> + meal2.getCost());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果*/</span></span><br><span class="line">蔬菜套餐:</span><br><span class="line">项目:蔬菜汉堡,包装:盒装,单价:<span class="number">8.0</span></span><br><span class="line">项目:百事可乐,包装:瓶装,单价:<span class="number">4.5</span></span><br><span class="line">花费:<span class="number">12.5</span></span><br><span class="line">鸡肉套餐:</span><br><span class="line">项目:鸡肉汉堡,包装:盒装,单价:<span class="number">15.0</span></span><br><span class="line">项目:可口可乐,包装:瓶装,单价:<span class="number">5.0</span></span><br><span class="line">花费:<span class="number">20.0</span></span><br></pre></td></tr></table></figure><h5 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h5><blockquote><p>原型模式，故名思义，就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。说到复制就不得不说一下浅拷贝和深拷贝了。</p></blockquote><p><code>浅拷贝</code>:将一个对象复制后，基本数据类型的变量都会被重新创建，而引用类型还是原来对象所指向的。</p><p><code>深拷贝</code>:将一个对象复制后，基本数据类型和引用类型变量都是重新创建的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*定义抽象类实现Cloneable</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Mobile</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">mobileModel</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Mobile&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, type=&#x27;&quot;</span> + type + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplePhone</span> <span class="keyword">extends</span> <span class="title class_">Mobile</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApplePhone</span><span class="params">()</span>&#123;</span><br><span class="line">        type = <span class="string">&quot;iphone&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mobileModel</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;iPhone 11，A13处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuaWeiPhone</span> <span class="keyword">extends</span> <span class="title class_">Mobile</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HuaWeiPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        type = <span class="string">&quot;huawei&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mobileModel</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;华为Mate40 Pro，麒麟990 5G&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaoMiPhone</span> <span class="keyword">extends</span> <span class="title class_">Mobile</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XiaoMiPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        type = <span class="string">&quot;xiaomi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mobileModel</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小米Mix4，骁龙888+&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*模拟数据缓存</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobileCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Hashtable&lt;String,Mobile&gt; cache = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Mobile <span class="title function_">getMobile</span><span class="params">(String mId)</span>&#123;</span><br><span class="line">        <span class="type">Mobile</span> <span class="variable">mobile</span> <span class="operator">=</span> cache.get(mId);</span><br><span class="line">        <span class="keyword">if</span>(mobile != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (Mobile) mobile.clone();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadCache</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplePhone</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplePhone</span>();</span><br><span class="line">        apple.setName(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        cache.put(apple.getName(),apple);</span><br><span class="line"></span><br><span class="line">        <span class="type">HuaWeiPhone</span> <span class="variable">huawei</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuaWeiPhone</span>();</span><br><span class="line">        huawei.setName(<span class="string">&quot;huawei&quot;</span>);</span><br><span class="line">        cache.put(huawei.getName(),huawei);</span><br><span class="line"></span><br><span class="line">        <span class="type">XiaoMiPhone</span> <span class="variable">xiaomi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XiaoMiPhone</span>();</span><br><span class="line">        xiaomi.setName(<span class="string">&quot;xiaomi&quot;</span>);</span><br><span class="line">        cache.put(xiaomi.getName(),xiaomi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*测试如下*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  MobileCache.loadCache();</span><br><span class="line"></span><br><span class="line">  <span class="type">Mobile</span> <span class="variable">mobile1</span> <span class="operator">=</span> MobileCache.getMobile(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">  System.out.println(mobile1);</span><br><span class="line"></span><br><span class="line">  <span class="type">Mobile</span>  <span class="variable">mobile2</span> <span class="operator">=</span> MobileCache.getMobile(<span class="string">&quot;huawei&quot;</span>);</span><br><span class="line">  System.out.println(mobile2);</span><br><span class="line"></span><br><span class="line">  <span class="type">Mobile</span>  <span class="variable">mobile3</span> <span class="operator">=</span> MobileCache.getMobile(<span class="string">&quot;xiaomi&quot;</span>);</span><br><span class="line">  System.out.println(mobile3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果*/</span></span><br><span class="line">Mobile&#123;name=<span class="string">&#x27;apple&#x27;</span>, type=<span class="string">&#x27;iphone&#x27;</span>&#125;</span><br><span class="line">Mobile&#123;name=<span class="string">&#x27;huawei&#x27;</span>, type=<span class="string">&#x27;huawei&#x27;</span>&#125;</span><br><span class="line">Mobile&#123;name=<span class="string">&#x27;xiaomi&#x27;</span>, type=<span class="string">&#x27;xiaomi&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><hr><p><em><strong>结构型</strong></em></p><h5 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h5><blockquote><p>适配器模式主要是作为两个不兼容的接口之间的桥梁，目的就是为了消除由于接口不匹配导致的类的兼容性问题。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义普通接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Interface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">(String interfaceType,String interfaceName)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义高级接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HighInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">(String interfaceName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferFiles</span><span class="params">(String interfaceName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String interfaceName)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义TypeC接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeC</span> <span class="keyword">implements</span> <span class="title class_">HighInterface</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">(String interfaceName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;充电&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferFiles</span><span class="params">(String interfaceName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件传输&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String interfaceName)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义Hdmi接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hdmi</span> <span class="keyword">implements</span> <span class="title class_">HighInterface</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">(String interfaceName)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferFiles</span><span class="params">(String interfaceName)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(String monitor)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接显示器:&quot;</span> + monitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义适配器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceAdapter</span> <span class="keyword">implements</span> <span class="title class_">Interface</span>&#123;</span><br><span class="line">    HighInterface inter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InterfaceAdapter</span><span class="params">(String interfaceType)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;typeC-T&quot;</span>.equalsIgnoreCase(interfaceType) || <span class="string">&quot;typeC-E&quot;</span>.equalsIgnoreCase(interfaceType) )&#123;</span><br><span class="line">            inter = <span class="keyword">new</span> <span class="title class_">TypeC</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;hdmi&quot;</span>.equalsIgnoreCase(interfaceType))&#123;</span><br><span class="line">            inter = <span class="keyword">new</span> <span class="title class_">Hdmi</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">(String interfaceType, String interfaceName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;typeC-E&quot;</span>.equalsIgnoreCase(interfaceType))&#123;</span><br><span class="line">            inter.charge(interfaceName);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;typeC-T&quot;</span>.equalsIgnoreCase(interfaceType))&#123;</span><br><span class="line">            inter.transferFiles(interfaceName);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;hdmi&quot;</span>.equalsIgnoreCase(interfaceType))&#123;</span><br><span class="line">            inter.show(interfaceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义扩展坞</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DockingStation</span> <span class="keyword">implements</span> <span class="title class_">Interface</span>&#123;</span><br><span class="line">    InterfaceAdapter adapter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">(String interfaceType, String interfaceName)</span> &#123;</span><br><span class="line">        adapter = <span class="keyword">new</span> <span class="title class_">InterfaceAdapter</span>(interfaceType);</span><br><span class="line">        adapter.function(interfaceType,interfaceName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*测试如下*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">DockingStation</span> <span class="variable">dock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DockingStation</span>();</span><br><span class="line">  dock.function(<span class="string">&quot;typeC-E&quot;</span>,<span class="string">&quot;220V&quot;</span>);</span><br><span class="line">  dock.function(<span class="string">&quot;typeC-T&quot;</span>,<span class="string">&quot;希捷硬盘&quot;</span>);</span><br><span class="line">  dock.function(<span class="string">&quot;hdmi&quot;</span>,<span class="string">&quot;LG显示器&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出如下*/</span></span><br><span class="line">充电</span><br><span class="line">文件传输</span><br><span class="line">连接显示器:LG显示器</span><br></pre></td></tr></table></figure><h5 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h5><blockquote><p>所谓桥接就是将抽象化与实现化解耦，使二者可以独立变化。像常用的JDBC桥DriverManager一样，JDBC连接不同的数据库的时候，基本上不用修改什么代码，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用数据库驱动程序来桥接就可以了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义JDBC接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Jdbc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectDB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义两个实现类，实现JDBC接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqlDriver</span> <span class="keyword">implements</span> <span class="title class_">Jdbc</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectDB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接Mysql数据库&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleDriver</span> <span class="keyword">implements</span> <span class="title class_">Jdbc</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectDB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接Oracle数据库&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义驱动管理类(桥)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DriverManager</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Jdbc jdbc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">DriverManager</span><span class="params">(Jdbc jdbc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbc = jdbc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">connectDB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现抽象类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDriverManager</span> <span class="keyword">extends</span> <span class="title class_">DriverManager</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDriverManager</span><span class="params">(Jdbc jdbc)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(jdbc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectDB</span><span class="params">()</span> &#123;</span><br><span class="line">        jdbc.connectDB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">DriverManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDriverManager</span>(<span class="keyword">new</span> <span class="title class_">MysqlDriver</span>());</span><br><span class="line">  manager.connectDB();</span><br><span class="line">  <span class="type">DriverManager</span> <span class="variable">manager2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDriverManager</span>(<span class="keyword">new</span> <span class="title class_">OracleDriver</span>());</span><br><span class="line">  manager2.connectDB();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line">连接Mysql数据库</span><br><span class="line">连接Oracle数据库</span><br></pre></td></tr></table></figure><h5 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h5><blockquote><p>组合模式，又叫整体模式，是把一组相似的对象当成一个单一的对象。组合模式依据树型结构来组合对象，用于表示部分及整体。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Area</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Area&gt; subAreas;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Area</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.subAreas = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Area area)</span>&#123;</span><br><span class="line">        subAreas.add(area);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Area area)</span>&#123;</span><br><span class="line">        subAreas.remove(area);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Area&gt; <span class="title function_">getSubAreas</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> subAreas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Area&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, subAreas=&quot;</span> + subAreas +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Area</span> <span class="variable">china</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Area</span>(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">  <span class="type">Area</span> <span class="variable">beijing</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Area</span>(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">  <span class="type">Area</span> <span class="variable">zhejiang</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Area</span>(<span class="string">&quot;浙江&quot;</span>);</span><br><span class="line">  <span class="type">Area</span> <span class="variable">hangzhou</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Area</span>(<span class="string">&quot;杭州&quot;</span>);</span><br><span class="line">  <span class="type">Area</span> <span class="variable">chaoyang</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Area</span>(<span class="string">&quot;朝阳区&quot;</span>);</span><br><span class="line">  <span class="type">Area</span> <span class="variable">dongcheng</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Area</span>(<span class="string">&quot;东城区&quot;</span>);</span><br><span class="line">  beijing.add(chaoyang);</span><br><span class="line">  beijing.add(dongcheng);</span><br><span class="line">  zhejiang.add(hangzhou);</span><br><span class="line">  china.add(beijing);</span><br><span class="line">  china.add(zhejiang);</span><br><span class="line">  System.out.println(china.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line">Area&#123;name=<span class="string">&#x27;中国&#x27;</span>, subAreas=[Area&#123;name=<span class="string">&#x27;北京&#x27;</span>, subAreas=[Area&#123;name=<span class="string">&#x27;朝阳区&#x27;</span>, subAreas=[]&#125;, Area&#123;name=<span class="string">&#x27;东城区&#x27;</span>, subAreas=[]&#125;]&#125;, Area&#123;name=<span class="string">&#x27;浙江&#x27;</span>, subAreas=[Area&#123;name=<span class="string">&#x27;杭州&#x27;</span>, subAreas=[]&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure><h5 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h5><blockquote><p>装饰器，顾名思义，就是给一个现有的对象添加新的功能，同时又不改变其结构。只是对类进行一个包装、装饰。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义动物接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abilities</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现动物接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Monkey</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abilities</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Monkey:吃桃子、爬树&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pig</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abilities</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pig:吃剩饭剩菜、睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义抽象类实现动物接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AnimalWithSoul</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Animal animalWithSoul;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AnimalWithSoul</span><span class="params">(Animal animalWithSoul)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.animalWithSoul = animalWithSoul;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abilities</span><span class="params">()</span> &#123;</span><br><span class="line">        animalWithSoul.abilities();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义会仙术的动物继承抽象类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmortalAnimal</span> <span class="keyword">extends</span> <span class="title class_">AnimalWithSoul</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImmortalAnimal</span><span class="params">(Animal animalWithSoul)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(animalWithSoul);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abilities</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.abilities();</span><br><span class="line">        xianshu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xianshu</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新增技能:仙术&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Monkey</span>();</span><br><span class="line">  <span class="type">AnimalWithSoul</span> <span class="variable">animal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImmortalAnimal</span>(<span class="keyword">new</span> <span class="title class_">Monkey</span>());</span><br><span class="line">  <span class="type">AnimalWithSoul</span> <span class="variable">animal2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImmortalAnimal</span>(<span class="keyword">new</span> <span class="title class_">Pig</span>());</span><br><span class="line">  animal.abilities();</span><br><span class="line">  animal1.abilities();</span><br><span class="line">  animal2.abilities();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line">Monkey:吃桃子、爬树</span><br><span class="line">Monkey:吃桃子、爬树</span><br><span class="line">新增技能:仙术</span><br><span class="line">Pig:吃剩饭剩菜、睡觉</span><br><span class="line">新增技能:仙术</span><br></pre></td></tr></table></figure><h5 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h5><blockquote><p>外观模式就是将系统的复杂性隐藏起来，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。降低访问复杂系统的内部子系统时的复杂度，降低了类类之间的耦合度</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义硬件接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HardWare</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">startUp</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">shutDown</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现硬件接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cpu</span> <span class="keyword">implements</span> <span class="title class_">HardWare</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CPU启动...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutDown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CPU关闭...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Memory</span> <span class="keyword">implements</span> <span class="title class_">HardWare</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Memory启动...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutDown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Memory关闭...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Disk</span> <span class="keyword">implements</span> <span class="title class_">HardWare</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Disk启动...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutDown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Disk关闭...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义电脑，里面有CPU、Memory、Disk</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Cpu cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory ;</span><br><span class="line">    <span class="keyword">private</span> Disk disk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">()</span> &#123;</span><br><span class="line">        cpu = <span class="keyword">new</span> <span class="title class_">Cpu</span>();</span><br><span class="line">        memory = <span class="keyword">new</span> <span class="title class_">Memory</span>();</span><br><span class="line">        disk = <span class="keyword">new</span> <span class="title class_">Disk</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startUp</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电脑开始启动....&quot;</span>);</span><br><span class="line">        cpu.startUp();</span><br><span class="line">        memory.startUp();</span><br><span class="line">        disk.startUp();</span><br><span class="line">        System.out.println(<span class="string">&quot;电脑启动成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutDown</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电脑开始关闭....&quot;</span>);</span><br><span class="line">        cpu.shutDown();</span><br><span class="line">        memory.shutDown();</span><br><span class="line">        disk.shutDown();</span><br><span class="line">        System.out.println(<span class="string">&quot;电脑关闭成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**测试如下*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">  computer.startUp();</span><br><span class="line">  System.out.println(<span class="string">&quot;打会儿游戏...&quot;</span>);</span><br><span class="line">  computer.shutDown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出如下 */</span></span><br><span class="line">电脑开始启动....</span><br><span class="line">CPU启动...</span><br><span class="line">Memory启动...</span><br><span class="line">Disk启动...</span><br><span class="line">电脑启动成功!</span><br><span class="line">打会儿游戏...</span><br><span class="line">电脑开始关闭....</span><br><span class="line">CPU关闭...</span><br><span class="line">Memory关闭...</span><br><span class="line">Disk关闭...</span><br><span class="line">电脑关闭成功!</span><br></pre></td></tr></table></figure><h5 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h5><blockquote><p>享元模式主要是实现对象的共享，用于减少创建对象的数量，以减少内存的占用和提高性能。享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。一般和工厂模式一起使用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectionPool</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Connection&gt; pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;mizhuo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">driverClassName</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Drive&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">poolSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConnectionPool</span><span class="params">()</span> &#123;</span><br><span class="line">        pool = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;Connection&gt;(poolSize);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(driverClassName);</span><br><span class="line">                conn = DriverManager.getConnection(url,username,password);</span><br><span class="line">                pool.add(conn);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pool.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> pool.get(<span class="number">0</span>);</span><br><span class="line">            pool.remove(conn);</span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection conn)</span>&#123;</span><br><span class="line">        pool.add(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h5><blockquote><p>代理模式故名思义就是让一个类来代理原来的类，替原对象进行一系列操作。就像我们租房子找中介，打官司找律师。让他们来替我们找房子、打官司。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义租房子接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RentHouse</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">findHouse</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfRentHouse</span> <span class="keyword">implements</span> <span class="title class_">RentHouse</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String tenant;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MySelfRentHouse</span><span class="params">(String tenant)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tenant = tenant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(tenant + <span class="string">&quot;入住。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(tenant + <span class="string">&quot;网上找。。。&quot;</span>);</span><br><span class="line">        System.out.println(tenant + <span class="string">&quot;街上找。。。&quot;</span>);</span><br><span class="line">        System.out.println(tenant + <span class="string">&quot;约房东见面。。。&quot;</span>);</span><br><span class="line">        System.out.println(tenant + <span class="string">&quot;找到了。。。&quot;</span>);</span><br><span class="line">        System.out.println(tenant + <span class="string">&quot;办手续。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 代理类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyRentHouse</span> <span class="keyword">implements</span> <span class="title class_">RentHouse</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String rentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String tenant;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MySelfRentHouse house;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyRentHouse</span><span class="params">(String rentName,String tenant)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rentName = rentName;</span><br><span class="line">        <span class="built_in">this</span>.tenant = tenant;</span><br><span class="line">        <span class="built_in">this</span>.house = <span class="keyword">new</span> <span class="title class_">MySelfRentHouse</span>(tenant);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        findHouse();</span><br><span class="line">        house.rentHouse();</span><br><span class="line">        getMoney();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(rentName + <span class="string">&quot;网上找。。。&quot;</span>);</span><br><span class="line">        System.out.println(rentName + <span class="string">&quot;街上找。。。&quot;</span>);</span><br><span class="line">        System.out.println(rentName + <span class="string">&quot;约房东见面。。。&quot;</span>);</span><br><span class="line">        System.out.println(rentName + <span class="string">&quot;找到了。。。&quot;</span>);</span><br><span class="line">        System.out.println(rentName + <span class="string">&quot;办手续。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试如下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test13</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">RentHouse</span> <span class="variable">rentHouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySelfRentHouse</span>(<span class="string">&quot;mizhuo&quot;</span>);</span><br><span class="line">  rentHouse.findHouse();</span><br><span class="line">  rentHouse.rentHouse();</span><br><span class="line">  <span class="type">RentHouse</span> <span class="variable">house</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyRentHouse</span>(<span class="string">&quot;中介&quot;</span>,<span class="string">&quot;mizhuo&quot;</span>);</span><br><span class="line">  house.rentHouse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><em><strong>行为型</strong></em></p><h5 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h5><blockquote><p>迭代器应该都很熟悉，在编程语言中都是很常见的设计模式，用于顺序访问集合中的元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义迭代器接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">previous</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">first</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">last</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义集合类接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Collection</span> &#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> MiZhuo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 迭代器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 6:22 下午 2021/9/11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> site.mizhuo.designPattern.iterator.Iterator</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    Iterator <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> MiZhuo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 获取元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 6:22 下午 2021/9/11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [i]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Object</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> MiZhuo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 返回集合大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 6:22 下午 2021/9/11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> []</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现迭代器接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Collection collection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyIterator</span><span class="params">(Collection collection)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.collection = collection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">previous</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            pos --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> collection.get(pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt; collection.size() - <span class="number">1</span>)&#123;</span><br><span class="line">            pos ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> collection.get(pos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(pos &lt; collection.size() - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">first</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> collection.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">last</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> collection.get(collection.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现集合类接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCollection</span> <span class="keyword">implements</span> <span class="title class_">Collection</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String arr[] = &#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;E&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyIterator</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCollection</span>();</span><br><span class="line">  <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">  <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">D</span><br><span class="line">E</span><br></pre></td></tr></table></figure><h5 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h5><blockquote><p>顾名思义，责任链模式就是为请求创建一个接收者对象的链，这种模式给予请求的类型，为请求的发送者和接受者进行解耦。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建抽象日志记录器类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">INFO</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">DEBUG</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ERROR</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> level;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> AbstractLogger nextLogger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextLogger</span><span class="params">(AbstractLogger nextLogger)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nextLogger = nextLogger;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(<span class="type">int</span> level,String message)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.level &lt;= level)&#123;</span><br><span class="line">            write(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nextLogger != <span class="literal">null</span>)&#123;</span><br><span class="line">            nextLogger.log(level,message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建几个继承该记录器的实体类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsoleLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConsoleLogger</span><span class="params">(<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;控制台输出消息:&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ErrorLogger</span><span class="params">(<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出错误消息:&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileLogger</span><span class="params">(<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出消息到文件:&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AbstractLogger <span class="title function_">chain</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">AbstractLogger</span> <span class="variable">logger1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsoleLogger</span>(AbstractLogger.DEBUG);</span><br><span class="line">  <span class="type">AbstractLogger</span> <span class="variable">logger2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileLogger</span>(AbstractLogger.INFO);</span><br><span class="line">  <span class="type">AbstractLogger</span> <span class="variable">logger3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorLogger</span>(AbstractLogger.ERROR);</span><br><span class="line"></span><br><span class="line">  logger3.setNextLogger(logger1);</span><br><span class="line">  logger1.setNextLogger(logger2);</span><br><span class="line">  <span class="keyword">return</span> logger3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">AbstractLogger</span> <span class="variable">chain</span> <span class="operator">=</span> chain();</span><br><span class="line">  chain.log(AbstractLogger.INFO,<span class="string">&quot;This is an information!&quot;</span>);</span><br><span class="line">  chain.log(AbstractLogger.DEBUG,<span class="string">&quot;This is a debug level information!&quot;</span>);</span><br><span class="line">  chain.log(AbstractLogger.ERROR,<span class="string">&quot;This is an error information!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line">输出消息到文件:This is an information!</span><br><span class="line">控制台输出消息:This is a debug level information!</span><br><span class="line">输出消息到文件:This is a debug level information!</span><br><span class="line">输出错误消息:This is an error information!</span><br><span class="line">控制台输出消息:This is an error information!</span><br><span class="line">输出消息到文件:This is an error information!</span><br></pre></td></tr></table></figure><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><blockquote><p>命令模式就是将请求以命令的形式传递给调用对象，调用对象可以寻找可以处理该命令的对象，并将命令传递下去。就好像一个司令下发一个命令，一层层传到士兵那里落实执行，司令不需要在意过程，只需要在意传递回来的结果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义一个命令接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义一个司令类，可发出命令。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Commander</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Commander</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushCommand</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;司令发出命令。。。&quot;</span>);</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建一个士兵类，可以执行命令</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Soldier</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeAction</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;士兵收到命令，执行命令。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建一个军令类，实现命令接口，士兵可执行军令</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MilitaryOrder</span> <span class="keyword">implements</span> <span class="title class_">Command</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Soldier soldier;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MilitaryOrder</span><span class="params">(Soldier soldier)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.soldier = soldier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        soldier.executeAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Soldier</span> <span class="variable">soldier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Soldier</span>();</span><br><span class="line">  <span class="type">Command</span> <span class="variable">command</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MilitaryOrder</span>(soldier);</span><br><span class="line">  <span class="type">Commander</span> <span class="variable">commander</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Commander</span>(command);</span><br><span class="line">  commander.pushCommand();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出如下 */</span></span><br><span class="line">司令发出命令。。。</span><br><span class="line">士兵收到命令，执行命令。</span><br></pre></td></tr></table></figure><h5 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h5><blockquote><p>解释器模式提供了评估语言的语法或表达式的方法，一般用于SQL解析、编译器等，可以场景较少。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义一个表达式接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">interpreter</span><span class="params">(Context context)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 模拟上下文</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num1;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum1</span><span class="params">(<span class="type">int</span> num1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num1 = num1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum2</span><span class="params">(<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建两个表达式实体类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Plus</span> <span class="keyword">implements</span> <span class="title class_">Expression</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpreter</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getNum1() + context.getNum2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Minus</span> <span class="keyword">implements</span> <span class="title class_">Expression</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpreter</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getNum1() - context.getNum2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line">  context.setNum1(<span class="number">20</span>);</span><br><span class="line">  context.setNum2(<span class="number">10</span>);</span><br><span class="line">  <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Plus</span>();</span><br><span class="line">  System.out.println(expression.interpreter(context));</span><br><span class="line">  <span class="type">Expression</span> <span class="variable">expression2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Minus</span>();</span><br><span class="line">  System.out.println(expression2.interpreter(context));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h5 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h5><blockquote><p>中介者模式通常适用于处理不同类之间的通信，就像微信群一样，这样耦合松散，使代码易于维护。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义微信群</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChartGroup</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">DateFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">chart</span><span class="params">(User user,String message)</span>&#123;</span><br><span class="line">        System.out.println(df.format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + <span class="string">&quot;[&quot;</span> + user.getName() + <span class="string">&quot;:&quot;</span> + message + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        WeChartGroup.chart(<span class="built_in">this</span>,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test18</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;mizhuo&quot;</span>);</span><br><span class="line">  user.sendMessage(<span class="string">&quot;你们好呀，我是迷浊。&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;miao&quot;</span>);</span><br><span class="line">  user2.sendMessage(<span class="string">&quot;你好呀，迷浊，我是喵喵。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line"><span class="number">2021</span>-09-<span class="number">11</span> <span class="number">22</span>:09:<span class="number">20</span>[mizhuo:你们好呀，我是迷浊。]</span><br><span class="line"><span class="number">2021</span>-09-<span class="number">11</span> <span class="number">22</span>:09:<span class="number">20</span>[miao:你好呀，迷浊，我是喵喵。]</span><br></pre></td></tr></table></figure><h5 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h5><blockquote><p>备忘录模式和我们使用的备忘录一样，保存一个对象的某个状态，在适当的时候恢复对象。例如游戏存档。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 游戏类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Game</span><span class="params">(String status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 存档类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Archive</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(String status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Game <span class="title function_">saveArchive</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Game</span>(status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getStatusFromArchive</span><span class="params">(Game game)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.status = game.getStatus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义存档管理类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArchiveTaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Game&gt; games = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Game game)</span>&#123;</span><br><span class="line">        games.add(game);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Game <span class="title function_">getGame</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> games.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test19</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Archive</span> <span class="variable">archive</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Archive</span>();</span><br><span class="line">  <span class="type">ArchiveTaker</span> <span class="variable">taker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArchiveTaker</span>();</span><br><span class="line">  archive.setStatus(<span class="string">&quot;存档1&quot;</span>);</span><br><span class="line">  archive.setStatus(<span class="string">&quot;存档2&quot;</span>);</span><br><span class="line">  taker.add(archive.saveArchive());</span><br><span class="line">  archive.setStatus(<span class="string">&quot;存档3&quot;</span>);</span><br><span class="line">  taker.add(archive.saveArchive());</span><br><span class="line">  archive.setStatus(<span class="string">&quot;存档4&quot;</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;当前存档是:&quot;</span> + archive.getStatus());</span><br><span class="line">  System.out.println(<span class="string">&quot;恢复第一次存档&quot;</span>);</span><br><span class="line">  archive.getStatusFromArchive(taker.getGame(<span class="number">0</span>));</span><br><span class="line">  System.out.println(<span class="string">&quot;当前存档是:&quot;</span> + archive.getStatus());</span><br><span class="line">  System.out.println(<span class="string">&quot;恢复第二次存档&quot;</span>);</span><br><span class="line">  archive.getStatusFromArchive(taker.getGame(<span class="number">1</span>));</span><br><span class="line">  System.out.println(<span class="string">&quot;当前存档是:&quot;</span> + archive.getStatus());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line">当前存档是:存档<span class="number">4</span></span><br><span class="line">恢复第一次存档</span><br><span class="line">当前存档是:存档<span class="number">2</span></span><br><span class="line">恢复第二次存档</span><br><span class="line">当前存档是:存档<span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><blockquote><p>当对象间存在一对多的关系是，使用观察者模式，当一个对象被修改时，会自动通知依赖它的对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义主对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        <span class="built_in">this</span>.notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span>&#123;</span><br><span class="line">        observers.forEach(Observer::update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义抽像观察类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Subject subject;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建二进制、八进制、十六进制观察者类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryObserver</span><span class="params">(Subject subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">        <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;二进制:&quot;</span> + Integer.toBinaryString(subject.getState()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OctalObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OctalObserver</span><span class="params">(Subject subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">        <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;八进制:&quot;</span> + Integer.toOctalString(subject.getState()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HexObserver</span> <span class="keyword">extends</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HexObserver</span><span class="params">(Subject subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">        <span class="built_in">this</span>.subject.attach(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;十六进制:&quot;</span> + Integer.toHexString(subject.getState()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">BinaryObserver</span>(subject);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">OctalObserver</span>(subject);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">HexObserver</span>(subject);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;第一次设置值为13&quot;</span>);</span><br><span class="line">  subject.setState(<span class="number">13</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;第二次设置值为24&quot;</span>);</span><br><span class="line">  subject.setState(<span class="number">24</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line">第一次设置值为<span class="number">13</span></span><br><span class="line">二进制:<span class="number">1101</span></span><br><span class="line">八进制:<span class="number">15</span></span><br><span class="line">十六进制:d</span><br><span class="line">第二次设置值为<span class="number">24</span></span><br><span class="line">二进制:<span class="number">11000</span></span><br><span class="line">八进制:<span class="number">30</span></span><br><span class="line">十六进制:<span class="number">18</span></span><br></pre></td></tr></table></figure><h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><blockquote><p>在策略模式种，一个类的行为或其算法可以在运行时更改。策略模式定义了一系列的算法，并将每个算法封装起来，使他们可以相互替换。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*定义算法接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICalculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String exp)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义抽象算法类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCalculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] split(String exp,String opt)&#123;</span><br><span class="line">        String[] arr = exp.split(opt);</span><br><span class="line">        <span class="type">int</span>[] arrInt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        arrInt[<span class="number">0</span>] = Integer.parseInt(arr[<span class="number">0</span>]);</span><br><span class="line">        arrInt[<span class="number">1</span>] = Integer.parseInt(arr[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> arrInt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建三个算法类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Plus</span> <span class="keyword">extends</span> <span class="title class_">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title class_">ICalculator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String exp)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = split(exp,<span class="string">&quot;\\+&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>] + arr[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Minus</span> <span class="keyword">extends</span> <span class="title class_">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title class_">ICalculator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String exp)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = split(exp,<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>] - arr[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Multiply</span> <span class="keyword">extends</span> <span class="title class_">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title class_">ICalculator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String exp)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = split(exp,<span class="string">&quot;\\*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>] * arr[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建COntext类，用于切换算法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    ICalculator calculate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(ICalculator calculate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.calculate = calculate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">executeOptions</span><span class="params">(String exp)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> calculate.calculate(exp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test21</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">Plus</span>());</span><br><span class="line">  System.out.println(context.executeOptions(<span class="string">&quot;2+8&quot;</span>));</span><br><span class="line">  context = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">Minus</span>());</span><br><span class="line">  System.out.println(context.executeOptions(<span class="string">&quot;2-8&quot;</span>));</span><br><span class="line">  context = <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">Multiply</span>());</span><br><span class="line">  System.out.println(context.executeOptions(<span class="string">&quot;2*8&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">-<span class="number">6</span></span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure><h5 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h5><blockquote><p>模板方法模式就是给其他类提供一个结构，而具体的一些步骤延迟到子类种。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义Chromium框架</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Chromium</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">expand</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">online</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">useBrowser</span><span class="params">()</span>&#123;</span><br><span class="line">        initialize();</span><br><span class="line">        expand();</span><br><span class="line">        online();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建歌浏览器类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chrome</span> <span class="keyword">extends</span> <span class="title class_">Chromium</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎使用谷歌浏览器!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">expand</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登陆谷歌账号，同步数据。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">online</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用谷歌浏览器上网。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建Microsoft Edge浏览器类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Edge</span> <span class="keyword">extends</span> <span class="title class_">Chromium</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎使用Microsoft Edge浏览器!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">expand</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登陆Microsoft账号，同步数据。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">online</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Microsoft Edge浏览器上网。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Chromium</span> <span class="variable">browser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chrome</span>();</span><br><span class="line">  browser.useBrowser();</span><br><span class="line">  browser = <span class="keyword">new</span> <span class="title class_">Edge</span>();</span><br><span class="line">  browser.useBrowser();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line">欢迎使用谷歌浏览器!</span><br><span class="line">登陆谷歌账号，同步数据。</span><br><span class="line">使用谷歌浏览器上网。</span><br><span class="line">欢迎使用Microsoft Edge浏览器!</span><br><span class="line">登陆Microsoft账号，同步数据。</span><br><span class="line">使用Microsoft Edge浏览器上网。</span><br></pre></td></tr></table></figure><h5 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h5><blockquote><p>在状态模式种， 类的行为是基于它的状态而改变的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义状态接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">(Context context)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建Context类并持有Status实例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(State state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建两个状态类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StateA</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;状态A&quot;</span>);</span><br><span class="line">        context.setState(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StateB</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;状态B&quot;</span>);</span><br><span class="line">        context.setState(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line">  <span class="type">State</span> <span class="variable">state</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StateA</span>();</span><br><span class="line">  state.doAction(context);</span><br><span class="line">  state = <span class="keyword">new</span> <span class="title class_">StateB</span>();</span><br><span class="line">  state.doAction(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出结果 */</span></span><br><span class="line">状态A</span><br><span class="line">状态B</span><br></pre></td></tr></table></figure><h5 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h5><blockquote><p>访问者模式就是把数据结构和作用与结构上的操作解耦合，使得操作集合可以相对的自由演化。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义抽象员工类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Staff</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> kpi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Staff</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.kpi = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getKpi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> kpi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建两个员工类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Programmer</span> <span class="keyword">extends</span> <span class="title class_">Staff</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Programmer</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCodeLines</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span> * <span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Staff</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getProducts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建一个报表类，用于查看员工数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessReport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Staff&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessReport</span><span class="params">()</span> &#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;经理A&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Programmer</span>(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Programmer</span>(<span class="string">&quot;李四&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Programmer</span>(<span class="string">&quot;王五&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Manager</span>(<span class="string">&quot;经理B&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Programmer</span>(<span class="string">&quot;赵六&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Programmer</span>(<span class="string">&quot;孙七&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showReport</span><span class="params">(Visitor visitor)</span>&#123;</span><br><span class="line">        list.forEach(s -&gt; s.accept(visitor));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义观察者接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Programmer programmer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Manager manager)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建两个观察者类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CEOVisitor</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Programmer programmer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序员:&quot;</span> + programmer.getName() + <span class="string">&quot;,KPI:&quot;</span> + programmer.getKpi());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Manager manager)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经理:&quot;</span> + manager.getName() + <span class="string">&quot;,KPI:&quot;</span> + manager.getKpi() + <span class="string">&quot;,新产品数量:&quot;</span> + manager.getProducts());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CTOVisitor</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Programmer programmer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序员:&quot;</span> + programmer.getName() + <span class="string">&quot;,代码行数：&quot;</span> + programmer.getCodeLines());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Manager manager)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;经理:&quot;</span> + manager.getName() + <span class="string">&quot;,新产品数量:&quot;</span> + manager.getProducts());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 测试如下 */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">BusinessReport</span> <span class="variable">report</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BusinessReport</span>();</span><br><span class="line">  System.out.println(<span class="string">&quot;=========== CEO看报表 ===========&quot;</span>);</span><br><span class="line">  report.showReport(<span class="keyword">new</span> <span class="title class_">CEOVisitor</span>());</span><br><span class="line">  System.out.println(<span class="string">&quot;=========== CTO看报表 ===========&quot;</span>);</span><br><span class="line">  report.showReport(<span class="keyword">new</span> <span class="title class_">CTOVisitor</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出如下 */</span></span><br><span class="line">=========== CEO看报表 ===========</span><br><span class="line">经理:经理A,KPI:<span class="number">9</span>,新产品数量:<span class="number">7</span></span><br><span class="line">程序员:张三,KPI:<span class="number">0</span></span><br><span class="line">程序员:李四,KPI:<span class="number">5</span></span><br><span class="line">程序员:王五,KPI:<span class="number">5</span></span><br><span class="line">经理:经理B,KPI:<span class="number">8</span>,新产品数量:<span class="number">0</span></span><br><span class="line">程序员:赵六,KPI:<span class="number">2</span></span><br><span class="line">程序员:孙七,KPI:<span class="number">0</span></span><br><span class="line">=========== CTO看报表 ===========</span><br><span class="line">经理:经理A,新产品数量:<span class="number">2</span></span><br><span class="line">程序员:张三,代码行数：<span class="number">35823</span></span><br><span class="line">程序员:李四,代码行数：<span class="number">87719</span></span><br><span class="line">程序员:王五,代码行数：<span class="number">37565</span></span><br><span class="line">经理:经理B,新产品数量:<span class="number">8</span></span><br><span class="line">程序员:赵六,代码行数：<span class="number">67197</span></span><br><span class="line">程序员:孙七,代码行数：<span class="number">52621</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB2解决方案【算术溢出】</title>
      <link href="/DB2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%90%E7%AE%97%E6%9C%AF%E6%BA%A2%E5%87%BA%E3%80%91/"/>
      <url>/DB2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%90%E7%AE%97%E6%9C%AF%E6%BA%A2%E5%87%BA%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>今天开发一张报表，写的SQL语句执行出错，错误如下:<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210224214812.png"><br>翻译过来就是<code>发生算术溢出或其他算术异常</code>,网上搜索到的资料也不尽人意,于是自己摸索,查清楚了错误原因,这里记录一下。</p><span id="more"></span><h4 id="错误重现"><a href="#错误重现" class="headerlink" title="错误重现"></a>错误重现</h4><ul><li>新建临时表，表结构如下  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;TEST    &quot;.&quot;TABLE2&quot; ( &quot;ID&quot; <span class="type">VARCHAR</span>(<span class="number">50</span>) , &quot;NAME&quot; <span class="type">VARCHAR</span>(<span class="number">50</span>) , &quot;VALUE&quot; <span class="type">DECIMAL</span>(<span class="number">16</span>, <span class="number">8</span>)) <span class="keyword">IN</span> &quot;USERSPACE1&quot; ORGANIZE <span class="keyword">BY</span> <span class="type">ROW</span> ;</span><br></pre></td></tr></table></figure></li><li>插入测试数据  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TEST.TABLE2 <span class="keyword">VALUES</span>(CONCAT(HEX(RAND()),HEX(RAND())),<span class="string">&#x27;参数1&#x27;</span>,<span class="number">1.24342</span>)</span><br></pre></td></tr></table></figure></li><li>执行sql  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(<span class="number">4324432.13134</span><span class="operator">/</span><span class="number">365</span> <span class="keyword">AS</span> <span class="type">DECIMAL</span>(<span class="number">17</span>,<span class="number">4</span>)) <span class="operator">*</span> NVL(<span class="keyword">VALUE</span>,<span class="number">1</span>) <span class="operator">*</span> NVL(<span class="keyword">VALUE</span>,<span class="number">1</span>) <span class="operator">*</span> NVL(<span class="keyword">VALUE</span>,<span class="number">1</span>) <span class="keyword">FROM</span> TABLE2</span><br></pre></td></tr></table></figure></li><li>执行错误与预期一致</li></ul><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><ul><li>将各部分数据单独拿出来查询  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(<span class="number">4324432.13134</span><span class="operator">/</span><span class="number">365</span> <span class="keyword">AS</span> <span class="type">DECIMAL</span>(<span class="number">17</span>,<span class="number">4</span>)) ,NVL(<span class="keyword">VALUE</span>,<span class="number">1</span>) , NVL(<span class="keyword">VALUE</span>,<span class="number">1</span>) , NVL(<span class="keyword">VALUE</span>,<span class="number">1</span>) <span class="keyword">FROM</span> TABLE2</span><br></pre></td></tr></table></figure>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210224221451.png"></li><li>最开始会误以为是数据错误，于是直接将数据写死参与运算<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210224221611.png"></li><li>这个时候就很疑惑了，明明是同样的数据，为啥就会报错呢？于是开始怀疑是不是数据类型出了问题。</li><li>于是将数据全部进行类型转换,发现能够正常执行不报错。  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(<span class="number">4324432.13134</span><span class="operator">/</span><span class="number">365</span> <span class="keyword">AS</span> <span class="type">DECIMAL</span>(<span class="number">16</span>,<span class="number">4</span>)) <span class="operator">*</span> <span class="built_in">CAST</span>(NVL(<span class="keyword">VALUE</span>,<span class="number">1</span>) <span class="keyword">AS</span> <span class="type">DECIMAL</span>(<span class="number">16</span>,<span class="number">4</span>)) <span class="operator">*</span> <span class="built_in">CAST</span>(NVL(<span class="keyword">VALUE</span>,<span class="number">1</span>) <span class="keyword">AS</span> <span class="type">DECIMAL</span>(<span class="number">16</span>,<span class="number">4</span>)) <span class="operator">*</span> <span class="built_in">CAST</span>(NVL(<span class="keyword">VALUE</span>,<span class="number">1</span>) <span class="keyword">AS</span> <span class="type">DECIMAL</span>(<span class="number">16</span>,<span class="number">4</span>)) <span class="keyword">FROM</span> TABLE2</span><br></pre></td></tr></table></figure></li><li>最后比较强转之前和强转之后数据类型的差异，找到问题所在了。</li></ul><h4 id="原因剖析"><a href="#原因剖析" class="headerlink" title="原因剖析"></a>原因剖析</h4><ul><li>类型转换之前是<code>DECIMAL(16,8)</code>,转换之后是<code>DECIMAL(16,4)</code>。差距在于小数位进度相差4位。</li><li>这时候应该很清晰了，原因就是<code>4位小数精度 X 8位小数精度 X 8位小数精度 X 8位小数精度</code>导致最后的数据精度超长。而DECIMAL最大长度为31位。</li></ul><div class="note green icon-padding flat"><i class="note-icon fas fa-thumbs-up"></i><p>错误原因虽然很小，但是定位错误的步骤比较麻烦。遇到问题，找到问题所在是最重要的一步!</p></div>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5分钟搭建对象存储服务!</title>
      <link href="/5%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1/"/>
      <url>/5%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>对象存储服务用来存储各类文件，一般作用于存储图片。常用的对象存储服务有OSS，像阿里云、腾讯、七牛云等等都有OSS对象存储服务。虽然这些OSS使用也很便捷，但毕竟还是自己搭建的比较香，搭建好了，也不需要连接外网就能使用，安全又方便。</p><span id="more"></span><h4 id="MinIO介绍"><a href="#MinIO介绍" class="headerlink" title="MinIO介绍"></a>MinIO介绍</h4><p>MinIO是基于Go语言开发的一款高性能对象存储服务，非常适合于存储大容量非结构化的数据，比如图片、视频、日志等文件。而且MinIO虽然轻量，但五脏俱全，安装使用也十分方便。</p><h4 id="使用Docker安装及部署"><a href="#使用Docker安装及部署" class="headerlink" title="使用Docker安装及部署"></a>使用Docker安装及部署</h4><ul><li>下载镜像  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure></li><li>运行MinIO并挂载目录  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> docker run -p 9090:9000 --name minio \</span><br><span class="line">-v /root/mizhuo/docker/minio/data:/data \</span><br><span class="line">-v /root/mizhuo/docker/minio/config:/root/.minio \</span><br><span class="line">-d minio/minio server /data</span><br></pre></td></tr></table></figure></li><li>浏览器访问MinIO网页端,默认Access Key和Secret都是<code>minioadmin</code><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210115215929.png"></li></ul><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><ul><li>新建存储桶<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210115220417.png"></li><li>存储桶创建完成后，上传文件<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210115220537.png"></li></ul><h4 id="浏览文件"><a href="#浏览文件" class="headerlink" title="浏览文件"></a>浏览文件</h4><ul><li>图片上传完成后，可以拷贝链接获取临时访问路径，时间可以自行选择<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210115220934.png"></li><li>想获取一个永久的访问路径，需要修改存储桶策略。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210115221217.png"></li><li>这里可以选择访问策略，只读、只写、可读可写，这里我们选择只读即可，但是需要注意的是，访问前缀需要设置为<code>*.*</code>，否则会无法访问<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210115221236.png"></li><li>设置完之后，通过前面的路径就可以查看到这个文件了<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210115221526.png"></li><li>浏览图片<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210115221613.png"><div class="note green icon-padding flat"><i class="note-icon fas fa-thumbs-up"></i><p>至此,一个完整的对象存储服务就已经搭建完成了。如果想整合到Spring项目中也是很简单的,这里就不再演示,有需要的小伙伴可以查看MinIO的java API。</p></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Stream定时任务</title>
      <link href="/Spring%20Cloud%20Stream%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/Spring%20Cloud%20Stream%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>在开发系统的过程中，我们经常会遇到延迟执行任务的需求。比如，在系统中设定两个小时后提醒我做XX事情。对于这样的需求，我们可以使用Spring Cloud Stream搭配消息中间件可以很好的进行处理。</p><span id="more"></span><h4 id="安装RabbitMq延迟消息插件"><a href="#安装RabbitMq延迟消息插件" class="headerlink" title="安装RabbitMq延迟消息插件"></a>安装RabbitMq延迟消息插件</h4><ul><li>RabbitMq的插件我们可以在<a href="https://www.rabbitmq.com/community-plugins.html">Rabbit官网</a>进行下载。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210105101230.png"></li><li>也可以直接拷贝链接在服务器上下载插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@mizhuo docker]# wget https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.8.9/rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez</span><br><span class="line">--2021-01-05 09:00:52--  https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/3.8.9/rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez</span><br><span class="line">正在解析主机 github.com (github.com)... 52.74.223.119</span><br><span class="line">正在连接 github.com (github.com)|52.74.223.119|:443... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 302 Found</span><br><span class="line">位置：https://github-production-release-asset-2e65be.s3.amazonaws.com/32327910/fb8cf200-1884-11eb-8a3a-86e8864bf669?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210105%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20210105T005943Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=2d886a4ad79f1444a8c709b84b24e4bd811e8de0d4502c91216634701dbdb6f4&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=32327910&amp;response-content-disposition=attachment%3B%20filename%3Drabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez&amp;response-content-type=application%2Foctet-stream [跟随至新的 URL]</span><br><span class="line">--2021-01-05 09:00:53--  https://github-production-release-asset-2e65be.s3.amazonaws.com/32327910/fb8cf200-1884-11eb-8a3a-86e8864bf669?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20210105%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20210105T005943Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=2d886a4ad79f1444a8c709b84b24e4bd811e8de0d4502c91216634701dbdb6f4&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=32327910&amp;response-content-disposition=attachment%3B%20filename%3Drabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez&amp;response-content-type=application%2Foctet-stream</span><br><span class="line">正在解析主机 github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... 52.216.138.115</span><br><span class="line">正在连接 github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.138.115|:443... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 200 OK</span><br><span class="line">长度：51047 (50K) [application/octet-stream]</span><br><span class="line">正在保存至: “rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez”</span><br><span class="line"></span><br><span class="line">100%[===========================================================================================================================================&gt;] 51,047       236KB/s 用时 0.2s</span><br><span class="line"></span><br><span class="line">2021-01-05 09:00:54 (236 KB/s) - 已保存 “rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez” [51047/51047])</span><br></pre></td></tr></table></figure></li><li>将插件复制到RabbitMq的安装目录下的<code>plugins</code>文件夹<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@mizhuo rabbit-plugins]# docker cp rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez rabbitmq:/plugins</span><br></pre></td></tr></table></figure></li><li>启用插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@mizhuo rabbit-plugins]# docker exec -it rabbitmq /bin/bash</span><br><span class="line">root@fdda6c7b343f:/plugins# chmod 777 /plugins/rabbitmq_delayed_message_exchange-3.8.9-0199d11c.ez</span><br><span class="line">root@fdda6c7b343f:/plugins# rabbitmq-plugins enable rabbitmq_event_exchange</span><br><span class="line">Enabling plugins on node rabbit@fdda6c7b343f:</span><br><span class="line">rabbitmq_event_exchange</span><br><span class="line">The following plugins have been configured:</span><br><span class="line">  rabbitmq_event_exchange</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_prometheus</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">Applying plugin configuration to rabbit@fdda6c7b343f...</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  rabbitmq_event_exchange</span><br><span class="line"></span><br><span class="line">started 1 plugins.</span><br></pre></td></tr></table></figure><div class="note red icon-padding flat"><i class="note-icon fa fa-triangle-exclamation"></i><p>注意:修改文件权限很重要，否则会导致启动失败。出现下图中<code>x-delayed-message</code>才说明启用成功。</p></div><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210105205547.png"></li></ul><h4 id="项目中开启消息延迟功能"><a href="#项目中开启消息延迟功能" class="headerlink" title="项目中开启消息延迟功能"></a>项目中开启消息延迟功能</h4><ul><li>配置yml文件<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">mizhuo-input:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">mizhuo_delay</span></span><br><span class="line">        <span class="attr">mizhuo-output:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">mizhuo_delay</span></span><br><span class="line">      <span class="attr">rabbit:</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">          <span class="attr">mizhuo-input:</span></span><br><span class="line">            <span class="attr">consumer:</span></span><br><span class="line">              <span class="attr">delayed-exchange:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">mizhuo-output:</span></span><br><span class="line">            <span class="attr">producer:</span></span><br><span class="line">              <span class="attr">delayed-exchange:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>创建通道<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.mizhuo.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.Input;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.Output;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.SubscribableChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mizhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2021/1/4 9:08 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyChannel</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">INPUT</span> <span class="operator">=</span> <span class="string">&quot;mizhuo-input&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">OUTPUT</span> <span class="operator">=</span> <span class="string">&quot;mizhuo-output&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output(OUTPUT)</span></span><br><span class="line">    MessageChannel <span class="title function_">output</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input(INPUT)</span></span><br><span class="line">    SubscribableChannel <span class="title function_">input</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>接收消息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.mizhuo.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Sink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mizhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2021/1/4 7:59 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableBinding(MyChannel.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsgReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MsgReceiver.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(MyChannel.INPUT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">         <span class="type">DateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;接收时间:&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        logger.info(<span class="string">&quot;接收内容:&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>发送消息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> site.mizhuo.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.support.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mizhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2021/1/4 9:13 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span>  LoggerFactory.getLogger(HelloController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyChannel channel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/&#123;msg&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(<span class="meta">@PathVariable</span> String msg)</span>&#123;</span><br><span class="line">        <span class="type">DateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;请求时间:&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + format.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        channel.output().send(MessageBuilder.withPayload(msg).setHeader(<span class="string">&quot;x-delay&quot;</span>,<span class="number">5000</span>).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="访问接口并打印日志"><a href="#访问接口并打印日志" class="headerlink" title="访问接口并打印日志"></a>访问接口并打印日志</h4><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210105210723.png"><br>可以看出消息延迟功能开启成功。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> RabbitMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Native关键字</title>
      <link href="/Native%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/Native%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>说到<code>native</code>关键字，大家可能没怎么关注过，但是肯定都见过，在Java很多方法中，都有用<code>native</code>修饰的方法。</p><span id="more"></span><p>比如在<code>Object</code>类中就有很多native方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException;</span><br></pre></td></tr></table></figure><p>那什么是native方法呢？所谓native,其实是<code>JNI(java native interface)</code>,是java使用其他语言编写的代码和代码库的一个渠道，以弥补java无法直接访问操作系统底层、和运行速度慢的缺陷。</p><h4 id="通过JNI调用C-代码"><a href="#通过JNI调用C-代码" class="headerlink" title="通过JNI调用C++代码"></a>通过JNI调用C++代码</h4><ul><li>编写Java代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mizhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2020/12/19 9:25 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: native方法测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String <span class="title function_">callBack</span><span class="params">(String in)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.load(<span class="string">&quot;/Users/mizhuo/WorkPlace/study-project/tmp/NativeTest/NativeTest.dll&quot;</span>);</span><br><span class="line">        sayHello();</span><br><span class="line">        System.out.println(callBack(<span class="string">&quot;你好呀!&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译Java代码，生成头文件。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah -jni com.example.demo.NativeTest</span><br></pre></td></tr></table></figure><div class="note red icon-padding flat"><i class="note-icon fa fa-triangle-exclamation"></i><p>注意:要在项目src&#x2F;main&#x2F;java目录下执行，否则可能出现找不到类的情况。</p></div><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201220083617.png"><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201220083540.png"><br>查看头文件，可见<code>sayHello</code>和<code>callBack</code>方法<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class com_example_demo_NativeTest */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Included_com_example_demo_NativeTest</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Included_com_example_demo_NativeTest</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_example_demo_NativeTest</span></span><br><span class="line"><span class="comment"> * Method:    sayHello</span></span><br><span class="line"><span class="comment"> * Signature: ()V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="type">void</span> JNICALL <span class="title">Java_com_example_demo_NativeTest_sayHello</span></span></span><br><span class="line"><span class="function">  <span class="params">(JNIEnv *, jclass)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     com_example_demo_NativeTest</span></span><br><span class="line"><span class="comment"> * Method:    callBack</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_example_demo_NativeTest_callBack</span></span></span><br><span class="line"><span class="function">  <span class="params">(JNIEnv *, jclass, jstring)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li>编写cpp文件，实现两个方法<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 迷浊 on 2020/12/20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;com_example_demo_NativeTest.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Java_com_example_demo_NativeTest_sayHello</span><span class="params">(JNIEnv *, jclass)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!Here is C++&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">jstring <span class="title">Java_com_example_demo_NativeTest_callBack</span><span class="params">(JNIEnv *, jclass, jstring str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>注意:需引入<code>jni.h</code>以及<code>jni_md.h</code>两个头文件</strong><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201220113649.png"><br>头文件在JAVAHOME目录下<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201220113848.png"></li><li>编译动态链接库<br>我使用的是Clion来编译动态链接库，需要修改<code>CMakeLists.txt</code>文件，添加<code>add_library(c_project SHARED com_example_demo_NativeTest.cpp)</code>。<br>编译可以得到动态链接库文件，MAC下是<strong>dylib</strong>文件,Windows是<strong>dll</strong>文件。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201220114145.png"></li><li>java链接dylib文件并调用方法<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201220114436.png"><br>可以看出C++实现的方法被成功运行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义类加载器</title>
      <link href="/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p>Java类加载过程，第一步就是通过类加载器加载<code>.class</code>文件，获取其二进制流,并在内存中创建对象的Class对象。类加载器主要有四种。</p><span id="more"></span><ul><li>启动(Bootstrap)类加载器<br>  用来加载Java核心类库，由C++语言实现，是虚拟机的一部分，无法被java程序直接引用。</li><li>扩展(Extension)类加载器<br>  用来加载java扩展库，java虚拟机会提供扩展类库目录，该类加载器在目录中查询并加载java类。</li><li>系统(System)类加载器<br>  根据java应用的类路径来加载java类。一般来说，java应用的类都是它来完成加载的。</li><li>自定义(Custom)类加载器<br>  通过继承<code>java.lang.ClassLoader</code>类来实现。</li></ul><h4 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h4><p><code>双亲委派模式</code>要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。</p><ul><li>工作原理<br>  如果一个类加载器收到了类加载的请求，它不会自己直接去加载类，而是将请求委托给父类加载器去执行，如果父类加载器也存在父类加载器，则一层层向上委托直到完成类加载任务。若父类加载器无法完成加载任务，子加载器才会尝试加载，这就是双亲委派模式。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201213230046.png"><br><strong>来源:<a href="https://blog.csdn.net/javazejian/article/details/73413292">https://blog.csdn.net/javazejian/article/details/73413292</a></strong></li><li>为何使用双亲委派模式<br>采用双亲委派模式最大的好处就是类加载的层级关系，通过这种层级关系，可以有效的避免类的重复加载问题。因为父类能加载的话，子类就不会有机会去加载了，这样能保证同一个类加载器加载的相同的全限定类名的类是同一个类。</li></ul><h4 id="ClassLoader源码解析"><a href="#ClassLoader源码解析" class="headerlink" title="ClassLoader源码解析"></a>ClassLoader源码解析</h4><ul><li><strong><code>loadClass</code></strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">//先判断该类是否已经被加载</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//有父类加载器，则委托父类加载器加载</span></span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//无父类加载器则使用启动器类加载器</span></span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//父类加载器也无法加载该类，则自行加载此类。</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>  可以看出，当类收到加载请求时，先从缓存查找该类是否已被加载，如果存在则直接返回，否则交于父类加载器进行加载，倘若不存在父类加载器则交由启动类加载器进行加载，如果都无法加载成功，则返回到被请求的类加载器进行加载，主要是使用<code>findClass</code>方法进行加载。</li><li><strong><code>findClass</code></strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  在自定义类加载时，总会去继承ClassLoader类，把自定义的类加载器逻辑写在findClass()方法中。从前面的分析可知，findClass()方法是在loadClass()方法中被调用的，当loadClass()方法中父加载器加载失败后，则会调用自己的findClass()方法来完成类加载，这样就可以保证自定义的类加载器也符合双亲委托模式。</li><li><strong><code>defineClass</code></strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len,</span><br><span class="line">                                        ProtectionDomain protectionDomain)</span><br><span class="line">    <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">&#123;</span><br><span class="line">    protectionDomain = preDefineClass(name, protectionDomain);</span><br><span class="line">    <span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> defineClassSourceLocation(protectionDomain);</span><br><span class="line">    Class&lt;?&gt; c = defineClass1(name, b, off, len, protectionDomain, source);</span><br><span class="line">    postDefineClass(c, protectionDomain);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  加载完Class之后，需将读取的字节流转换为JVM能够识别的Class对象.</li><li><strong><code>resolveClass</code></strong>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">resolveClass</span><span class="params">(Class&lt;?&gt; c)</span> &#123;</span><br><span class="line">    resolveClass0(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">resolveClass0</span><span class="params">(Class&lt;?&gt; c)</span>;</span><br></pre></td></tr></table></figure>  对完成创建的Class对象进行解析，为类的变量分配内存、初始值等。</li></ul><h4 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h4><ul><li>创建测试类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassTemp</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加载ClassTemp类成功!&quot;</span>);</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> ClassTemp.class.getClassLoader();</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> loader.getParent();</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent1</span> <span class="operator">=</span> parent.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;加载器:&quot;</span> + loader);</span><br><span class="line">        System.out.println(<span class="string">&quot;父类加载器:&quot;</span> + parent);</span><br><span class="line">        System.out.println(<span class="string">&quot;爷爷加载器:&quot;</span> + parent1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编译测试类获取Class文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodeMacBook-Pro  ~/WorkPlace/study-project/tmp/MyClassLoader  vi *java</span><br><span class="line">mizhuo@mizhuodeMacBook-Pro  ~/WorkPlace/study-project/tmp/MyClassLoader  javac ClassTemp.java</span><br><span class="line">mizhuo@mizhuodeMacBook-Pro  ~/WorkPlace/study-project/tmp/MyClassLoader  ls</span><br><span class="line">ClassTemp.class ClassTemp.java</span><br></pre></td></tr></table></figure></li><li>创建自定义类加载器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mizhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2020/12/19 4:53 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义类加载器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String _classPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassLoader</span><span class="params">(String classPath)</span>&#123;</span><br><span class="line">        _classPath = classPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">myClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//获取文件字节流</span></span><br><span class="line">        <span class="type">byte</span>[] classDatas = getDatas();</span><br><span class="line">        <span class="keyword">if</span>(classDatas != <span class="literal">null</span>)&#123;</span><br><span class="line">            myClass = defineClass(name,classDatas,<span class="number">0</span>,classDatas.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取Class字节流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] getDatas() &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(_classPath);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                outputStream = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">                <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((size = in.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    outputStream.write(buffer,<span class="number">0</span>,size);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> outputStream.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用自定义类加载器加载测试类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> <span class="string">&quot;/Users/mizhuo/WorkPlace/study-project/tmp/MyClassLoader/ClassTemp.class&quot;</span>;</span><br><span class="line">       <span class="type">MyClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassLoader</span>(classPath);</span><br><span class="line">       Class&lt;?&gt; classTemp = classLoader.findClass(<span class="string">&quot;ClassTemp&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> + classTemp.getClassLoader());</span><br><span class="line"></span><br><span class="line">       <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> classTemp.getDeclaredMethod(<span class="string">&quot;main&quot;</span>,String[].class);</span><br><span class="line">       <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> classTemp.newInstance();</span><br><span class="line">       String[] strings = &#123;&#125;;</span><br><span class="line">       method.invoke(obj, (Object)strings);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>类加载成功。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201219184435.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类加载器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/JVM/"/>
      <url>/JVM/</url>
      
        <content type="html"><![CDATA[<p><strong>JVM</strong>即Java虚拟机(Java virtual machine)，其组成部分为:程序计数器(Program Counter Register)、Java虚拟机栈(Java Virtual Machine Stacks)、本地方法栈(Native Method Stack)、Java堆（Java Heap)、方法区(Methed Area)</p><span id="more"></span><h4 id="各组成部分的用途"><a href="#各组成部分的用途" class="headerlink" title="各组成部分的用途"></a>各组成部分的用途</h4><ul><li>程序计数器<br>  <code>程序计数器</code>是一块较小的内存空间，它可以看做是一个指示器，指向当前线程所执行的字节码的位置。字节码解码器就是通过修改这个程序计数器来选取下一个要执行的字节码指令。像循环、跳转、异常等基础功能都需要依赖这个计数器来实现。</li><li>Java虚拟机栈<br>  <code>Java虚拟机栈</code>描述的是Java方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧(Stack Frame),包括函数的返回地址和参数、临时变量、函数上下文等等内容。每个方法的执行都对应一个栈帧在虚拟机栈中的入栈到出栈。</li><li>本地方法栈<br>  <code>本地方法栈</code>主要存放用<code>native</code>关键字修饰的方法，即本地方法。而本地方法主要用于加载文件和动态链接库，由于Java无法访问操作系统底层信息，这时候就需要借助C语言来实现，而被native修饰的方法可以被C语言重写。具体步骤如下:<ul><li>在Java程序中声明native方法，编译该Java文件，生成class文件。</li><li>使用javah -jni编译class文件，生成一个.h文件。</li><li>写一个.cpp文件实现上一步中.h文件中的方法。</li><li>将上一步的.cpp文件编译成动态链接库文件.dll。</li><li>最后就可以使用System或是Runtime中的loadLibrary()方法加载上一步的产生的动态连接库文件了。</li></ul></li><li>Java堆<br>  <code>Java堆</code>是Java虚拟机中内存最大的一块,是被所有线程共享的。在java虚拟机启动的时候创建，用于存放对象实例。</li><li>方法区<br> <code>方法区</code>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。</li></ul><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p>实现通过类的全限定名获取该类的二进制字节流的代码块叫类加载器。类加载器主要有四种。</p><ul><li>启动类加载器<br>  用来加载Java核心类库，无法被java程序直接引用。</li><li>扩展类加载器<br>  用来加载java扩展库，java虚拟机会提供扩展类库目录，该类加载器在目录中查询并加载java类。</li><li>系统类加载器<br>  根据java应用的类路径来加载java类。一般来说，java应用的类都是它来完成加载的。</li><li>自定义类加载器<br>  通过继承<code>java.lang.ClassLoader</code>类来实现。</li></ul><h4 id="类加载器双亲委派模型机制"><a href="#类加载器双亲委派模型机制" class="headerlink" title="类加载器双亲委派模型机制"></a>类加载器双亲委派模型机制</h4><p>当一个类收到加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果父类无法被加载，则反馈给子类，由子类去完成类的加载。</p><h4 id="Java类加载过程"><a href="#Java类加载过程" class="headerlink" title="Java类加载过程"></a>Java类加载过程</h4><ul><li>1:加载<ul><li>通过类的全限定类名获取类的二进制流</li><li>将二进制流的静态存储结构转化为方法区的运行时数据</li><li>在内存中生成Class对象，作为方法区这个类的访问入口</li></ul></li><li>2:验证<br>  <strong>用于确保Class文件的字节流中包含的信息符合当前虚拟机的要求，保证加载类的正确性。</strong><ul><li>文件格式验证:验证字节流是否符合Class文件规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型。</li><li>源数据验证:对字节码描述的信息进行语义分析,如这个类是否有父类、是否继承了不被继承的类等等。</li><li>字节码验证:是整个验证过程中最为复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如:方法中类型转换是否正确，跳转指令是否正确等。</li><li>符号引用验证:主要是为了确保解析动作能够正确执行。</li></ul></li><li>3:准备<ul><li>为类的静态变量分配内存并将其初始化为默认值，这些内存都在方法区中进行分配(<strong>这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化</strong>)。</li><li>准备阶段不分配类中实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在Java堆中。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line"><span class="comment">//在准备阶段只会初始化为0。在后续的初始化阶段才会变为123.</span></span><br></pre></td></tr></table></figure></li></ul></li><li>4:解析<ul><li>将常量池中的符号引用转换为直接引用的过程。</li></ul></li><li>5:初始化<br>  初始化是类加载的最后一步，在前面的类加载的过程中，除了用户<strong>自定义的类加载器</strong>参与之外，剩下的动作都由虚拟机主导和控制。直到初始化阶段，才真正的开始执行类中定义的java程序。</li><li>6:使用</li><li>7:卸载</li></ul><h4 id="java内存分配"><a href="#java内存分配" class="headerlink" title="java内存分配"></a>java内存分配</h4><ul><li>寄存器:无法控制</li><li>静态域:<code>static</code>定义的静态成员。</li><li>常量池:<ul><li>静态常量池: <code>final</code>修饰的常量值及符号引用(<code>类和接口的全限定名</code>,<code>字段的名称和描述符</code>,<code>方法的名称和描述符</code>)。</li><li>运行时常量池:是方法区的一部分，存放编译器的常量值和符号引用。</li></ul></li><li>磁盘等永久存储空间</li><li>堆内存:存储new的对象，所有类的实例和数组都是在堆内存上分配内存，在JVM启动的时候创建，由Java虚拟机自动垃圾回收器管理。</li><li>栈内存:位于CPU寄存器中，存取速度快，数据可以共享，但是缺乏灵活性，大小与生存期必须确定。</li></ul><h4 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h4><p><code>GC(GabageCollection)</code>即垃圾收集,Java提供GC功能自动监测对象是否超过作用域从而达到自动回收内存的目的。Java并没有提供释放已分配内存的显示操作方法。同时，GC由虚拟机自动执行，不受控制。只有在虚拟机空闲或者当前堆内存不足的情况下才会触发执行。<br><strong>程序员可以手动执行<code>System.gc()</code>通知GC运行，但是并不保证GC一定会被马上执行，具体执行GC的时间还是取决于JVM。</strong></p><ul><li>GC回收的对象<br>  GC会回收不再存活的对象，而判断对象是否存活有两种方法。<ul><li>1:引用计数法<br>  给每个对象设置一个引用计数器,每当有一个地方使用这个对象时,计数器加一,引用失效时计数器减一。当计数器归0时，说明对象没有被引用。将会被回收。<br>  此计数法有缺陷，就是无法解决循环引用的问题。</li><li>2:可达性算法(引用链法)<br>  从一个<code>GC Roots</code>的对象向下搜索,如果一个对象到GC Roots没有被任何引用链相连时,说明此对象不可用。但并不代表此对象会立马被回收，而是处于一个<code>死缓</code>的阶段,等待被真正回收。</li></ul></li><li>GC清理算法<br>  目前JAVA使用的为<code>分代收集算法</code>,它根据对象的生存周期,将堆内存分为<code>新生代(1/3内存)</code>和<code>老年代(2/3内存)</code>，而<code>新生代</code>又被分为三个区域:<strong><code>eden</code>、<code>from survivor</code>、<code>to survivor</code></strong>,内存为(8:1:1)。<ul><li>新建的对象会被存放在<code>eden</code>区域,而当<code>eden</code>区域内存不足时，就会触发一次<code>minor gc</code>清理<code>eden</code>,并且把无法回收的对象复制到<code>from survivor</code>区域中。</li><li>而当<code>from survivor</code>区域内存不足时，又会触发一次<code>minor gc</code>清理<code>eden</code>、<code>from survivor</code>区域，将无法回收的对象复制到<code>to survivor</code>区域。</li><li>每经历一次gc，对象就会被标记一次，被标记15次时，则进入老年代。当老年代内存满之后就会触发<code>Full GC</code>进行全量回收。</li></ul></li></ul><h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><p><strong>符合内存泄漏的两个条件:<code>无用</code>、<code>无法回收</code></strong></p><ul><li>静态集合类<br>  如<code>HashMap</code>、<code>LinkedList</code>等。如果这些集合被定义为静态，那么它们的生命周期与程序一致，则容器中的对象在程序结束之前无法被释放，即长生命周期的对象持有短生命周期对象的引用，尽管短生命周期的对象不再使用，但是因为长生命周期对象持有它的引用而导致不能被回收，从而造成内存泄漏。</li><li>各种连接<br>  如<code>数据库连接</code>、<code>IO连接</code>等。当连接之后不再使用时，应及时调用close方法来释放连接，否则会造成大量对象无法被回收，从而引起内存泄漏。</li><li>变量不合理的作用域<br>  即变量数据已经无用，但生命周期还在继续，也有可能造成内存泄漏。</li><li>内部类持有外部类<br>  如果一个外部类的实例对象返回了一个内部类的实例对象，那么这个内部类的实例对象将会被长期引用，即使外部类不再使用，也不会被回收，造成内存泄漏。</li><li>改变哈希值<br>  当一个对象被存储到HashSet集合后，如果修改它的哈希值，使其与储存进集合时的哈希值不一致，将会造成无法在集合中检索到这个对象，也无法删除，从而造成内存泄漏。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat性能调优</title>
      <link href="/Tomcat%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
      <url>/Tomcat%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h4 id="Tomcat性能优化"><a href="#Tomcat性能优化" class="headerlink" title="Tomcat性能优化"></a>Tomcat性能优化</h4><p>Tomcat作为Apache完全开源的Web容器，其轻量级、占用资源小、扩展性等等特性受到开发人员及中小型企业的喜爱和广泛的应用。为了Tomcat能够稳定的运行，因此Tomcat的性能优化也很重要。</p><span id="more"></span><h4 id="设置JVM内存"><a href="#设置JVM内存" class="headerlink" title="设置JVM内存"></a>设置JVM内存</h4><p>JAVA中很常见的一个异常就是<code>java.lang.OutOfMemoryError</code>(内存溢出),其中内存溢出也分为多个原因，<code>PermGen space</code>和<code>Java heap space</code>。</p><ul><li><code>PermGen space</code>是因为程序中大量的使用Jar或Class，使java虚拟机装载类的空间不足，出现内存溢出。</li><li><code>Java heap space</code>是因为java虚拟机创建的对象过多，没有及时的回收清理空间，导致堆内存满了。</li></ul><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>去掉重复jar包，减少第三方jar的重复加载。</li><li>配置<code>MaxPermSize</code>的大小，修改catalina.sh，在<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Using CATALINA_BASE:$CATALINA_BASE&quot;</span><br></pre></td></tr></table></figure>上一行填加<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=&quot;-server-XX:PermSize=64M-XX:MaxPermSize=128m&quot;</span><br></pre></td></tr></table></figure></li><li>加大内存，配置catalina.sh中 <code>setJAVA_OPTS=-Xms32m-Xmx512m</code>,JVM自动设置堆内存的初始空间<code>-Xms</code>为物理内存的1&#x2F;64，最大空间<code>-Xmx</code>为物理内存的1&#x2F;4。手动设置堆空间最大不要超过可用物理内存的80%，一般将<code>-Xms</code>和<code>-Xmx</code>设置为相同，而<code>-Xmn</code>设置为<code>-Xmx</code>的1&#x2F;4.<br><em><strong>注意:在JVM中，如果80%的时间都用于GC且可用的堆空间不足2%，则会抛出此异常。</strong></em></li></ul><h4 id="设置tomcat连接参数"><a href="#设置tomcat连接参数" class="headerlink" title="设置tomcat连接参数"></a>设置tomcat连接参数</h4><p>在Tomcat的配置文件<code>server.xml</code>中的<code>&lt;Connector&gt;&lt;Connector/&gt;</code>配置中</p><ul><li><code>minProcessors</code>:最小空闲连接,用于提高系统的处理性能,默认为10;</li><li><code>maxProcessors</code>:最大连接线程数,即并发处理的最大请求数,默认为75;</li><li><code>acceptCount</code>:允许的最大连接数,应大于等于<code>maxProcessors</code>,默认值为100;</li><li><code>enableLookups</code>:是否DNS查询,为提高处理能力,应设置为false;</li><li><code>connectionTimeout</code>:网络连接超时,单位:毫秒。设置为0表示永不超时。通常设置为3000ms;</li><li><code>web server</code>:允许的最大连接数还受制于操作系统的内核参数设置,Windows为2000个左右,Linux为1000个左右;</li></ul><h4 id="项目使用缓存和压缩"><a href="#项目使用缓存和压缩" class="headerlink" title="项目使用缓存和压缩"></a>项目使用缓存和压缩</h4><p>对于静态页面最好进行缓存，这样就不用每次从磁盘上读取，减少磁盘的读写，提高服务器性能。比如采用Nginx作为缓存服务器，将图片、css、js等文件进行缓存，有效减少Tomcat的访问。</p><h4 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h4><p>单个服务器性能肯定有瓶颈，最好的办法就是对服务器进行扩展，而集群就是最好的扩展方式。比如使用Nginx集群，将多个访问分发到多个服务器，大大提升服务器的性能和效率。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hystrix介绍与应用</title>
      <link href="/Hystrix%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/Hystrix%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="Hystrix介绍"><a href="#Hystrix介绍" class="headerlink" title="Hystrix介绍"></a>Hystrix介绍</h4><p>在说Hystrix之前，就要说到微服务了，所谓微服务，体现在一个微上，它将一个很庞大的独立应用细化到一套小型服务，让每个小服务独立运行。服务之间互相通信。而这也会带来很多问题，其中因为微服务模块太多，每一个模块都可能出错，而出错就可能会导致服务雪崩，使得服务器无法正常运行。而Hystrix是Netflix下的一个开源框架，主要是对请求的延迟或故障进行防护和控制，阻止错误的连锁反应，并提供错误回退和服务降级的功能，有效解决的上述问题。</p><span id="more"></span><h4 id="Hystrix初步使用"><a href="#Hystrix初步使用" class="headerlink" title="Hystrix初步使用"></a>Hystrix初步使用</h4><ul><li>新建一个服务注册到Eureka上<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hystrix</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6666</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:1111/eureka</span></span><br></pre></td></tr></table></figure></li><li>启动类上添加注解<code>@EnableCircuitBreaker</code>,或者添加<code>@SpringCloudApplication</code>注解。因为@SpringCloudApplication注解中已经包含了@EnableCircuitBreaker以及EnableDiscoveryClient。这里我就使用@SpringCloudApplication了。然后创建一个RestTemplate的Bean，并开启Ribbon的负载均衡。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动Eureka以及多个不同端口的服务提供者<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201115213755.png"></li><li>创建HystrixService调用服务提供者提供的服务<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://provider/&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建HystrixController调用Service<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HystrixService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> service.hello();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打开浏览器访问两次<code>http://localhost:5555/hello</code>，由于开启了负载均衡，所以两次访问会去向不同的端口。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201115224055.png"><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201115224038.png"></li><li>此时模拟其中一个provider掉线，关闭一个provider服务。再次访问<code>http://localhost:5555/hello</code>，一段时间内会出现<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201115224257.png"><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201115224038.png"><br>过一段时间后，就只会访问还活跃的端口的服务了。这是因为服务掉线，并不会马上更新Eureka的注册表，会有一段时间的延迟，而这段时间内，还会默认这个服务是正常的，会去访问这个端口的服务。</li><li>使用Hystrix提供的解决方案，在Service上添加注解<code>@HystrixCommand</code>,其中<code>fallbackMethod</code>就是如果发生错误，使用的代替解决方案，这里我定义的就是后面的error方法。<strong>注意，替代解决方案返回值必须和当前方法一致。</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod=&quot;error&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://provider/&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;我错了😞&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重启刚刚停止的服务，然后再次模拟掉线。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201115225444.png"><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201115224038.png"><br>可以看到没有出现错误页面了，替代的使我们的备用方案。这就是所谓的<code>服务降级</code>。</li></ul><h4 id="Hystrix异常处理"><a href="#Hystrix异常处理" class="headerlink" title="Hystrix异常处理"></a>Hystrix异常处理</h4><p>在实际应用中，有可能并非请求调用失败，而是业务逻辑出错，这个时候我们需要知道具体错误内容，操作如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod=&quot;error&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://provider/&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">error</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;我错了😞,错误原因:&quot;</span> + e.getMessage();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201116213359.png"><br>而如果我们需要某个异常直接抛出的时候，可以在注解<code>@HystrixCommand(fallbackMethod=&quot;error&quot;)</code>里面再加上<code>ignoreExceptions = ArithmeticException.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod=&quot;error&quot;,ignoreExceptions = ArithmeticException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://provider/&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">error</span><span class="params">(Throwable e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;我错了😞,错误原因:&quot;</span> + e.getMessage();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，报对应异常的时候就不会走回调方法了，而是直接将错误抛出。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201116213845.png"></p><h4 id="Hystrix请求缓存"><a href="#Hystrix请求缓存" class="headerlink" title="Hystrix请求缓存"></a>Hystrix请求缓存</h4><p>所谓请求缓存就是在调用同一个接口的时候，如果参数相同，则可以使用之前缓存下来的数据直接返回，而不去调用接口。而启用请求缓存也很简单，只需要加注解<code>@CacheResult</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod=&quot;error&quot;,ignoreExceptions = ArithmeticException.class)</span></span><br><span class="line">    <span class="meta">@CacheResult</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://provider/&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">error</span><span class="params">(String str,Throwable e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;我错了😞,错误原因:&quot;</span> + e.getMessage();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:替代方法参数和返回值必须与当前方法参数和返回值一致</strong><br>此时启动项目，并调用方法，会发现报错了，提示需要一个<code>HystrixRequestContext</code>，<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201116225217.png"><br>我们在调用接口前初始化缓存，调用后关闭缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HystrixService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/&#123;str&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@PathVariable</span> String str)</span>&#123;</span><br><span class="line">        <span class="type">HystrixRequestContext</span> <span class="variable">context</span> <span class="operator">=</span> HystrixRequestContext.initializeContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            res = service.hello(str);</span><br><span class="line">        &#125;</span><br><span class="line">        context.close();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用接口，会发现只打印了一次结果。说明缓存起作用了。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201116225748.png"><br>如果有多个参数，我们也可以使用<code>@CacheKey</code>来指定一个参数为缓存的Key，这样的话只要这个参数值相同，便可以直接获取缓存内的数据。<br>除了上述的几个注解外，还有一个<code>@CacheRemove</code>注解需要注意，在做数据缓存的时候，我们有可能把数据库数据进行删除了，而这个时候我们往往希望在删除数据的时候，同时要删除缓存内容，这个时候就用上了<code>@CacheRemove</code>。在使用这个注解的时候，必须指定<code>commandKey</code>也就是缓存的名字，只有这个才能准确找到我们要删除的缓存数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod=&quot;error&quot;,ignoreExceptions = ArithmeticException.class)</span></span><br><span class="line">    <span class="meta">@CacheResult</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@CacheKey</span> String str)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://provider/&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="meta">@CacheRemove(commandKey = &quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteKeyById</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">error</span><span class="params">(String str,Throwable e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;我错了😞,错误原因:&quot;</span> + e.getMessage();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hystrix请求合并"><a href="#Hystrix请求合并" class="headerlink" title="Hystrix请求合并"></a>Hystrix请求合并</h4><p>所谓请求合并就是在请求一个接口的时候，线程等待指定时间，如果此时还有同样的接口请求，就合并成一个请求。请求合并的核心就是<code>@HystrixCollapser</code>，在这个注解中指定请求批处理的方法和等待时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCollapser(batchMethod = &quot;getAllById&quot;,collapserProperties = &#123;@HystrixProperty(name = &quot;timerDelayInMilliseconds&quot;,value = &quot;200&quot;)&#125;)</span></span><br></pre></td></tr></table></figure><p><strong>以上就是Hystrix的一些基本功能及使用。</strong></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Hystrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Consul进行服务注册与发现</title>
      <link href="/%E4%BD%BF%E7%94%A8Consul%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
      <url>/%E4%BD%BF%E7%94%A8Consul%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="Consul介绍"><a href="#Consul介绍" class="headerlink" title="Consul介绍"></a>Consul介绍</h4><p>Consul是HashiCorp公司推出的开源工具，使用Go语言开发，所以和Docker完全兼容，部署起来非常容易，Consul具有<strong>绿色</strong>、<strong>轻量级</strong>的特点。是<strong>分布式</strong>的、<strong>高可用</strong>的、 <strong>可横向扩展</strong>的用于实现分布式系统的服务发现与配置。</p><span id="more"></span><h4 id="Consul与Eureka对比"><a href="#Consul与Eureka对比" class="headerlink" title="Consul与Eureka对比"></a>Consul与Eureka对比</h4><ul><li>首先Eureka只需要在项目中加入依赖，就可以作为注册中心。而Consul和Zookeeper一样，需要单独安装才能使用。</li><li>相比于Eureka来讲，Consul具有<strong>一站式</strong>的特点，它里面内置了包括<em>服务注册于发现</em>、<em>健康检查</em>、<em>分布一致性协议实现</em>、<em>Key&#x2F;Value存储</em>、<em>多数据中心方案</em>等等</li><li>Eureka注册速度快，因为Eureka没有主从之分，各个节点相对独立，不管注册列表信息是否一致，每个节点都能向外提供相应的服务。所以保证了可用性，牺牲了一致性。而Consul因为必须要求过半节点都写入成功才能认为注册成功。所以保证了一致性牺牲了可用性。<blockquote><p>所以选择时需要考虑实际情况，需要保证可用性还是一致性。</p></blockquote></li></ul><h4 id="Docker安装Consul"><a href="#Docker安装Consul" class="headerlink" title="Docker安装Consul"></a>Docker安装Consul</h4><h5 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">⚙ mizhuo@mizhuodeMacBook-Pro  ~/WorkPlace/docker-compose  docker search consul</span><br><span class="line">NAME                            DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">consul                          Consul is a datacenter runtime that provides…   1123                [OK]</span><br><span class="line">progrium/consul                                                                 354                                     [OK]</span><br><span class="line">gliderlabs/consul                                                               64                                      [OK]</span><br><span class="line">gliderlabs/consul-server                                                        40                                      [OK]</span><br><span class="line">voxxit/consul                   Blazing-fast Consul (consul.io) binary in Al…   29                                      [OK]</span><br><span class="line">hashicorp/consul-template       Consul Template is a template renderer, noti…   25</span><br><span class="line">gliderlabs/consul-agent                                                         14                                      [OK]</span><br><span class="line">prom/consul-exporter                                                            10                                      [OK]</span><br><span class="line">jhipster/consul-config-loader   A small docker based tool to load Spring Boo…   9                                       [OK]</span><br><span class="line">hashicorp/consul-k8s            First-class integrations between Consul and …   6                                       [OK]</span><br><span class="line">acaleph/consul-alerts                                                           6                                       [OK]</span><br><span class="line">bitnami/consul                  Bitnami Docker Image for Consul                 6                                       [OK]</span><br><span class="line">myena/consul-backinator         Command line Consul KV backup and restore ut…   3                                       [OK]</span><br><span class="line">wdijkerman/consul               Consul 1.8.2 running on Alpine 3.11             3                                       [OK]</span><br><span class="line">mycatisblack/consul-agent       Fork of gliderlabs/consul-agent but with nag…   3                                       [OK]</span><br><span class="line">hashicorp/consul-enterprise     Consul is a datacenter runtime that provides…   2</span><br><span class="line">unifio/consul                   HashiCorp Consul                                1</span><br><span class="line">arm64v8/consul                  Consul is a datacenter runtime that provides…   1</span><br><span class="line">pdffiller/consul                consul version - 0.8.1                          0</span><br><span class="line">cjongseok/consul                The original codes is progrium/consul           0                                       [OK]</span><br><span class="line">justicel/consul-conf-env        Initialize a SSL ride-along container for vo…   0</span><br><span class="line">arm32v6/consul                  Consul is a datacenter runtime that provides…   0</span><br><span class="line">carina/consul                   Consul image used by Carina.                    0                                       [OK]</span><br><span class="line">hoist/consul                    Hoist&#x27;s Consul Server                           0                                       [OK]</span><br><span class="line">wowgroup/consul-agent           Consul Agent                                    0                                       [OK]</span><br></pre></td></tr></table></figure><h5 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">⚙ mizhuo@mizhuodeMacBook-Pro  ~/WorkPlace/docker-compose  docker pull consul</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/consul</span><br><span class="line">188c0c94c7c5: Pull complete</span><br><span class="line">1bd0ad15d154: Pull complete</span><br><span class="line">3d30a01add55: Pull complete</span><br><span class="line">07f3ae3ba267: Pull complete</span><br><span class="line">0de0e8083495: Pull complete</span><br><span class="line">000f607b07c9: Pull complete</span><br><span class="line">Digest: sha256:b85322aa8c65355341dd81b5e95d5c0e8468e6419724d4e8a125198d40426a30</span><br><span class="line">Status: Downloaded newer image for consul:latest</span><br><span class="line">docker.io/library/consul:latest</span><br><span class="line">⚙ mizhuo@mizhuodeMacBook-Pro  ~/WorkPlace/docker-compose  docker images</span><br><span class="line">REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">consul                         latest              4f7b214361a7        3 weeks ago         122MB</span><br></pre></td></tr></table></figure><h5 id="单机模式启动"><a href="#单机模式启动" class="headerlink" title="单机模式启动"></a>单机模式启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ⚙ mizhuo@mizhuodeMacBook-Pro  ~/docker/consul  docker run -p 8500:8500/tcp consul agent -server -ui -bootstrap-expect=1 -client=0.0.0.0</span><br><span class="line">==&gt; Starting Consul agent...</span><br><span class="line">           Version: &#x27;1.8.5&#x27;</span><br><span class="line">           Node ID: &#x27;76100a42-921d-9c9d-8d63-f0120a90f040&#x27;</span><br><span class="line">         Node name: &#x27;5ddd97e78a6d&#x27;</span><br><span class="line">        Datacenter: &#x27;dc1&#x27; (Segment: &#x27;&lt;all&gt;&#x27;)</span><br><span class="line">            Server: true (Bootstrap: true)</span><br><span class="line">       Client Addr: [0.0.0.0] (HTTP: 8500, HTTPS: -1, gRPC: -1, DNS: 8600)</span><br><span class="line">      Cluster Addr: 172.17.0.3 (LAN: 8301, WAN: 8302)</span><br><span class="line">           Encrypt: Gossip: false, TLS-Outgoing: false, TLS-Incoming: false, Auto-Encrypt-TLS: false</span><br></pre></td></tr></table></figure><h5 id="浏览器访问管理页面"><a href="#浏览器访问管理页面" class="headerlink" title="浏览器访问管理页面"></a>浏览器访问管理页面</h5><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201114222236.png"></p><blockquote><p>至此Consul已经安装成功，接下来就可以创建服务并注册到Consul上了。接下来接入到SpringBoot中。</p></blockquote><h4 id="服务提供"><a href="#服务提供" class="headerlink" title="服务提供"></a>服务提供</h4><ul><li>新建一个SpringBoot模块，并勾选<code>Web</code>、<code>Actuator</code>、<code>ConsulDiscovery</code>依赖。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201114222734.png"></li><li>修改配置文件<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span> <span class="comment">#consul配置</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">consul-provider</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure></li><li>提供一个服务接口,为了测试负载均衡，加上端口号<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello!&quot;</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打包项目并分别启动<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar consul-provider-0.0.1-SNAPSHOT.jar --spring.port=4321</span><br><span class="line">java -jar consul-provider-0.0.1-SNAPSHOT.jar --spring.port=4322</span><br></pre></td></tr></table></figure>貌似新版SpringBoot启动类上不加<code>@EnableDiscoveryClient</code>也可以正常发现服务,可以看到两个服务已经成功注册<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201114225604.png"></li></ul><h4 id="服务消费"><a href="#服务消费" class="headerlink" title="服务消费"></a>服务消费</h4><p>同上一样新建模块，并勾选<code>Web</code>、<code>Actuator</code>、<code>ConsulDiscovery</code>依赖。并修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span> <span class="comment">#consul配置</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">consul-consumer</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">4321</span></span><br></pre></td></tr></table></figure><p>消费者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LoadBalancerClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">choose</span> <span class="operator">=</span> client.choose(<span class="string">&quot;consul-provider&quot;</span>);</span><br><span class="line">        System.out.println(choose.getServiceId());</span><br><span class="line">        System.out.println(choose.getUri());</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> restTemplate.getForObject(choose.getUri() + <span class="string">&quot;/hello&quot;</span>, String.class);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问两次<a href="http://localhost:4321/hello%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%87%BA%E5%88%86%E5%88%AB%E8%B0%83%E7%94%A8%E4%BA%86%E4%B8%A4%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%AB%AF%E5%8F%A3%E7%9A%84Provider%EF%BC%8C%E8%AF%B4%E6%98%8EConsul%E9%BB%98%E8%AE%A4%E5%BC%80%E5%90%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%9F%E8%83%BD%E3%80%82">http://localhost:4321/hello，可以看出分别调用了两个不同端口的Provider，说明Consul默认开启负载均衡功能。</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">服务ID:consul-provider</span><br><span class="line">服务URI:http://169.254.6.194:2345</span><br><span class="line">hello!2345</span><br><span class="line">服务ID:consul-provider</span><br><span class="line">服务URI:http://169.254.6.194:1234</span><br><span class="line">hello!1234</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装ELK</title>
      <link href="/Docker%E5%AE%89%E8%A3%85ELK/"/>
      <url>/Docker%E5%AE%89%E8%A3%85ELK/</url>
      
        <content type="html"><![CDATA[<h4 id="使用Dokcer安装配置ELK"><a href="#使用Dokcer安装配置ELK" class="headerlink" title="使用Dokcer安装配置ELK"></a>使用Dokcer安装配置ELK</h4><p>ELK是三个开源软件的缩写,分别表示：Elasticsearch,Logstash,Kibana,它们都是开源软件,而这三种服务可以搭建线上日志收集系统。</p><span id="more"></span><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodeMacBook-Pro  ~/docker/elk  docker images</span><br><span class="line">REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">kibana                        7.14.0             1c52b5264c4b         11 months ago        1.49GB</span><br><span class="line">elasticsearch                 7.14.0             d9c406333741         11 months ago        1.12GB</span><br><span class="line">logstash                      7.14.0             f0b0f64a222c         11 months ago        1.67GB</span><br></pre></td></tr></table></figure><h4 id="创建自定义的网络"><a href="#创建自定义的网络" class="headerlink" title="创建自定义的网络"></a>创建自定义的网络</h4><p>用于连接到连接到同一网络的其他服务(例如Kibana):<code>docker network create elk_network</code></p><h4 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h4><ul><li>启动ElasticSearch<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot; -d --name elasticsearch --net elk_network -p 9200:9200 -p 9300:9300 -e &quot;TZ=Asia/Shanghai&quot; -e &quot;cluster.name=elasticsearch&quot; -e &quot;discovery.type=single-node&quot; -v /Users/mizhuo/Path/Docker/Elasticsearch/plugins:/usr/share/elasticsearch/plugins -v /Users/mizhuo/Path/Docker/Elasticsearch/data:/usr/share/elasticsearch/data  elasticsearch:7.14.0</span><br></pre></td></tr></table></figure></li><li>检测 elasticsearch 是否启动成功<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@mizhuo ~]# curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;d84af9cd4ad5&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;pxxn25lhQbWWQGYH-C3Ijg&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.14.0&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;dd5a0a2acaa2045ff9624f3729fc8a6f40835aa1&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2021-07-29T20:49:32.864135063Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.9.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果启动失败,可能是权限问题,<code>chmod -R 777 /Users/mizhuo/Path/Docker/Elasticsearch/data</code></li><li>下载分词器<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.14.0/elasticsearch-analysis-ik-7.14.0.zip</span><br></pre></td></tr></table></figure></li><li>安装分词器(方法一)<ul><li>下载分词器<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.14.0/elasticsearch-analysis-ik-7.14.0.zip">-&gt;小火箭</a></li><li>将下载文件解压。在 es&#x2F;plugins 目录下，新建 ik 目录，并将解压后的所有文件拷贝到 ik 目录下。</li><li>重启 es 服务。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@mizhuo elasticsearch-plugins]# docker cp elasticsearch-analysis-ik-7.14.0.zip elasticsearch:/usr/share/elasticsearch/plugins/analysis-ik/</span><br><span class="line">[root@mizhuo elasticsearch-plugins]# docker exec -it elasticsearch /bin/bash</span><br><span class="line">[root@37a7c1bcd2de elasticsearch]# cd plugins/analysis-ik</span><br><span class="line">[root@37a7c1bcd2de analysis-ik]# unzip elasticsearch-analysis-ik-7.14.0.zip</span><br><span class="line">[root@37a7c1bcd2de plugins]# elasticsearch-plugin list</span><br><span class="line">analysis-ik</span><br></pre></td></tr></table></figure></li></ul></li><li>安装分词器(方法二)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.14.0/elasticsearch-analysis-ik-7.14.0.zip</span><br></pre></td></tr></table></figure></li><li>测试分词器<ul><li>创建索引<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210110135029.png"></li><li>分词测试<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210110144529.png"><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210110144615.png"></li></ul></li></ul><h4 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h4><ul><li>运行Kibana  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kibana --net elk_network --link elasticsearch:es  -e &quot;elasticsearch.hosts=http://es:9200&quot; -e &quot;TZ=Asia/Shanghai&quot; -p 5601:5601 kibana:7.14.0</span><br></pre></td></tr></table></figure></li><li>设置中文<ul><li><code>docker exec -it kibana /bin/bash</code>进入kibana容器</li><li>找到<code>config</code>下的<code>kibana.yml</code></li><li>最下面添加行 <code>i18n.locale: &quot;zh-CN&quot;</code></li><li>重启kibana</li><li>访问5601端口<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20210110144956.png"></li></ul></li></ul><h4 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h4><ul><li>新建配置文件  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 6001</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">    type =&gt; &quot;debug&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 6002</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">    type =&gt; &quot;error&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; &quot;server&quot;</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">    port =&gt; 6003</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">    type =&gt; &quot;info&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; &quot;es:9200&quot;</span><br><span class="line">    index =&gt; &quot;demo-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>运行logstash  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name logstash -d --net elk_network --link elasticsearch:es -v /Users/mizhuo/Path/Docker/Logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf -e &quot;TZ=Asia/Shanghai&quot; -p 6001:6001 -p 6002:6002 -p 6003:6003 logstash:7.14.0</span><br></pre></td></tr></table></figure></li><li>安装json_lines插件<ul><li><code>docker exec -it logstash /bin/bash</code>进入logstash容器</li><li>切换到<code>bin</code>目录</li><li>执行<code>logstash-plugin install logstash-codec-json_lines</code>安装插件</li><li>重启logstash</li></ul></li></ul><h4 id="使用docker-compose搭建ELK"><a href="#使用docker-compose搭建ELK" class="headerlink" title="使用docker-compose搭建ELK"></a>使用docker-compose搭建ELK</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span> </span><br><span class="line"><span class="attr">services:</span>  </span><br><span class="line">    <span class="attr">elasticsearch:</span>    </span><br><span class="line">        <span class="attr">image:</span> <span class="string">elasticsearch:7.14.0</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">elasticsearch</span>    </span><br><span class="line">        <span class="attr">environment:</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;cluster.name=elasticsearch&quot;</span> <span class="comment">#设置集群名称为elasticsearch      </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;discovery.type=single-node&quot;</span> <span class="comment">#以单一节点模式启动      </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> <span class="comment">#设置使用jvm内存大小      </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span>    </span><br><span class="line">        <span class="attr">volumes:</span>     </span><br><span class="line">            <span class="bullet">-</span> <span class="string">/Users/mizhuo/Path/Docker/Elasticsearch/plugins:/usr/share/elasticsearch/plugins</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/Users/mizhuo/Path/Docker/Elasticsearch/data:/usr/share/elasticsearch/data</span>   </span><br><span class="line">        <span class="attr">ports:</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span>  </span><br><span class="line">    <span class="attr">kibana:</span>    </span><br><span class="line">        <span class="attr">image:</span> <span class="string">kibana:7.14.0</span>    </span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">kibana</span>    </span><br><span class="line">        <span class="attr">links:</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="string">elasticsearch:es</span> <span class="comment">#可以用es这个域名访问elasticsearch服务    </span></span><br><span class="line">        <span class="attr">depends_on:</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="string">elasticsearch</span> <span class="comment">#kibana在elasticsearch启动之后再启动    </span></span><br><span class="line">        <span class="attr">environment:</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;elasticsearch.hosts=http://es:9200&quot;</span> <span class="comment">#设置访问elasticsearch的地址     </span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span>    </span><br><span class="line">        <span class="attr">ports:</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span>  </span><br><span class="line">    <span class="attr">logstash:</span>    </span><br><span class="line">        <span class="attr">image:</span> <span class="string">logstash:7.14.0</span>    </span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">logstash</span>    </span><br><span class="line">        <span class="attr">environment:</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span>    </span><br><span class="line">        <span class="attr">volumes:</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="string">/Users/mizhuo/Path/Docker/Logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf</span> <span class="comment">#挂载logstash的配置文件    </span></span><br><span class="line">        <span class="attr">depends_on:</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="string">elasticsearch</span> <span class="comment">#logstash在elasticsearch启动之后再启动    </span></span><br><span class="line">        <span class="attr">links:</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="string">elasticsearch:es</span> <span class="comment">#可以用es这个域名访问elasticsearch服务    </span></span><br><span class="line">        <span class="attr">ports:</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="number">6001</span><span class="string">:6001</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="number">6002</span><span class="string">:6002</span>      </span><br><span class="line">            <span class="bullet">-</span> <span class="number">6003</span><span class="string">:6003</span>      </span><br></pre></td></tr></table></figure><ul><li>执行<code>docker-compose up -d</code>,就会自动创建ELK了,更推荐这种方法。</li></ul><div class="note green icon-padding flat"><i class="note-icon fas fa-thumbs-up"></i><p>到这里,使用Dokcer搭建ELK已经完成了,后续会讲如何将ELK接入到SpringBoot项目中,简单管理日志并快速进行日志分析。</p></div>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署Vue项目到远程服务器Docker下的Nginx</title>
      <link href="/%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E4%B8%8B%E7%9A%84Nginx/"/>
      <url>/%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8Docker%E4%B8%8B%E7%9A%84Nginx/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在实际生产中,大部分企业都会将项目的前后端都部署到Docker上,所以这里记录一下使用远程服务器Docker的Nginx来部署Vue项目的流程。</p><span id="more"></span><h4 id="打包Vue项目"><a href="#打包Vue项目" class="headerlink" title="打包Vue项目"></a>打包Vue项目</h4><ul><li>使用命令打包Vue项目，会生成一个<code>dist</code>文件夹。<code>dist</code>全称<code>distribution</code>，这个也就是我们最终发布的版本。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201029211956.png"></li></ul><h4 id="安装Nginx镜像"><a href="#安装Nginx镜像" class="headerlink" title="安装Nginx镜像"></a>安装Nginx镜像</h4><ul><li><code>docker pull nginx</code><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201029213730.png"></li></ul><h4 id="上传dist文件夹到服务器"><a href="#上传dist文件夹到服务器" class="headerlink" title="上传dist文件夹到服务器"></a>上传dist文件夹到服务器</h4><ul><li>使用ftp工具，将文件上传至服务器<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201029214614.png"></li></ul><h4 id="创建Dockerfile文件"><a href="#创建Dockerfile文件" class="headerlink" title="创建Dockerfile文件"></a>创建Dockerfile文件</h4><ul><li>新建Dockerfile<br><code>vi Dockerfile</code></li><li>内容如下  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 设置基础镜像</span><br><span class="line">FROM nginx:latest</span><br><span class="line"># 作者</span><br><span class="line">MAINTAINER mizhuo</span><br><span class="line"># 复制dist内容到Nginx下</span><br><span class="line">COPY dist/ /usr/share/nginx/html/     </span><br></pre></td></tr></table></figure></li></ul><h4 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h4><ul><li>创建自己的镜像  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@mizhuo project]# docker build -t vue-client .</span><br><span class="line">Sending build context to Docker daemon  6.208MB</span><br><span class="line">Step 1/4 : FROM nginx:latest</span><br><span class="line">---&gt; f35646e83998</span><br><span class="line">Step 2/4 : MAINTAINER mizhuo</span><br><span class="line">---&gt; Running in b330404f1063</span><br><span class="line">Removing intermediate container b330404f1063</span><br><span class="line">---&gt; 618604556d90</span><br><span class="line">Step 3/4 : COPY dist/ /usr/share/nginx/html/</span><br><span class="line">---&gt; f568fe16703b</span><br><span class="line">Step 4/4 : RUN echo &#x27;init ok!&#x27;</span><br><span class="line">---&gt; Running in 0ccaa3f04510</span><br><span class="line">init ok!</span><br><span class="line">Removing intermediate container 0ccaa3f04510</span><br><span class="line">---&gt; db01d64319dd</span><br><span class="line">Successfully built db01d64319dd</span><br><span class="line">Successfully tagged hr-client:latest</span><br><span class="line">[root@mizhuo project]#</span><br></pre></td></tr></table></figure></li><li>查看镜像  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@mizhuo hr-client]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">vue-client           latest              db01d64319dd        2 minutes ago       139MB</span><br><span class="line">redis               latest              62f1d3402b78        44 hours ago        104MB</span><br><span class="line">nginx               latest              f35646e83998        2 weeks ago         133MB</span><br><span class="line">rabbitmq            management          68898be27496        3 weeks ago         186MB</span><br><span class="line">[root@mizhuo hr-client]#</span><br></pre></td></tr></table></figure></li><li>启动镜像  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@mizhuo hr-client]# docker run -d --name vue-client -p 8080:80 vue-client</span><br></pre></td></tr></table></figure></li></ul><h4 id="浏览器访问项目"><a href="#浏览器访问项目" class="headerlink" title="浏览器访问项目"></a>浏览器访问项目</h4><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20201029224404.png"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乐观锁和悲观锁</title>
      <link href="/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/"/>
      <url>/%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>乐观锁和悲观锁，顾名思义，乐观锁对数据库永远保持着一种乐观的态度，操作数据库的时候不会对数据加锁，只有到数据提交的时候才去验证数据是否存在冲突，一般是通过加版本号来验证。而悲观锁则是一种悲观的态度，操作数据库时先对数据加锁，然后再去读写数据，在它释放锁之前，任何人都无法操作数据，直到上一个人释放锁，下一个人才能继续抢占锁，然后操作数据。</p><span id="more"></span><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>当要对数据库中一行数据进行修改时，为避免同时被其他人修改，最好的办法是对该数据进行锁定，防止并发，而这种先加锁后访问的锁机制被称为悲观锁。悲观锁主要分为共享锁和排他锁，共享锁又称为读锁，就是多个事务对同一数据可以共享一把锁，都能访问到数据但是无法修改。而排他锁又称为写锁，排他锁不能与其他锁并存，如果一个事务获取了一个数据行的排他锁，那么其他事务则无法获取锁。</p><ul><li>优点:策略保守，数据安全</li><li>缺点:会造成死锁，为处理加锁机制，会影响效率，而且不能并发执行。</li></ul><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>相对于悲观锁而言，乐观锁默认数据不会产生冲突，不会刻意使用数据库锁机制，常见实现乐观锁是采用记录数据版本的方法或者是CAS算法，提交数据的时候才去校验版本是否变化，如果版本发生了变化，说明数据库中的数据已经变化了，将问题抛出给用户，用户决定如何解决。</p><ul><li>优点:不会出现死锁情况，效率较高</li><li>缺点:只适用于写的操作比较少的情况。否则会影响效率，降低性能。CAS算法的ABA问题,即如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有被改变过。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令大全</title>
      <link href="/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/Git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>Git</strong>是每个程序员必备技能,相较于之前使用的SVN,Git是分布式的,每台电脑本地都有一个仓库,可以离线工作,而SVN断网则无法工作。而且Git的分支概念可以很好的管理版本、环境等。也正因为Git功能强大,所以要掌握的命令也十分繁多,所以这里记录一下。</p><span id="more"></span><h4 id="Git基础命令"><a href="#Git基础命令" class="headerlink" title="Git基础命令"></a>Git基础命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化本地git仓库,在当前目录下生成.git目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆项目到本地</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> &lt;url&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件加入到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add &lt;file1&gt; &lt;file2&gt; ...</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件目录加入到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add &lt;<span class="built_in">dir</span>&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将当前目录所有文件加入到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除工作区文件,并加入到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> &lt;file&gt; &lt;file2&gt; ...</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止追踪文件,仍保存在工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> -cached &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改文件名并保存到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">mv</span> &lt;file-oldName&gt; &lt;file-newName&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交暂存区所有文件到仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m &lt;desc&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交暂存区指定文件到仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit &lt;file1&gt; &lt;file2&gt; ... -m &lt;desc&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用一次新的提交替代上一次的提交(改写commit信息)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend -m &lt;desc&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重做上一次的提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend &lt;file1&gt; &lt;file2&gt; ...</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交工作区修改直接到仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -a</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复暂存区文件到工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout &lt;commit&gt; &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">恢复暂存区的所有文件到工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout .</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset &lt;commit&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard &lt;commit&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --keep &lt;commit&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git revert &lt;commit&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash pop</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看历史记录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看commit历史记录，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据关键词查询commit历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -S &lt;keyword&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定文件每一次的diff</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -p &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示过去的5次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有提交过的用户和次数</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git shortlog -sn</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定文件修改的时间和内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git blame &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看暂存区和工作区的代码差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看暂存区和上一次commit的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --cached &lt;file&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示工作区与当前分支最新commit的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff HEAD</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示今天写的代码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某次提交的内容的变化</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show &lt;commit&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将当前分支提交到指定分支之后</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase &lt;branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并提交，清理记录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git rebase -i HEAD~n</span></span><br></pre></td></tr></table></figure><h4 id="Git分支命令"><a href="#Git分支命令" class="headerlink" title="Git分支命令"></a>Git分支命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出当前分支列表</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出远程分支列表</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -r</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出本地和远程分支列表</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -a</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建分支,不切换</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch &lt;branch-name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建分支并切换到新分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b &lt;branch-name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建分支并指定指向某个commit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch &lt;branch-name&gt; &lt;commit&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建分支并与远程分支建立关系</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --track &lt;branch-name&gt; &lt;remote-branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout &lt;branch-name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将现有分支与远程分支建立联系</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --set-upstream &lt;branch-name&gt; &lt;remote-branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并分支到当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge &lt;branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择一个commit合并到当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick &lt;commit&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d &lt;branch-name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin --delete &lt;branch-name&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -dr &lt;remote/branch&gt;</span> </span><br></pre></td></tr></table></figure><h4 id="Git远程同步命令"><a href="#Git远程同步命令" class="headerlink" title="Git远程同步命令"></a>Git远程同步命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示远程仓库版本信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加远程仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add &lt;remote&gt; &lt;url&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传本地指定分支到仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push &lt;remote&gt; &lt;branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传所有分支到仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push &lt;remote&gt; --all</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">无视冲突强行上传分支到仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push &lt;remote&gt; --force</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取远程仓库最新内容,不合并</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch &lt;remote&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取远程仓库并与本地分支合并</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull &lt;remote&gt; &lt;branch&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同步远程分支到本地</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote update</span></span><br></pre></td></tr></table></figure><h4 id="Git标签命令"><a href="#Git标签命令" class="headerlink" title="Git标签命令"></a>Git标签命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个tag在当前commit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag &lt;tag&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git tag -d &lt;tag&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin :refs/tags/&lt;tagName&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看tag信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show &lt;tag&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交指定tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push &lt;remote&gt; &lt;tag&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交所有tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push &lt;remote&gt; --tags</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，指向某个tag</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b &lt;branch&gt; &lt;tag&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Git配置命令"><a href="#Git配置命令" class="headerlink" title="Git配置命令"></a>Git配置命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看配置信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">local</span>：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config &lt;--<span class="built_in">local</span> | --global | --system&gt; -l</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前生效的配置信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config -l</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑配置文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">local</span>：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config &lt;--<span class="built_in">local</span> | --global | --system&gt; -e</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加配置项</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--<span class="built_in">local</span>：仓库级，--global：全局级，--system：系统级</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取配置项</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --get &lt;name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除配置项</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config &lt;--<span class="built_in">local</span> | --global | --system&gt; --<span class="built_in">unset</span> &lt;name&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置提交记录中的用户信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name &lt;用户名&gt;</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email &lt;邮箱地址&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更改Git缓存区的大小</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果提交的内容较大，默认缓存较小，提交会失败</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">缓存大小单位：B，例如：524288000（500MB）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global http.postBuffer &lt;缓存大小&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用 git status/git diff 命令时以高亮或彩色方式显示改动状态</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global color.ui <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置可以缓存密码，默认缓存时间15分钟</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global credential.helper cache</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置密码的缓存时间</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">缓存时间单位：秒</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global credential.helper <span class="string">&#x27;cache --timeout=&lt;缓存时间&gt;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置长期存储密码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global credential.helper store</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义注解实现Aspect埋点</title>
      <link href="/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0Aspect%E5%9F%8B%E7%82%B9/"/>
      <url>/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0Aspect%E5%9F%8B%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>最近做一个项目,要求服务埋点,保存登录用户的所有操作记录并入库，方便系统报错的时候能够及时发现和重现，也能防止登录人员不遵守系统规范。一想到埋点，常见的方式就是使用AOP切面,自定义一些包或者类和方法进行AOP来记录操作记录。这里记录一下使用自定义注解埋点过程。</p><span id="more"></span><h4 id="新建SpringBoot项目"><a href="#新建SpringBoot项目" class="headerlink" title="新建SpringBoot项目"></a>新建SpringBoot项目</h4><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200813224659.png"></p><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.cancasp.annocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mizhuo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//注解被javadoc记录</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//表示注解只能作用于方法</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="comment">//注解的生命周期，可选择编译阶段、类加载阶段、运行阶段</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MizhuoLog &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="新建切面类"><a href="#新建切面类" class="headerlink" title="新建切面类"></a>新建切面类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.cancasp.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.cancasp.annocation.MizhuoLog;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mizhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2020/8/13 22:23 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(fun.mizhuo.cancasp.annocation.MizhuoLog)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint point)</span>&#123;</span><br><span class="line">        time = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> log</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointCut() &amp;&amp; @annotation(log)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterMethod</span><span class="params">(JoinPoint point, MizhuoLog log)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> point.getSignature().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) point.getArgs()[<span class="number">0</span>];</span><br><span class="line">        <span class="type">Long</span> <span class="variable">runTime</span> <span class="operator">=</span> (System.currentTimeMillis() - time) / <span class="number">1000</span>;</span><br><span class="line">        logger.info(<span class="string">&quot;方法名-&gt;&quot;</span> + method + <span class="string">&quot;,接收参数-&gt;&quot;</span> + str + <span class="string">&quot;,运行时间:&quot;</span> + runTime + <span class="string">&quot;s,方法描述:&quot;</span> + log.value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> log</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing(throwing = &quot;ex&quot;,value = &quot;pointCut() &amp;&amp; @annotation(log)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrow</span><span class="params">(JoinPoint point,Throwable ex, MizhuoLog log)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> point.getSignature().getName();</span><br><span class="line">        logger.info(<span class="string">&quot;方法名-&gt;&quot;</span> + method + <span class="string">&quot;,错误信息:&quot;</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="新建Controller"><a href="#新建Controller" class="headerlink" title="新建Controller"></a>新建Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.cancasp.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.cancasp.annocation.MizhuoLog;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mizhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2020/8/13 4:52 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CancaspController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MizhuoLog(&quot;MiZhuo&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/mizhuo/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mizhuo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mizhuo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MizhuoLog(&quot;MiZhuo2&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/mizhuo2/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mizhuo2</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mizhuo2&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问Controller"><a href="#访问Controller" class="headerlink" title="访问Controller"></a>访问Controller</h4><ul><li>访问mizhuo  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-08-13 22:56:44.153  INFO 3011 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#x27;dispatcherServlet&#x27;</span><br><span class="line">2020-08-13 22:56:44.153  INFO 3011 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#x27;dispatcherServlet&#x27;</span><br><span class="line">2020-08-13 22:56:44.163  INFO 3011 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms</span><br><span class="line">mizhuo</span><br><span class="line">2020-08-13 22:56:44.209  INFO 3011 --- [nio-8080-exec-1] fun.mizhuo.cancasp.aspect.LogAspect      : 方法名-&gt;mizhuo,接收参数-&gt;1,运行时间:0s,方法描述:MiZhuo</span><br></pre></td></tr></table></figure></li><li>访问mizhuo2  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mizhuo2</span><br><span class="line">2020-08-13 22:58:33.169  INFO 3011 --- [nio-8080-exec-4] fun.mizhuo.cancasp.aspect.LogAspect      : 方法名-&gt;mizhuo2,错误信息:/ by zero</span><br><span class="line">2020-08-13 22:58:33.184 ERROR 3011 --- [nio-8080-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArithmeticException: / by zero] with root cause</span><br></pre></td></tr></table></figure></li></ul><div class="note green icon-padding flat"><i class="note-icon fas fa-thumbs-up"></i><p>通过自定义注解的方式可以动态的实现方法的埋点，并且可以对方法进行描述，都可以记录并根据需要保存入库或者保存到日志文件中。</p></div>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB2解决方案【CLOB-&gt;String转换异常的问题】</title>
      <link href="/DB2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%90CLOB-%3EString%E8%BD%AC%E6%8D%A2%E5%BC%82%E5%B8%B8%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%91/"/>
      <url>/DB2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%90CLOB-%3EString%E8%BD%AC%E6%8D%A2%E5%BC%82%E5%B8%B8%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>今天敲代码遇到一个问题,由于需求需要存放很多筛选条件,后期要根据筛选条件去过滤数据,由于这个筛选器长度比较大,所以我们采取的方案就是数据库建两个字段,类型为CLOB,一个字段用来存放前端传来的JSON条件,另一个字段存放根据JSON拼接出来的SQL条件。但是后面取CLOB字段时,出现了类型转换异常,也就是CLOB无法转换为String,这里记录一下解决方案。</p><span id="more"></span><h3 id="DB2解决方案"><a href="#DB2解决方案" class="headerlink" title="DB2解决方案"></a>DB2解决方案</h3><h4 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h4><ul><li>在db2数据库中新建了一张表,字段分别为id、name、clob并往里面插了两条数据。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200806204109.png"></li><li>Mybatis中编写查询sql  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryTestData&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">SELECT id,name,clob FROM TEST.TABLE1 WHERE ID = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>调用方法查询并获取结果集  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Db2Service db2Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;001&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; map = db2Service.queryTestData(params);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打印出的结果集  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;CLOB=com.ibm.db2.jcc.am.oe<span class="meta">@c47f9dd</span>, ID=<span class="number">001</span>, NAME=mizhuo001&#125;</span><br></pre></td></tr></table></figure>  可以看出CLOB字段查出来是一个DB2的对象,直接转换成String会出现类型转换异常。</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>使用DB2 CAST强转  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryTestDataAfterCast&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    SELECT id,name,cast(clob as varchar(1024)) as clob FROM TEST.TABLE1 WHERE ID = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>调用方法查询并获取结果集  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Db2Service db2Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;001&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; map = db2Service.queryTestData(params);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    map = db2Service.queryTestDataAfterCast(params);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打印出的结果集  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;CLOB=com.ibm.db2.jcc.am.oe<span class="meta">@ac20c6d</span>, ID=<span class="number">001</span>, NAME=mizhuo001&#125;</span><br><span class="line">&#123;CLOB=这是一个CLOB字段, ID=<span class="number">001</span>, NAME=mizhuo001&#125;</span><br></pre></td></tr></table></figure></li><li><span style="color:red">2020年10月29日更新</span><br>  DB2也可以使用字符流的方式，读取方法和Oracle读取方法一样，只不过DB2使用的话要在配置数据库连接的地方加上<code>progressiveStreaming=2;</code>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driverClassName=com.ibm.db2.jcc.DB2Driver</span><br><span class="line">spring.datasource.url=jdbc:db2://127.0.0.1:50000/mydb;progressiveStreaming=2; </span><br></pre></td></tr></table></figure></li></ul><h3 id="Oracle解决方案"><a href="#Oracle解决方案" class="headerlink" title="Oracle解决方案"></a>Oracle解决方案</h3><h4 id="问题重现-1"><a href="#问题重现-1" class="headerlink" title="问题重现"></a>问题重现</h4><ul><li>在Oracle数据库中新建表,字段分别为id、name、clob并往里面插了两条数据。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200806220714.png"></li><li>Mybatis中编写查询sql  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryTestData&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">SELECT &quot;id&quot;,&quot;name&quot;,&quot;clob&quot; FROM DEMO WHERE &quot;id&quot; = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>调用方法查询并获取结果集  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OracleService oracleService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">oracle</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;001&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; map = oracleService.queryTestData(params);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打印出的结果集  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;clob=oracle.sql.CLOB@34908b0b, name=mizhuo, id=<span class="number">001</span>&#125;</span><br></pre></td></tr></table></figure>  可以看出CLOB字段查出来是一个Oracle的CLOB对象,直接转换成String会出现类型转换异常。</li></ul><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>使用Oracle CAST强转  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryTestDataAfterCast&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    SELECT &quot;id&quot;,&quot;name&quot;,cast(&quot;clob&quot; as VARCHAR2(2048)) as &quot;clob&quot; FROM DEMO WHERE &quot;id&quot; = &#x27;001&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用TO_CHAR进行类型转换  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryTestDataAfterCast&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    SELECT &quot;id&quot;,&quot;name&quot;,TO_CHAR(&quot;clob&quot;) as &quot;clob&quot; FROM DEMO WHERE &quot;id&quot; = &#x27;001&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用dbms_lob.substr()转换  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryTestDataAfterCast&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    SELECT &quot;id&quot;,&quot;name&quot;,dbms_lob.substr(&quot;clob&quot;,4000) as &quot;clob&quot; FROM DEMO WHERE &quot;id&quot; = &#x27;001&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>调用方法查询并获取结果集  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OracleService oracleService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">oracle</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String,Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;001&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; map = oracleService.queryTestData(params);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    map = oracleService.queryTestDataAfterCast(params);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打印出的结果集  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;clob=oracle.sql.CLOB@1b2bd3e6, name=mizhuo, id=<span class="number">001</span>&#125;</span><br><span class="line">&#123;clob=这是clob字段, name=mizhuo, id=<span class="number">001</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Java解决方案"><a href="#Java解决方案" class="headerlink" title="Java解决方案"></a>Java解决方案</h3><ul><li>数据流  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">oracle</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SQLException &#123;</span><br><span class="line">    Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;001&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; map = oracleService.queryTestData(params);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    <span class="type">String</span> <span class="variable">reString</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">Clob</span> <span class="variable">clob</span> <span class="operator">=</span> (Clob) map.get(<span class="string">&quot;clob&quot;</span>);</span><br><span class="line">    <span class="type">Reader</span> <span class="variable">is</span> <span class="operator">=</span> clob.getCharacterStream();<span class="comment">// 得到流</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(is);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="keyword">while</span> (s != <span class="literal">null</span>) &#123;<span class="comment">// 执行循环将字符串全部取出付值给 StringBuffer由StringBuffer转成STRING</span></span><br><span class="line">        sb.append(s);</span><br><span class="line">        s = br.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>打印结果  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;clob=oracle.sql.CLOB@6bd6b309, name=mizhuo, id=001&#125;</span><br><span class="line">这是clob字段</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装WebSphere</title>
      <link href="/Docker%E5%AE%89%E8%A3%85WebSphere/"/>
      <url>/Docker%E5%AE%89%E8%A3%85WebSphere/</url>
      
        <content type="html"><![CDATA[<p>作为在一名在银行工作的程序员，主要用到的Web容器就是WebSphere,这里主要记录一下Docker安装WebSphere,用与研究。</p><span id="more"></span><h4 id="查询镜像"><a href="#查询镜像" class="headerlink" title="查询镜像"></a>查询镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodembp  ~  docker search websphere</span><br><span class="line">NAME                                         DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">websphere-liberty                            Official IBM WebSphere Application Server fo…   261                 [OK]</span><br><span class="line">ibmcom/websphere-traditional                 Official IBM WebSphere Application Server tr…   161</span><br><span class="line">amanly/websphere_8_5_5                       This container has WebSphere installed.         28</span><br><span class="line">ibmcom/websphere-liberty                     WebSphere Liberty - Universal Base Images (x…   9</span><br><span class="line">ibmcom/websphere-portal                      IBM WebSphere Portal Express V9.0 CF16 Trial…   8</span><br><span class="line">vitrinh/websphere_8.5.5                      This container has WebSphere installed. buil…   7</span><br><span class="line">rodrigomiguele/websphere-mq                  Websphere MQ for development.                   6                                       [OK]</span><br><span class="line">possiblecr/websphere8.5                      Docker Websphere Container for DevOps Testing   1</span><br><span class="line">ibmoms/websphere-liberty                     WebSphere Liberty Application Server            1</span><br><span class="line">durumu/websphere-liberty                                                                     0</span><br><span class="line">ymatsushima/websphere-liberty-metrics-test                                                   0</span><br><span class="line">trollin/websphere-liberty                                                                    0</span><br><span class="line">s390x/websphere-liberty                      Official IBM WebSphere Application Server fo…   0</span><br><span class="line">i386/websphere-liberty                       Official IBM WebSphere Application Server fo…   0</span><br><span class="line">ppc64le/websphere-liberty                    Official IBM WebSphere Application Server fo…   0</span><br><span class="line">ymatsushima/websphere-liberty-custom                                                         0</span><br><span class="line">hi5san/websphere-liberty                     Experimental Docker images based on webspher…   0                                       [OK]</span><br><span class="line">chongxinman/websphere-sample                 for POC                                         0</span><br><span class="line">amd64/websphere-liberty                      Official IBM WebSphere Application Server fo…   0</span><br><span class="line">vandepol/websphere-liberty-s2i                                                               0</span><br><span class="line">arturdzm/websphere                                                                           0</span><br><span class="line">ca0g5960/websphere-liberty                                                                   0</span><br><span class="line">juniarti/websphere-liberty-issue125                                                          0</span><br><span class="line">smith2008/websphere-liberty                                                                  0</span><br><span class="line">sinenomine/websphere-liberty                 Based on the official IBM Websphere Applicat…   0</span><br></pre></td></tr></table></figure><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodembp  ~  docker pull amanly/websphere_8_5_5</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from amanly/websphere_8_5_5</span><br><span class="line">Image docker.io/amanly/websphere_8_5_5:latest uses outdated schema1 manifest format. Please upgrade to a schema2 image for better future compatibility. More information at https://docs.docker.com/registry/spec/deprecated-schema-v1/</span><br><span class="line">a3ed95caeb02: Pull complete</span><br><span class="line">e2d7300034e8: Pull complete</span><br><span class="line">c086ffafaed2: Pull complete</span><br><span class="line">Digest: sha256:1943287c7b28b986faddace4879c9e1a1c312757926447a2f9e68894a3570124</span><br><span class="line">Status: Downloaded newer image for amanly/websphere_8_5_5:latest</span><br><span class="line">docker.io/amanly/websphere_8_5_5:latest</span><br></pre></td></tr></table></figure><h4 id="启动容器并进入"><a href="#启动容器并进入" class="headerlink" title="启动容器并进入"></a>启动容器并进入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodeMacBook-Pro  ~/db2data </span><br><span class="line">docker run -i -t -p 28000:28000 -p 28001:28001 -v /Users/mizhuo/docker/websphere:/tmpfromhost amanly/websphere_8_5_5 bash</span><br><span class="line"></span><br><span class="line">bash-4.2#</span><br></pre></td></tr></table></figure><h4 id="启动was"><a href="#启动was" class="headerlink" title="启动was"></a>启动was</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">bash-4.2# cd /opt/IBM/WebSphere/AppServer/profiles/Dmgr01/bin/</span><br><span class="line">bash-4.2# ls</span><br><span class="line">EARExpander.sh clearClassCache.sheventUpgradeOracle.sh  launchWsadminListener.sh   revokeCertificate.sh       wrd-config.sh</span><br><span class="line">Extractor.sh clientConfig.sheventbucket.sh       linkCells.sh  runConfigActions.sh       wrd.sh</span><br><span class="line">GenPluginCfg.sh clientRAR.sheventcatalog.sh        logViewer.sh  schemagen.sh       ws_ant.sh</span><br><span class="line">Java2WSDL.sh clientUpgrade.sheventemit.sh       lrcmd.sh  sdk       wsadmin.sh</span><br><span class="line">JspBatchCompiler.sh collector.sheventpurge.sh       manageprofiles.sh  serverStatus.sh       wsappid.sh</span><br><span class="line">MirrorCell.sh compileXPath.sheventpurgepool.sh      managesdk.sh  setupCmdLine.sh       wsdb2gen.sh</span><br><span class="line">PropFilePasswordEncoder.sh compileXQuery.sheventquery.sh       migration.sh  showlog.sh       wsdbgen.sh</span><br><span class="line">ResponseFilePasswordEncoder.sh compileXSLT.shexecuteXPath.sh        mwServerStatus.sh  sibDBUpgrade.sh       wsdeploy.sh</span><br><span class="line">UDDIUserDefinedValueSet.sh convertScriptCompatibility.shexecuteXQuery.sh       mwSetupCmdLine.sh  sibDDLGenerator.sh       wsenhancer.sh</span><br><span class="line">VEUpgrade.sh convertlog.shexecuteXSLT.sh       osgiApplicationConsole.sh  startMWServer.sh       wsgen.sh</span><br><span class="line">WASPostUpgrade.sh createCertRequest.shfindEJBTimers.sh       osgiCfgInit.sh  startManager.sh       wsimport.sh</span><br><span class="line">WASPostUpgradeBLAHelper.sh createEJBStubs.shgenHistoryReport.sh    osgiConsole.sh  startServer.sh       wsjpaversion.sh</span><br><span class="line">WASPreUpgrade.sh createRemoteMigrJar.shgenVersionReport.sh    pluginCfgMerge.sh  stopMWServer.sh       wsmapping.sh</span><br><span class="line">WSBatchPackager.sh crossCellCGBCfg.shhadmgrAdd.sh       pluginMerge.sh  stopManager.sh       wsreversemapping.sh</span><br><span class="line">WSDL2Java.sh deployConsole.pyhadmgrRemove.sh        pmt.sh  stopServer.sh       wsschema.sh</span><br><span class="line">WSGrid.sh disableProvisioning.shhistoryInfo.sh       postinstall.sh  traceRequestFlowAnalyzer.sh  wve_encodePassword.sh</span><br><span class="line">WebSphereConnectJDBCDriverConversion.sh  dumpExtensionRegistry.shifixTool.sh       queryCertificate.sh  unaugmentProxyServer.sh      xd_hadmgrAdd.sh</span><br><span class="line">_nodeuninst.sh dumpNameSpace.shikeyman.sh       registerwstp.sh  unlinkCells.sh       xd_hadmgrRemove.sh</span><br><span class="line">augmentProxyServer.sh ejbdeploy.shisadc.sh       renameNode.sh  uteconfig.sh       xdaSetupCmdLine.sh</span><br><span class="line">backupConfig.sh enableProvisioning.shiscdeploy.sh       requestCertificate.sh  versionInfo.sh       xjc.sh</span><br><span class="line">cancelEJBTimers.sh endptEnabler.shivt.sh       restoreConfig.sh  wasprofile.sh</span><br><span class="line">ceiconfigreload.sh eventUpgradeDB2.shjobRecovery.sh       restoreJobManager.sh  wasservice.sh</span><br><span class="line">cleanupNode.sh eventUpgradeDB2ZOS.shlaunchClient.sh        retrieveSigners.sh  wct.sh</span><br><span class="line">bash-4.2# ./startManager.sh</span><br><span class="line">ADMU0116I: Tool information is being logged in file</span><br><span class="line">           /opt/IBM/WebSphere/AppServer/profiles/Dmgr01/logs/dmgr/startServer.log</span><br><span class="line">ADMU0128I: Starting tool with the Dmgr01 profile</span><br><span class="line">ADMU3100I: Reading configuration for server: dmgr</span><br><span class="line">ADMU3200I: Server launched. Waiting for initialization status.</span><br><span class="line">ADMU3000I: Server dmgr open for e-business; process id is 126</span><br></pre></td></tr></table></figure><h4 id="启动节点"><a href="#启动节点" class="headerlink" title="启动节点"></a>启动节点</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">bash-4.2# cd ../../AppSrv01/bin/</span><br><span class="line">bash-4.2# ls</span><br><span class="line">EARExpander.sh clearClassCache.sheventbucket.sh  linkCells.sh     revokeCertificate.sh  wct.sh</span><br><span class="line">Extractor.sh clientConfig.sheventcatalog.sh  logViewer.sh     runConfigActions.sh  wrd-config.sh</span><br><span class="line">GenPluginCfg.sh clientRAR.sheventemit.sh  lrcmd.sh     schemagen.sh  wrd.sh</span><br><span class="line">Java2WSDL.sh clientUpgrade.sheventpurge.sh  manageprofiles.sh     sdk  ws_ant.sh</span><br><span class="line">JspBatchCompiler.sh collector.sheventpurgepool.sh  managesdk.sh     serverStatus.sh  wsadmin.sh</span><br><span class="line">MirrorCell.sh compileXPath.sheventquery.sh  migration.sh     setupCmdLine.sh  wsappid.sh</span><br><span class="line">PropFilePasswordEncoder.sh compileXQuery.shexecuteXPath.sh  mwServerStatus.sh     showlog.sh  wsdb2gen.sh</span><br><span class="line">ResponseFilePasswordEncoder.sh compileXSLT.shexecuteXQuery.sh  mwSetupCmdLine.sh     sibDBUpgrade.sh  wsdbgen.sh</span><br><span class="line">UDDIUserDefinedValueSet.sh convertScriptCompatibility.shexecuteXSLT.sh  osgiApplicationConsole.sh  sibDDLGenerator.sh  wsdeploy.sh</span><br><span class="line">VEUpgrade.sh convertlog.shfindEJBTimers.sh  osgiCfgInit.sh     startMWServer.sh  wsenhancer.sh</span><br><span class="line">WASPostUpgrade.sh createCertRequest.shgenHistoryReport.sh  osgiConsole.sh     startNode.sh  wsgen.sh</span><br><span class="line">WASPostUpgradeBLAHelper.sh createEJBStubs.shgenVersionReport.sh  pluginCfgMerge.sh     startServer.sh  wsimport.sh</span><br><span class="line">WASPreUpgrade.sh createRemoteMigrJar.shhadmgrAdd.sh  pluginMerge.sh     stopMWServer.sh  wsjpaversion.sh</span><br><span class="line">WSBatchPackager.sh crossCellCGBCfg.shhadmgrRemove.sh  pmt.sh     stopNode.sh  wsmapping.sh</span><br><span class="line">WSDL2Java.sh disableProvisioning.shhistoryInfo.sh  postinstall.sh     stopServer.sh  wsreversemapping.sh</span><br><span class="line">WSGrid.sh dumpExtensionRegistry.shifixTool.sh  queryCertificate.sh     syncNode.sh  wsschema.sh</span><br><span class="line">WebSphereConnectJDBCDriverConversion.sh  dumpNameSpace.shikeyman.sh  registerwstp.sh     traceRequestFlowAnalyzer.sh  wve_encodePassword.sh</span><br><span class="line">_nodeuninst.sh ejbdeploy.shisadc.sh  removeNode.sh     unaugmentProxyServer.sh  xd_hadmgrAdd.sh</span><br><span class="line">addNode.sh enableProvisioning.shiscdeploy.sh  renameNode.sh     unlinkCells.sh  xd_hadmgrRemove.sh</span><br><span class="line">augmentProxyServer.sh endptEnabler.shivt.sh  requestCertificate.sh      uteconfig.sh  xdaSetupCmdLine.sh</span><br><span class="line">backupConfig.sh eventUpgradeDB2.shjobRecovery.sh  restoreConfig.sh     versionInfo.sh  xjc.sh</span><br><span class="line">cancelEJBTimers.sh eventUpgradeDB2ZOS.shlaunchClient.sh  restoreJobManager.sh     wasprofile.sh</span><br><span class="line">ceiconfigreload.sh eventUpgradeOracle.shlaunchWsadminListener.sh  retrieveSigners.sh     wasservice.sh</span><br><span class="line">bash-4.2# ./startNode.sh</span><br><span class="line">ADMU0116I: Tool information is being logged in file</span><br><span class="line">           /opt/IBM/WebSphere/AppServer/profiles/AppSrv01/logs/nodeagent/startServer.log</span><br><span class="line">ADMU0128I: Starting tool with the AppSrv01 profile</span><br><span class="line">ADMU3100I: Reading configuration for server: nodeagent</span><br><span class="line">ADMU3200I: Server launched. Waiting for initialization status.</span><br><span class="line">ADMU3000I: Server nodeagent open for e-business; process id is 424</span><br></pre></td></tr></table></figure><h4 id="浏览器访问控制端"><a href="#浏览器访问控制端" class="headerlink" title="浏览器访问控制端"></a>浏览器访问控制端</h4><p><code>https://localhost:28001/ibm/console/logon.jsp</code></p><ul><li>用户名:<code>wasadmin</code></li><li>密码:<code>wasadmin</code></li></ul><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200805215929.png"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Websphere </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装DB2</title>
      <link href="/Docker%E5%AE%89%E8%A3%85DB2/"/>
      <url>/Docker%E5%AE%89%E8%A3%85DB2/</url>
      
        <content type="html"><![CDATA[<p>之前讲过如何在Linux下安装db2,但相比之下,使用Docker来安装学习,更为方便,这里记录一下安装流程。</p><span id="more"></span><h4 id="查询镜像"><a href="#查询镜像" class="headerlink" title="查询镜像"></a>查询镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodembp  ~  docker search db2</span><br><span class="line">NAME                             DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">ibmcom/db2                       Db2 - The AI Database                           66</span><br><span class="line">angoca/db2-instance              OLD - 2. Prepares the environment to create …   18                                      [OK]</span><br><span class="line">angoca/db2-install               1. Downloads from IBM and installs DB2 Expre…   9                                       [OK]</span><br><span class="line">zongqiang/db2v10.5expc           DB2 v10.5.0.4 Express-C                         5</span><br><span class="line">ibmoms/db2express-c              DB2 Express-C                                   5</span><br><span class="line">datagrip/db2                     docker-env-db2                                  5                                       [OK]</span><br><span class="line">angoca/db2inst1                  2. DB2 instance (db2inst1) running without a…   4                                       [OK]</span><br><span class="line">angoca/db2-sample                4. DB2 sample database in db2inst1 instance …   4</span><br><span class="line">db260179/guacamole-combined      Dockerfile for Guacamole with embedded Maria…   2</span><br><span class="line">hmlandregistry/db2_developer_c   Mirror of DB2 developer. No other changes.      2</span><br><span class="line">taskana/db2                      Preconfigured db2 database(s) for taskana       2</span><br><span class="line">pheasanthunters/db2express-c      IBM DB2 Express-C                              2</span><br><span class="line">henriquemoreno/db2express-c      IBM db2express-c                                1</span><br><span class="line">cwds/db2                         This is a Docker image with DB2 Express-C in…   1</span><br><span class="line">ignatov/db2                      db2                                             1                                       [OK]</span><br><span class="line">butler54/db2-update              DB2 update test                                 0</span><br><span class="line">db2eventstore/icp-dev-jupyter                                                    0</span><br><span class="line">ibmcom/db2u.tools                                                                0</span><br><span class="line">vandepol/db2-cos                                                                 0</span><br><span class="line">ibmcom/db2u.auxiliary.auth                                                       0</span><br><span class="line">ibmcom/db2-amd64                 Db2 - The AI Database                           0</span><br><span class="line">eewswee/db2                      DB2 lab                                         0</span><br><span class="line">rodrigotsuru/db2-docker          DB2 Docker build                                0                                       [OK]</span><br><span class="line">maketechnology/db2               DB2 express with sample data                    0                                       [OK]</span><br><span class="line">ibmcom/db2u.instdb                                                               0</span><br></pre></td></tr></table></figure><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodeMacBook-Pro  ~/db2data  docker pull ibmcom/db2express-c</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from ibmcom/db2express-c</span><br><span class="line">a3ed95caeb02: Pull complete</span><br><span class="line">aeb4552c46f2: Pull complete</span><br><span class="line">67f42aa337c8: Pull complete</span><br><span class="line">36add9e32b7b: Pull complete</span><br><span class="line">cca79fe4efc9: Pull complete</span><br><span class="line">47257c26990b: Pull complete</span><br><span class="line">ffaad03725df: Pull complete</span><br><span class="line">12bf772a460f: Pull complete</span><br><span class="line">d7696ccb610d: Pull complete</span><br><span class="line">6cf81245c65d: Pull complete</span><br><span class="line">5dab63ce98e0: Pull complete</span><br><span class="line">91dd2d768d97: Pull complete</span><br><span class="line">e3aca141cf3e: Pull complete</span><br><span class="line">Digest: sha256:6217d60b20b58e08e5189f467cfb9a08f3472cf6c3a5e5d5d91900791c709a86</span><br><span class="line">Status: Downloaded newer image for ibmcom/db2express-c:latest</span><br><span class="line">docker.io/ibmcom/db2express-c:latest</span><br></pre></td></tr></table></figure><h4 id="启动DB2"><a href="#启动DB2" class="headerlink" title="启动DB2"></a>启动DB2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodeMacBook-Pro  ~/db2data  docker run -d -it -p50000:50000 -e DB2INST1_PASSWORD=root123 -e LICENSE=accept -v /Users/mizhuo/db2data:/db2data ibmcom/db2express-c-new:latest bash</span><br><span class="line">833f037a371895cba20b1ecea405797e5684c02f0843938decbc0d7afdf05c40</span><br></pre></td></tr></table></figure><ul><li><code>-p 50000:50000 映射50000端口到本地</code></li><li><code>DB2INST1是用户名,root123是密码</code></li><li><code>LICENSE=accept,表示接受各种不平等条约</code></li></ul><h4 id="提交并持久化"><a href="#提交并持久化" class="headerlink" title="提交并持久化"></a>提交并持久化</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">docker commit bee1d5a3d26f ibmcom/db2express-c-new</span><br><span class="line">docker save ibmcom/db2express-c-new&gt;/Users/mizhuo/ibm-db2express-c-new.tar</span><br></pre></td></tr></table></figure><h4 id="运行DB2"><a href="#运行DB2" class="headerlink" title="运行DB2"></a>运行DB2</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@833f037a3718 /]# su - db2inst1</span><br><span class="line">Last login: Wed Aug  5 07:57:15 UTC 2020 on pts/0</span><br><span class="line">[db2inst1@833f037a3718 ~]$ db2start</span><br><span class="line">libnuma: Warning: /sys not mounted or invalid. Assuming one node: No such file or directory</span><br><span class="line">SQL1063N  DB2START processing was successful.</span><br><span class="line">[db2inst1@833f037a3718 ~]$ db2 list db directory</span><br><span class="line"></span><br><span class="line"> System Database Directory</span><br><span class="line"></span><br><span class="line"> Number of entries in the directory = 1</span><br><span class="line"></span><br><span class="line">Database 1 entry:</span><br><span class="line"></span><br><span class="line"> Database alias                       = MYDB</span><br><span class="line"> Database name                        = MYDB</span><br><span class="line"> Local database directory             = /home/db2inst1</span><br><span class="line"> Database release level               = 10.00</span><br><span class="line"> Comment                              =</span><br><span class="line"> Directory entry type                 = Indirect</span><br><span class="line"> Catalog database partition number    = 0</span><br><span class="line"> Alternate server hostname            =</span><br><span class="line"> Alternate server port number         =</span><br><span class="line"></span><br><span class="line">[db2inst1@833f037a3718 ~]$ db2 connect to mydb</span><br><span class="line"></span><br><span class="line">   Database Connection Information</span><br><span class="line"></span><br><span class="line"> Database server        = DB2/LINUXX8664 10.5.5</span><br><span class="line"> SQL authorization ID   = DB2INST1</span><br><span class="line"> Local database alias   = MYDB</span><br><span class="line"></span><br><span class="line">[db2inst1@833f037a3718 ~]$</span><br></pre></td></tr></table></figure><ul><li><code>su - db2inst1</code> 切换用户</li><li><code>db2start</code>启动db2</li><li><code>db2 create db XXX</code> 创建数据库</li><li><code>db2 list db directory</code> 列出数据库</li><li><code>db2 &quot;create schema XXX&quot;</code> 创建数据库</li><li><code>db2 &quot;drop schema XXX restrict&quot;</code> 删除数据库</li></ul><h4 id="连接db2数据库"><a href="#连接db2数据库" class="headerlink" title="连接db2数据库"></a>连接db2数据库</h4><blockquote><p>我平常使用的是<code>DBeaver</code>,一款开源工具,功能十分强大。<a href="https://dbeaver.io/download/">小飞机去下载</a></p></blockquote><ul><li>创建新连接<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200803221616.png"></li><li>下载驱动文件<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200803221508.png"></li><li>填写连接设置<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200805164355.png"></li><li>完成连接<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200805164435.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> DB2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用支付宝沙箱支付</title>
      <link href="/%E4%BD%BF%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98/"/>
      <url>/%E4%BD%BF%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<p>今天写一个小项目，模拟支付的时候，直接跳转显示很不真实，于是想试试支付宝沙箱支付，可以模拟支付宝支付，看起来就真实许多了！于是记录一下。</p><span id="more"></span><h4 id="支付宝开放平台注册开发者"><a href="#支付宝开放平台注册开发者" class="headerlink" title="支付宝开放平台注册开发者"></a>支付宝开放平台注册开发者</h4><ul><li><a href="https://openhome.alipay.com/">小火箭前往支付宝开放平台</a></li><li>支付宝扫码登录后填写个人信息就可以注册成功了。</li></ul><h4 id="进入开发服务-研发服务"><a href="#进入开发服务-研发服务" class="headerlink" title="进入开发服务-研发服务"></a>进入开发服务-研发服务</h4><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200720212724.png"></p><h4 id="配置沙箱环境，设置参数"><a href="#配置沙箱环境，设置参数" class="headerlink" title="配置沙箱环境，设置参数"></a>配置沙箱环境，设置参数</h4><div class="note red icon-padding flat"><i class="note-icon fa fa-triangle-exclamation"></i><p>注意:为保证沙箱长期稳定，每周日中午12点至每周一中午12点沙箱环境进行维护，期间可能出现不可用，敬请谅解。</p></div><ul><li>设置秘钥<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200720213153.png"></li><li>下载支付宝秘钥生成器<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200720215804.png"></li><li>打开支付宝秘钥生成器生成秘钥和公钥<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200720220223.png"></li><li>将公钥设置保存到步骤一的秘钥中</li></ul><h4 id="设置应用网关"><a href="#设置应用网关" class="headerlink" title="设置应用网关"></a>设置应用网关</h4><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200720221748.png"></p><h4 id="加入maven依赖"><a href="#加入maven依赖" class="headerlink" title="加入maven依赖"></a>加入maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alipay-sdk-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.49.ALL<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写Controller代码"><a href="#编写Controller代码" class="headerlink" title="编写Controller代码"></a>编写Controller代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cinema.controller.pay;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alipay.api.AlipayApiException;</span><br><span class="line"><span class="keyword">import</span> com.alipay.api.AlipayClient;</span><br><span class="line"><span class="keyword">import</span> com.alipay.api.DefaultAlipayClient;</span><br><span class="line"><span class="keyword">import</span> com.alipay.api.internal.util.AlipaySignature;</span><br><span class="line"><span class="keyword">import</span> com.alipay.api.request.AlipayTradePagePayRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mizhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span>: 2020/7/21 9:25 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_ID</span> <span class="operator">=</span> <span class="string">&quot;AppId&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;应用私钥&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHARSET</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALIPAY_PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;支付宝公钥&quot;</span>;</span><br><span class="line">    <span class="comment">//这是沙箱接口路径,正式路径为https://openapi.alipay.com/gateway.do</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GATEWAY_URL</span> <span class="operator">=</span><span class="string">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FORMAT</span> <span class="operator">=</span> <span class="string">&quot;JSON&quot;</span>;</span><br><span class="line">    <span class="comment">//签名方式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SIGN_TYPE</span> <span class="operator">=</span> <span class="string">&quot;RSA2&quot;</span>;</span><br><span class="line">    <span class="comment">//支付宝异步通知路径,付款完毕后会异步调用本项目的方法,必须为公网地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NOTIFY_URL</span> <span class="operator">=</span> <span class="string">&quot;http://公网地址/notifyUrl&quot;</span>;</span><br><span class="line">    <span class="comment">//支付宝同步通知路径,也就是当付款完毕后跳转本项目的页面,可以不是公网地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RETURN_URL</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/returnUrl&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;alipay&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alipay</span><span class="params">(HttpServletResponse httpResponse)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        Random r=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//实例化客户端,填入所需参数</span></span><br><span class="line">        <span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(GATEWAY_URL, APP_ID, APP_PRIVATE_KEY, FORMAT, CHARSET, ALIPAY_PUBLIC_KEY, SIGN_TYPE);</span><br><span class="line">        <span class="type">AlipayTradePagePayRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradePagePayRequest</span>();</span><br><span class="line">        <span class="comment">//在公共参数中设置回跳和通知地址</span></span><br><span class="line">        request.setReturnUrl(RETURN_URL);</span><br><span class="line">        request.setNotifyUrl(NOTIFY_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//商户订单号，商户网站订单系统中唯一订单号，必填</span></span><br><span class="line">        <span class="comment">//生成随机Id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">out_trade_no</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//付款金额，必填</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">total_amount</span> <span class="operator">=</span>Integer.toString(<span class="number">888</span>);</span><br><span class="line">        <span class="comment">//订单名称，必填</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span><span class="string">&quot;电影票&quot;</span>;</span><br><span class="line">        <span class="comment">//商品描述，可空</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;尊敬的会员欢迎购买&lt;夏目友人帐&gt;电影票1张&quot;</span>;</span><br><span class="line">        request.setBizContent(<span class="string">&quot;&#123;\&quot;out_trade_no\&quot;:\&quot;&quot;</span>+ out_trade_no +<span class="string">&quot;\&quot;,&quot;</span></span><br><span class="line">                + <span class="string">&quot;\&quot;total_amount\&quot;:\&quot;&quot;</span>+ total_amount +<span class="string">&quot;\&quot;,&quot;</span></span><br><span class="line">                + <span class="string">&quot;\&quot;subject\&quot;:\&quot;&quot;</span>+ subject +<span class="string">&quot;\&quot;,&quot;</span></span><br><span class="line">                + <span class="string">&quot;\&quot;body\&quot;:\&quot;&quot;</span>+ body +<span class="string">&quot;\&quot;,&quot;</span></span><br><span class="line">                + <span class="string">&quot;\&quot;product_code\&quot;:\&quot;FAST_INSTANT_TRADE_PAY\&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">form</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            form = alipayClient.pageExecute(request).getBody(); <span class="comment">// 调用SDK生成表单</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        httpResponse.setContentType(<span class="string">&quot;text/html;charset=&quot;</span> + CHARSET);</span><br><span class="line">        httpResponse.getWriter().write(form);<span class="comment">// 直接将完整的表单html输出到页面</span></span><br><span class="line">        httpResponse.getWriter().flush();</span><br><span class="line">        httpResponse.getWriter().close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/returnUrl&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">returnUrl</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, AlipayApiException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=================================同步回调=====================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取支付宝GET过来反馈信息</span></span><br><span class="line">        Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        Map&lt;String, String[]&gt; requestParams = request.getParameterMap();</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;String&gt; iter = requestParams.keySet().iterator(); iter.hasNext();) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) iter.next();</span><br><span class="line">            String[] values = (String[]) requestParams.get(name);</span><br><span class="line">            <span class="type">String</span> <span class="variable">valueStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                valueStr = (i == values.length - <span class="number">1</span>) ? valueStr + values[i] : valueStr + values[i] + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 乱码解决，这段代码在出现乱码时使用</span></span><br><span class="line">            valueStr = <span class="keyword">new</span> <span class="title class_">String</span>(valueStr.getBytes(<span class="string">&quot;utf-8&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            params.put(name, valueStr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(params);<span class="comment">//查看参数都有哪些</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">signVerified</span> <span class="operator">=</span> AlipaySignature.rsaCheckV1(params, ALIPAY_PUBLIC_KEY, CHARSET, SIGN_TYPE); <span class="comment">// 调用SDK验证签名</span></span><br><span class="line">        <span class="comment">//验证签名通过</span></span><br><span class="line">        <span class="keyword">if</span>(signVerified)&#123;</span><br><span class="line">            <span class="comment">// 商户订单号</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">out_trade_no</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;out_trade_no&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 支付宝交易号</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">trade_no</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;trade_no&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 付款金额</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">total_amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(request.getParameter(<span class="string">&quot;total_amount&quot;</span>).getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;商户订单号=&quot;</span>+out_trade_no);</span><br><span class="line">            System.out.println(<span class="string">&quot;支付宝交易号=&quot;</span>+trade_no);</span><br><span class="line">            System.out.println(<span class="string">&quot;付款金额=&quot;</span>+total_amount);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;<span class="comment">//跳转付款成功页面</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;no&quot;</span>;<span class="comment">//跳转付款失败页面</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="访问支付url"><a href="#访问支付url" class="headerlink" title="访问支付url"></a>访问支付url</h4><ul><li>访问url<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200721220702.png"></li><li>支付的时候可以选择手机下载沙箱版的支付宝，登录沙箱账号<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200721220808.png"><br>但是只有Android版app，不支持IOS。所以我这里直接网页登录账号支付。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200721220947.png"><br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200721221028.png"></li><li>付款成功<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200721221054.png"></li></ul><h4 id="最后附上沙箱支付宝APP二维码"><a href="#最后附上沙箱支付宝APP二维码" class="headerlink" title="最后附上沙箱支付宝APP二维码"></a>最后附上沙箱支付宝APP二维码</h4><p><img src="https://zos.alipayobjects.com/rmsportal/CaXHDDXkdxikcZP.png"></p>]]></content>
      
      
      <categories>
          
          <category> 支付宝 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付宝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装RabbitMq后无法进入管理页面</title>
      <link href="/Docker%E5%AE%89%E8%A3%85RabbitMq%E5%90%8E%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2/"/>
      <url>/Docker%E5%AE%89%E8%A3%85RabbitMq%E5%90%8E%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>今天使用Docker安装RabbitMq后发现无法根据指定的15672的管理端端口进入管理页面，于是仔细检查了Docker命令和端口号,并重新安装了一遍,最后才发现问题，这里记录一下。</p><span id="more"></span><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>查阅<a href="https://www.rabbitmq.com/management.html">官网</a>文档后发现有这么一段话<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200607164113.png"><br>管理端是个插件，必须安装后才能使用!于是根据官方提示，安装插件，终于成功访问到了管理页面。  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodembp  ~  docker exec -i -t rabbitmq /bin/bash</span><br><span class="line">root@7aa7a089ca7b:/#  rabbitmq-plugins enable rabbitmq_management</span><br><span class="line">Enabling plugins on node rabbit@7aa7a089ca7b:</span><br><span class="line">rabbitmq_management</span><br><span class="line">The following plugins have been configured:</span><br><span class="line">rabbitmq_management</span><br><span class="line">rabbitmq_management_agent</span><br><span class="line">rabbitmq_web_dispatch</span><br><span class="line">Applying plugin configuration to rabbit@7aa7a089ca7b...</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">rabbitmq_management</span><br><span class="line">rabbitmq_management_agent</span><br><span class="line">rabbitmq_web_dispatch</span><br><span class="line"></span><br><span class="line">started 3 plugins.</span><br><span class="line">root@7aa7a089ca7b:/#</span><br></pre></td></tr></table></figure>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200607164350.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Mq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装MongoDB及MongoDB的基本使用</title>
      <link href="/Docker%E5%AE%89%E8%A3%85MongoDB%E5%8F%8AMongoDB%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/Docker%E5%AE%89%E8%A3%85MongoDB%E5%8F%8AMongoDB%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>最近在学习MongoDB,这里记录一下使用Docker安装MongoDB的流程以及一些简单使用。</p><span id="more"></span><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><ul><li><p>查找DockerHub上的MongoDB镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodembp  ~/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf  docker search mongoDb</span><br><span class="line">NAME                                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">mongo                               MongoDB document databases provide high avai…   6921                [OK]</span><br><span class="line">mongo-express                       Web-based MongoDB admin interface, written w…   705                 [OK]</span><br><span class="line">tutum/mongodb                       MongoDB Docker image – listens in port 27017…   230                                     [OK]</span><br><span class="line">bitnami/mongodb                     Bitnami MongoDB Docker Image                    120                                     [OK]</span><br><span class="line">frodenas/mongodb                    A Docker Image for MongoDB                      18                                      [OK]</span><br><span class="line">centos/mongodb-32-centos7           MongoDB NoSQL database server                   8</span><br><span class="line">webhippie/mongodb                   Docker images for MongoDB                       7                                       [OK]</span><br><span class="line">centos/mongodb-26-centos7           MongoDB NoSQL database server                   5</span><br><span class="line">eses/mongodb_exporter               mongodb exporter for prometheus                 5                                       [OK]</span><br><span class="line">centos/mongodb-36-centos7           MongoDB NoSQL database server                   5</span><br><span class="line">quadstingray/mongodb                MongoDB with Memory and User Settings           3                                       [OK]</span><br><span class="line">neowaylabs/mongodb-mms-agent        This Docker image with MongoDB Monitoring Ag…   3                                       [OK]</span><br><span class="line">centos/mongodb-34-centos7           MongoDB NoSQL database server                   3</span><br><span class="line">ssalaues/mongodb-exporter           MongoDB Replicaset Prometheus Compatible Met…   2</span><br><span class="line">tozd/mongodb                        Base image for MongoDB server.                  2                                       [OK]</span><br><span class="line">zadki3l/mongodb-oplog               Simple mongodb image with single-node replic…   2                                       [OK]</span><br><span class="line">mongodbsap/mongodbdocker                                                            2</span><br><span class="line">ansibleplaybookbundle/mongodb-apb   An APB to deploy MongoDB.                       1                                       [OK]</span><br><span class="line">bitnami/mongodb-exporter                                                            1</span><br><span class="line">xogroup/mongodb_backup_gdrive       Docker image to create a MongoDB database ba…   1                                       [OK]</span><br><span class="line">openshift/mongodb-24-centos7        DEPRECATED: A Centos7 based MongoDB v2.4 ima…   1</span><br><span class="line">targetprocess/mongodb_exporter      MongoDB exporter for prometheus                 0                                       [OK]</span><br><span class="line">gebele/mongodb                      mongodb                                         0                                       [OK]</span><br><span class="line">phenompeople/mongodb                 MongoDB is an open-source, document databas…   0                                       [OK]</span><br><span class="line">astronomerio/mongodb-source         Mongodb source.                                 0                                       [OK]</span><br></pre></td></tr></table></figure></li><li><p>拉取MongoDB镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodembp  ~/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf  docker pull mongo</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mongo</span><br><span class="line">23884877105a: Pull complete</span><br><span class="line">bc38caa0f5b9: Pull complete</span><br><span class="line">2910811b6c42: Pull complete</span><br><span class="line">36505266dcc6: Pull complete</span><br><span class="line">a4d269900d94: Pull complete</span><br><span class="line">5e2526abb80a: Pull complete</span><br><span class="line">d3eece1f39ec: Pull complete</span><br><span class="line">358ed78d3204: Pull complete</span><br><span class="line">1a878b8604ae: Pull complete</span><br><span class="line">978c572f0440: Pull complete</span><br><span class="line">35a600ffcf6a: Pull complete</span><br><span class="line">fa9f812cdfe6: Pull complete</span><br><span class="line">7a8109e27110: Pull complete</span><br><span class="line">Digest: sha256:be8d903a68997dd63f64479004a7eeb4f0674dde7ab3cbd1145e5658da3a817b</span><br><span class="line">Status: Downloaded newer image for mongo:latest</span><br><span class="line">docker.io/library/mongo:latest</span><br></pre></td></tr></table></figure></li><li><p>下载完成后查看镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodembp  ~/.m2/repository/org/springframework/boot/spring-boot-starter-thymeleaf  docker images mongo</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mongo               latest              66c68b650ad4        9 days ago          388MB</span><br></pre></td></tr></table></figure></li></ul><h4 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a>启动MongoDB</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodembp  ~/WorkPlace/MongoDB  docker run -p 27017:27017 -v $PWD/db:/data/db -d mongo </span><br><span class="line">5db622c8654fa748f2c5f166302c5a8a520b5ed66963d1f1aa6ceaade35ac475</span><br><span class="line">mizhuo@mizhuodembp  ~/WorkPlace/MongoDB  docker rename amazing_buck mongoDB </span><br><span class="line">mizhuo@mizhuodembp  ~/WorkPlace/MongoDB  docker start mongoDB</span><br><span class="line">mongoDB</span><br></pre></td></tr></table></figure><blockquote><p>开启验证模式命令后面要加上–auth</p></blockquote><ul><li>命令说明<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-p 27017:27017 :将容器的27017 端口映射到主机的27017 端口</span><br><span class="line">-v $PWD/db:/data/db :将主机中当前目录下的db挂载到容器的/data/db，作为mongo数据存储目录</span><br></pre></td></tr></table></figure></li><li>使用navicat连接MongoDB成功<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200605153927.png"></li></ul><h4 id="MongoDB的基本使用"><a href="#MongoDB的基本使用" class="headerlink" title="MongoDB的基本使用"></a>MongoDB的基本使用</h4><ul><li>使用命令行<code>docker exec -it mongoDB /bin/bash</code>进入到mongoDB的容器内部,然后使用<code>mongo</code>进入操作行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mizhuo@mizhuodembp  ~/WorkPlace/MongoDB/db  docker exec -it mongoDB /bin/bash</span><br><span class="line">root@5db622c8654f:/# mongo</span><br><span class="line">MongoDB shell version v4.2.7</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;10d943a6-85ba-4f9f-8712-73cc8c1e62d3&quot;) &#125;</span><br><span class="line">MongoDB server version: 4.2.7</span><br><span class="line">Server has startup warnings:</span><br><span class="line">2020-06-05T08:18:08.177+0000 I  CONTROL  [initandlisten]</span><br><span class="line">2020-06-05T08:18:08.177+0000 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</span><br><span class="line">2020-06-05T08:18:08.177+0000 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class="line">2020-06-05T08:18:08.177+0000 I  CONTROL  [initandlisten]</span><br><span class="line">---</span><br><span class="line">Enable MongoDB&#x27;s free cloud-based monitoring service, which will then receive and display</span><br><span class="line">metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span><br><span class="line"></span><br><span class="line">The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span><br><span class="line">and anyone you share the URL with. MongoDB may use this information to make product</span><br><span class="line">improvements and to suggest MongoDB products and deployment options to you.</span><br><span class="line"></span><br><span class="line">To enable free monitoring, run the following command: db.enableFreeMonitoring()</span><br><span class="line">To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li>创建用户<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.createUser(&#123;user:&quot;mizhuo&quot;,pwd:&quot;123456&quot;,roles:[&#123;role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;&#125;]&#125;)</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">&quot;user&quot; : &quot;mizhuo&quot;,</span><br><span class="line">&quot;roles&quot; : [</span><br><span class="line">&#123;</span><br><span class="line">&quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span><br><span class="line">&quot;db&quot; : &quot;admin&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.auth(&quot;mizhuo&quot;,&quot;123456&quot;)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB2解决方案【清空表数据】</title>
      <link href="/DB2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%90%E6%B8%85%E7%A9%BA%E8%A1%A8%E6%95%B0%E6%8D%AE%E3%80%91/"/>
      <url>/DB2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%90%E6%B8%85%E7%A9%BA%E8%A1%A8%E6%95%B0%E6%8D%AE%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>今天对DB2数据进行刷新操作，表数据千万左右，因为要从其它表中重新汇数据，所以我新建了一张临时表，但是中间逻辑问题，我直接使用了<code>DELETE FROM XXX</code>来进行清表操作，结果光删除数据就花费了半个小时,于是整理了一下时间慢的原因和其它几种清表方式。</p><span id="more"></span><h4 id="清空表数据的几种方式"><a href="#清空表数据的几种方式" class="headerlink" title="清空表数据的几种方式"></a>清空表数据的几种方式</h4><ul><li>使用<code>DELETE FROM XXX</code><br>这种方式因为不带where条件，所以可以清除表中所有的数据，表数据量小的话可以使用这种方式没什么问题，但是如果表数据量大的话就不要使用这种方式了，因为这种方式虽然能达到清除表数据的效果，但是这个操作会记录事务日志，因此执行速度极慢。而且可能会产生日志空间不足的情况。如果中途取消操作，还会进行回滚操作。</li><li>使用<code>Import</code>或者<code>Load</code>命令<ul><li><code>Import</code>: 使用<code>Import from /dev/null of del replace into XXX</code></li><li><code>Load</code>: 使用<code>Load from /dev/null of del replace into XXX</code><br>这种方式因为<code>replace</code>导入方式首先会将表中所有数据清空，然后<code>IMPORT</code>&#x2F;<code>LOAD</code>又向表中导入了空数据，从而实现了数据的清除操作。</li></ul></li><li>使用<code>NOT LOGGED INITIALLY</code><ul><li><code>ALTER TABLE xxx ACTIVATE NOT LOGGED INITIALLY WITH EMPTY TABLE</code><br>这种方法在整个删除操作中不会记日志，因此执行速度是几种方法中最快的一种，但删除的数据是不可恢复的。</li></ul></li><li>删除表重建<br>最后一种方法也是最暴力的一种方法，使用<code>db2look</code>将表结构dll导出，然后使用<code>drop</code>命令将整表删除，最后重新新建表结构。我们在生产环境的回退操作就是这样的，先备份表结构和表数据，如果升级失败回退，则删除表，重建表结构，最后导入备份的数据。</li></ul><p><strong>以上方法都可以对表进行清空，但是如果只是要实现TRUNCATE的效果，推荐第二种和第三种方式</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB2解决方案【导入数据中文乱码】</title>
      <link href="/DB2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%90%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E3%80%91/"/>
      <url>/DB2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%90%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>今天使用DB2导入数据的时候出现了中文乱码,这里记录一下解决方案。</p><span id="more"></span><h4 id="正常加载数据"><a href="#正常加载数据" class="headerlink" title="正常加载数据"></a>正常加载数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2 &quot;load from XXX.del of del modified by delprioritychar replace into XXX.XXX&quot;</span><br></pre></td></tr></table></figure><p>其中<code>modified by delprioritychar</code>是为了防止数据库记录中存在换行符导致数据无法装入的情况。<code>replace</code>代表直接替换原表，先对表做<code>Truncate</code>操作。使用<code>insert</code>代表在原表的基础上<code>Append</code>。</p><p>但是按照此方法导入出现了中文乱码的问题。翻阅资料发现需要指定数据库编码格式,具体操作如下:</p><ul><li>使用<code>db2 get db cfg for xxxdb|grep -i code</code>可以查看数据库编码格式。</li><li>1208对应UTF-8编码集,1386对应GBK编码集,819对应ISO8859-1</li><li>于是使用<code>modified by codepage = 1208</code>可以有效去除中文乱码  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db2 &quot;load from XXX.del of del modified by codepage = 1208 replace into XXX.XXX&quot;</span><br></pre></td></tr></table></figure></li></ul><p>同理导出数据的时候也可以指定编码集格式进行导出。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目从MySQL迁移到Oracle</title>
      <link href="/%E9%A1%B9%E7%9B%AE%E4%BB%8EMySQL%E8%BF%81%E7%A7%BB%E5%88%B0Oracle/"/>
      <url>/%E9%A1%B9%E7%9B%AE%E4%BB%8EMySQL%E8%BF%81%E7%A7%BB%E5%88%B0Oracle/</url>
      
        <content type="html"><![CDATA[<p>最近将一个项目,从MySQL数据库迁移到Oracle数据库,其中遇到几个问题,这里记录一下。</p><span id="more"></span><h4 id="数据库差异"><a href="#数据库差异" class="headerlink" title="数据库差异"></a>数据库差异</h4><ul><li><p>自动增长</p><ul><li>在Mysql中,提供了<code>AUTO_INCREMENT</code>实现自动递增。</li><li>在Oracle中则没有这个概念,但Oracle中提供了序列的概念,用户可以新建一个<code>SEQUENCE</code>自增序列和一个触发器来获取序列号实现字段自动增长。  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">自增序列:</span><br><span class="line"><span class="keyword">CREATE</span> SEQUENCE &quot;DBNAME&quot;.&quot;SEQ_NAME&quot; MINVALUE <span class="number">1</span> MAXVALUE <span class="number">9999999999999999999999999999</span> INCREMENT <span class="keyword">BY</span> <span class="number">1</span> NOCACHE;</span><br><span class="line">触发器:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> &quot;DBNAME&quot;.&quot;TRIGGER_NAME&quot; BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> &quot;DBNAME&quot;.&quot;TABLENAME&quot; <span class="keyword">REFERENCING</span> <span class="keyword">OLD</span> <span class="keyword">AS</span> &quot;OLD&quot; <span class="keyword">NEW</span> <span class="keyword">AS</span> &quot;NEW&quot; <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">WHEN</span> (new.待增长的字段名 <span class="keyword">is</span> <span class="keyword">null</span>) </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> SEQ_NAME.NEXTVAL <span class="keyword">INTO</span> :NEW.待增长的字段名 <span class="keyword">FROM</span> DUAL;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数据类型差异</p><table><thead><tr><th>数据类型</th><th>Mysql</th><th>Oracle</th></tr></thead><tbody><tr><td>字符串</td><td>varchar[0-65535]</td><td>varchar2[0-4000]</td></tr><tr><td>整数</td><td>int</td><td>number(p,s) p为整数位,s为小数位</td></tr><tr><td>浮点数</td><td>float</td><td>oracle10g前无float,使用number代替,后面出现的float等实际上也是number实现</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table></li><li><p>事务提交</p><ul><li>Mysql中事务默认会自动提交。如需关闭自动提交，则需执行命令<code>Set autocommit = 0</code></li><li>Oracle中事务默认不自动提交，需要用户手动提交。如需自动提交,执行命令<code>SET AUTOCOMMIT ON</code></li></ul></li><li><p>建库建表</p><ul><li>Mysql中直接新建数据库,在数据库上新建表就可以了。</li><li>Oracle 则较为复杂，具体流程如下:<ul><li>创建表空间:  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE DEMO</span><br><span class="line">DATAFILE <span class="string">&#x27;文件路径\demo.dbf&#x27;</span></span><br><span class="line">SIZE <span class="number">200</span>M</span><br><span class="line">AUTOEXTEND <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure></li><li>创建用户:  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;USERNAME&#x27;</span></span><br><span class="line">IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;PASSWORD&#x27;</span></span><br><span class="line"><span class="keyword">DEFAULT</span> TABLESPACE DEMO</span><br><span class="line">TEMPORARY TABLESPACE temp;</span><br></pre></td></tr></table></figure></li><li>给用户赋予权限:  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> SESSION,<span class="keyword">CREATE</span> <span class="keyword">TABLE</span>,<span class="keyword">CREATE</span> <span class="keyword">VIEW</span>,<span class="keyword">CREATE</span> SEQUENCE,UNLIMITED TABLESPACE <span class="keyword">TO</span> USERNAME; </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">TO</span> USERNAME; </span><br><span class="line"><span class="keyword">GRANT</span> RESOURCE <span class="keyword">TO</span> USERNAME; </span><br><span class="line"><span class="keyword">GRANT</span> DBA <span class="keyword">TO</span> USERNAME;</span><br></pre></td></tr></table></figure>  最后使用新建的用户连接数据库,就可以进行正常的建表操作了。</li></ul></li></ul></li></ul><h4 id="JDBC连接"><a href="#JDBC连接" class="headerlink" title="JDBC连接"></a>JDBC连接</h4><ul><li>根据MySQL和Oracle的差异，将数据从MySQL导入到Oracle中，然后修改项目的JDBC连接。  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jdbc.user=root</span></span><br><span class="line"><span class="comment">#jdbc.password=123456</span></span><br><span class="line"><span class="comment">#jdbc.driverClass=com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#jdbc.jdbcUrl=jdbc:mysql://localhost:3306/demo?useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="comment">#jdbc.testConnectionOnCheckout=true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jdbc.user</span>=<span class="string">demo</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">jdbc.driverClass</span>=<span class="string">oracle.jdbc.OracleDriver</span></span><br><span class="line"><span class="attr">jdbc.jdbcUrl</span>=<span class="string">jdbc:oracle:thin:@localhost:1521:xe</span></span><br><span class="line"><span class="attr">jdbc.testConnectionOnCheckout</span>=<span class="string">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>到这里是不是觉得就可以成功运行了？但是并没有！！！控制台报了以下错误:  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: java.sql.SQLException: Connections could not be acquired from the underlying database!</span><br><span class="line"></span><br></pre></td></tr></table></figure>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200528174136.png"></li><li>查了很多的资料，试过很多方法才发现是tomcat没有Oracle的驱动导致的。于是将ojdbc包放入tomcat的lib下面。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200528174958.png"></li><li>重新启动项目，完美运行。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200528174655.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo从Windows迁移到MacOS</title>
      <link href="/Hexo%E4%BB%8EWindows%E8%BF%81%E7%A7%BB%E5%88%B0Mac/"/>
      <url>/Hexo%E4%BB%8EWindows%E8%BF%81%E7%A7%BB%E5%88%B0Mac/</url>
      
        <content type="html"><![CDATA[<p>最近换Mac了，所有环境和项目都要转移到Mac上，在迁移Hexo时出了点小问题。这里记录一下。</p><span id="more"></span><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><ul><li>在Mac上安装node和git，这个不用说。用brew两条命令就OK了。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br><span class="line">brew install git</span><br></pre></td></tr></table></figure></li><li>配置git  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname”</span><br><span class="line">git config --global user.email youremail@example.com</span><br></pre></td></tr></table></figure></li><li>配置npm淘宝镜像(加快速度，可省略)  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li>使用cnpm  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li>生成ssh密钥，关联github、coding<ul><li>查看是否存在：cd ~&#x2F;.ssh</li><li>生成ssh：ssh-keygen -t rsa -C “<a href="mailto:&#121;&#111;&#117;&#114;&#101;&#x6d;&#97;&#105;&#x6c;&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#108;&#x65;&#46;&#99;&#111;&#x6d;">&#121;&#111;&#117;&#114;&#101;&#x6d;&#97;&#105;&#x6c;&#64;&#x65;&#120;&#x61;&#x6d;&#x70;&#108;&#x65;&#46;&#99;&#111;&#x6d;</a>“</li><li>输入文件名和密码后打开.pub文件，将公钥配置到github、coding上。</li><li>测试是否配置成功：ssh <a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;">&#103;&#105;&#x74;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#98;&#46;&#x63;&#x6f;&#x6d;</a><br>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200111180248.png"></li></ul></li></ul><h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><ul><li>安装hexo  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo </span><br></pre></td></tr></table></figure></li><li>新建目录并初始化Hexo  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir Hexo</span><br><span class="line">cd Hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li>替换文件<br>  将原Hexo中的_config.yml, scaffolds, source, themes替换到本地新建的目录中。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>  这里如果报TypeError [ERR_INVALID_URL]: Invalid URL:<a href="http://at/">http://at</a> onParseError (internal&#x2F;url.js:257:9)的错。<br>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20200111174407.png"><br>  就将原来的package.json和package-lock.json也替换过来。把node_modules删除,重新npm install就好了。</li></ul><p><strong>终于又可以开心的写博客了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven和Gradle</title>
      <link href="/Maven%E5%92%8CGradle/"/>
      <url>/Maven%E5%92%8CGradle/</url>
      
        <content type="html"><![CDATA[<p>最近网上经常看到项目使用的是Gradle来进行依赖管理，曾经红极一时的Maven也开始慢慢失宠了，更古老的Ant基本上是不见踪影了，而Gradle的发展则是如日中天。于是来深入了解一下Gradle，顺便和Maven进行简单的比较。</p><span id="more"></span><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><p>自从接触Java开始，Maven就已经深受学校和企业等市场的信赖，所以很多人对Maven都是相对比较了解的。记得刚学习Java的时候，都是一个个Jar包自己去手动导入，经常会出现导入了同一个jar包的不同版本，导致项目出错，懵懵懂懂的还不知道问题出在哪。自从接触到了Maven，几个依赖一敲，直接搞定，省事不少。<br>使用Maven构建项目后,使用<code>groupId</code>、<code>artifactId</code>、<code>version</code>组成一个唯一的坐标从远程仓库或者我们创建的本地仓库来找到这个jar包并进行依赖。当version省略时，默认获取最新版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">5.1</span><span class="number">.21</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在Maven中，有6中Scope,分别是<code>complie(默认)、provided、runtime、test、system、import</code></p><h4 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h4><p>Gradle是基于Ant和Maven概念的项目自动化构建开源工具，也可以说是Maven的一个升级版，Maven能做的事情，Gradle都能做。而Gradle能做的事情，Maven不一定能做。因为Gradle是在Maven基础上构建了，所以也沿用了许多Maven的一些特性。但在一些地方进行了改进，变得更加简洁。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span>)</span><br><span class="line">    testCompile(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Gradle中，只有4中Scope，分别是<code>compile、runtime、testCompile、testRuntime</code>。但在Gradle中，可以使用+号来实现版本管理，能够更有效的解决依赖冲突。而且Gradle有一个<code>Task</code>的概念，使用Task功能，可以帮助我们更方便的完成一些任务。</p><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><p>Maven指定了一套项目目录结构作为标准的java项目结构，Gradle也沿用了这一标准的目录结构。如果在Gradle项目中使用了Maven项目结构的话，在Gradle中无需进行多余的配置，只需在文件中包括apply plugin:’java’，系统会自动识别source、resource、test source、test resource等相应资源。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>相对于Maven来说，Gradle的主要优势就是去除了繁重的XML，现在使用的很多的技术都已经开始抛弃XML了，开始采用yml、json等等。而Gradle采用了Groovy语言进行构建。其次，Gradle中有一个概念叫做Task，使用Task来完成需求，会变得非常简单。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue跨域问题</title>
      <link href="/Vue%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/Vue%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近在学习过程中,遇到了Vue的跨域问题,在这里记录一下解决方案。</p><span id="more"></span><h4 id="开发环境跨域问题"><a href="#开发环境跨域问题" class="headerlink" title="开发环境跨域问题"></a>开发环境跨域问题</h4><p>开发环境跨域问题解决方式比较简单,打开项目目录下<code>config/index.js</code>找到<code>proxyTable</code>,添加下面的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxyTable</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://XXX.XXX.XXX:XXXX&#x27;</span>,<span class="comment">//设置你调用的接口域名和端口号 别忘了加http</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,    <span class="comment">//这里true表示实现跨域</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>配置完之后，发送请求时在前面带上&#x2F;api,如本来要访问的地址是<code>http://XXX.XXX.XXX:XXXX/login</code>,现在发送请求时的url就填写为<code>/api/login</code>。就可以进行跨域请求了。</p><h4 id="线上环境跨域问题"><a href="#线上环境跨域问题" class="headerlink" title="线上环境跨域问题"></a>线上环境跨域问题</h4><p>开发完之后,将系统编译,将dist文件部署到服务器后,请求时又出现了跨域问题。最后使用了Nginx代理解决了这个跨域问题。具体操作如下:<br>安装完Nginx后,进入安装目录下<code>/conf</code>修改nginx配置文件,添加下列代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line">    # 把 /api 路径下的请求转发给真正的后端服务器</span><br><span class="line">    proxy_set_header   Host             $host;</span><br><span class="line">    proxy_set_header   x-forwarded-for  $remote_addr;</span><br><span class="line">    proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">    proxy_pass http://XXX.XXX.XXX:XXXX/;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启nginx就可以继续跨域请求了。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门系列【四】</title>
      <link href="/Vue%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E3%80%90%E5%9B%9B%E3%80%91/"/>
      <url>/Vue%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E3%80%90%E5%9B%9B%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>经过前面的讲解,我们对Vue有了一个大致的了解,现在来实践一下,我们采用Vue+ElementUi来编写项目。</p><span id="more"></span><p>脚手架的安装这里就不讲解了,可以浏览前面的博客。希望对你有帮助!</p><h4 id="前端项目环境搭建"><a href="#前端项目环境搭建" class="headerlink" title="前端项目环境搭建"></a>前端项目环境搭建</h4><ul><li>安装Element-UI<ul><li>安装命令:<code>npm install element-ui -s</code></li><li>引入组件: <code>import ElementUI from &#39;element-ui&#39;</code></li><li>引入样式Css:<code>import &#39;element-ui/lib/theme-chalk/index.css&#39;</code></li><li>使用组件:Vue.use(ElementUI)</li></ul></li><li>安装axios<ul><li>安装命令:<code>npm install axios -s</code></li><li>引入组件:<code>import axios from &#39;axios&#39;</code></li><li>使用组件:Vue.prototype.$axios &#x3D; axios</li></ul></li><li>安装Vue的状态管理Vuex<ul><li>安装命令:<code>npm install vuex -s</code></li><li>引入组件:<code>import Vuex from &#39;vuex&#39;</code></li><li>使用组件:<code>Vue.use(Vuex)</code></li></ul></li><li>安装日期处理类库moment.js<ul><li>安装命令:<code>npm install moment -s</code></li><li>引入组件:<code>import moment from &#39;moment&#39;</code></li></ul></li><li>安装NProgress进度条<ul><li>安装命令:<code>npm install nprogress -s</code></li><li>引入组件:<code>import NProgress from &#39;nprogress&#39;</code></li><li>引入样式css:<code>import &#39;nprogress/nprogress.css&#39;</code></li><li>使用组件:<code>NProgress.start(); NProgress.done();</code></li></ul></li></ul><h4 id="设置导航守卫"><a href="#设置导航守卫" class="headerlink" title="设置导航守卫"></a>设置导航守卫</h4><p>用于路由间的跳转时对权限做控制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NProgress</span> <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span> <span class="comment">// Progress 进度条</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span><span class="comment">// Progress 进度条样式</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;getToken&#125; <span class="keyword">from</span> <span class="string">&quot;./utils/auth&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>]; <span class="comment">// 不重定向白名单</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">start</span>();</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getToken</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>() <span class="comment">// if current page is dashboard will not triggerafterEach hook, so manually handle it</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">roles</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="string">&#x27;GetInfo&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">// 拉取用户信息</span></span><br><span class="line">          <span class="title function_">next</span>()</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          store.<span class="title function_">dispatch</span>(<span class="string">&#x27;FedLogOut&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">Message</span>.<span class="title function_">error</span>(err || <span class="string">&#x27;Verification failed, please login again&#x27;</span>);</span><br><span class="line">            <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>);</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">done</span>() <span class="comment">// 结束Progress</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="axios过滤器"><a href="#axios过滤器" class="headerlink" title="axios过滤器"></a>axios过滤器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Message</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;api&#x27;</span>,<span class="comment">//process.env.BASE_API, // api的base_url</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">15000</span> <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">token</span>) &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="title function_">getToken</span>() <span class="comment">// 让每个请求携带自定义token 请根据实际情况自行修改</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123;<span class="attr">message</span>: <span class="string">&#x27;请求超时!&#x27;</span>&#125;);</span><br><span class="line">  <span class="comment">// return Promise.resolve(err);</span></span><br><span class="line">&#125;);</span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">status</span> &amp;&amp; response.<span class="property">status</span> == <span class="number">200</span> &amp;&amp; response.<span class="property">data</span>.<span class="property">status</span> == <span class="number">500</span>) &#123;</span><br><span class="line">    <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123;<span class="attr">message</span>: response.<span class="property">data</span>.<span class="property">msg</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">msg</span>) &#123;</span><br><span class="line">    <span class="title class_">Message</span>.<span class="title function_">success</span>(&#123;<span class="attr">message</span>: response.<span class="property">data</span>.<span class="property">msg</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">response</span>.<span class="property">status</span> == <span class="number">504</span> || err.<span class="property">response</span>.<span class="property">status</span> == <span class="number">404</span>) &#123;</span><br><span class="line">    <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123;<span class="attr">message</span>: <span class="string">&#x27;连接服务器失败,请稍后重试!&#x27;</span>&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err.<span class="property">response</span>.<span class="property">status</span> == <span class="number">403</span>) &#123;</span><br><span class="line">    <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123;<span class="attr">message</span>: <span class="string">&#x27;权限不足,请联系管理员!&#x27;</span>&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (err.<span class="property">response</span>.<span class="property">status</span> == <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123;<span class="attr">message</span>: err.<span class="property">response</span>.<span class="property">data</span>.<span class="property">msg</span>&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">response</span>.<span class="property">data</span>.<span class="property">msg</span>) &#123;</span><br><span class="line">      <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123;<span class="attr">message</span>: err.<span class="property">response</span>.<span class="property">data</span>.<span class="property">msg</span>&#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123;<span class="attr">message</span>: <span class="string">&#x27;未知错误!&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return Promise.resolve(err);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><h4 id="登陆页面实现"><a href="#登陆页面实现" class="headerlink" title="登陆页面实现"></a>登陆页面实现</h4><p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191126205926.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:rules</span> = <span class="string">&quot;rules&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login_content&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;0px&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">style</span>=<span class="string">&quot;align-items: center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;login_title&quot;</span>&gt;</span>系统登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;loginForm.username&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;prefix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon-class</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;color-main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #409EFF;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">:type</span>=<span class="string">&quot;pwdType&quot;</span> @<span class="attr">keyup.enter.native</span>=<span class="string">&quot;submitClick&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;loginForm.password&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;prefix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon-class</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;color-main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #409EFF;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;suffix&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showPwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon-class</span>=<span class="string">&quot;eye&quot;</span> <span class="attr">class</span>=<span class="string">&quot;color-main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #409EFF;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg-icon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">class</span>=<span class="string">&quot;login_remember&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">label-position</span>=<span class="string">&quot;left&quot;</span>&gt;</span>记住密码<span class="tag">&lt;/<span class="name">el-checkbox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 60px;text-align: center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 45%&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitClick&quot;</span>&gt;</span>立即登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">style</span>=<span class="string">&quot;width: 45%&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;forgetPasswordClick&quot;</span>&gt;</span>忘记密码?<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123;isvalidUsername&#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/validate&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">import</span> &#123;getCookie, setCookie&#125; <span class="keyword">from</span> <span class="string">&quot;../../utils/support&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> <span class="title function_">validateUsername</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">if</span> (!<span class="title function_">isvalidUsername</span>(value)) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请输入正确的用户名&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="title function_">callback</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">const</span> <span class="title function_">validatePass</span> = (<span class="params">rule, value, callback</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">if</span> (value.<span class="property">length</span> &lt; <span class="number">6</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;密码不能小于6位&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="title function_">callback</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             <span class="attr">rules</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="attr">username</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>,<span class="attr">trigger</span>:<span class="string">&#x27;blur&#x27;</span>,<span class="attr">validator</span>: validateUsername&#125;],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="attr">password</span>: [&#123;<span class="attr">required</span>: <span class="literal">true</span>,<span class="attr">trigger</span>:<span class="string">&#x27;blur&#x27;</span>,<span class="attr">validator</span>: validatePass&#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">loginForm</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">checked</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">loading</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">pwdType</span>: <span class="string">&#x27;password&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">username</span> = <span class="title function_">getCookie</span>(<span class="string">&quot;username&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">password</span> = <span class="title function_">getCookie</span>(<span class="string">&quot;password&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">username</span> === <span class="literal">undefined</span>||<span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">username</span>==<span class="literal">null</span>||<span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">username</span>===<span class="string">&#x27;&#x27;</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">username</span> = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">password</span> === <span class="literal">undefined</span>||<span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">password</span>==<span class="literal">null</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">password</span> = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">showPwd</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">if</span> (_this.<span class="property">pwdType</span> === <span class="string">&#x27;password&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  _this.<span class="property">pwdType</span> = <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  _this.<span class="property">pwdType</span> = <span class="string">&#x27;password&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">submitClick</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              _this.<span class="property">$refs</span>.<span class="property">loginForm</span>.<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span>=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="keyword">if</span>(valid)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      _this.<span class="property">loading</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      _this.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;Login&#x27;</span>, _this.<span class="property">loginForm</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                          _this.<span class="property">loading</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                          <span class="title function_">setCookie</span>(<span class="string">&quot;username&quot;</span>,_this.<span class="property">loginForm</span>.<span class="property">username</span>,<span class="number">15</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                          <span class="title function_">setCookie</span>(<span class="string">&quot;password&quot;</span>,_this.<span class="property">loginForm</span>.<span class="property">password</span>,<span class="number">15</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                          _this.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                          _this.<span class="property">loading</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;参数验证不合法！&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                      <span class="keyword">return</span> <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">forgetPasswordClick</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.login_content</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background-clip</span>: padding-box;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: <span class="number">180px</span> auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding</span>: <span class="number">35px</span> <span class="number">35px</span> <span class="number">15px</span> <span class="number">35px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eaeaea</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span> <span class="number">#cac6c6</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">350px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-top</span>: <span class="number">10px</span> solid <span class="number">#409EFF</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.login_title</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: <span class="number">0px</span> auto <span class="number">40px</span> auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: <span class="number">#505458</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.login_remember</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: left;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="设置本地转发"><a href="#设置本地转发" class="headerlink" title="设置本地转发"></a>设置本地转发</h4><p>在config&#x2F;index.js中修改,也可以解决开发环境的跨域问题。Vue跨域问题可参考我的另一篇文章。<a href="https://www.mizhuo.site/2019/11/26/Vue%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/">Vue跨域问题</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxyTable</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8888&#x27;</span>,<span class="comment">//设置本地转发端口号</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;^/&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门系列【三】</title>
      <link href="/Vue%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E3%80%90%E4%B8%89%E3%80%91/"/>
      <url>/Vue%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E3%80%90%E4%B8%89%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>要想在实际项目中使用Vue来搭建前端框架,就必须熟练的使用<span style="color:red;font-size:18px;">vue-router</span>来实现路由管理。所谓路由管理,顾名思义,就是帮助我们来管理各个页面之间的跳转。<span id="more"></span>官方对vue-router的介绍是这样的:</p><blockquote><p>Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：嵌套的路由&#x2F;视图表；模块化的、基于组件的路由配置；路由参数、查询、通配符；基于 Vue.js 过渡系统的视图过渡效果；细粒度的导航控制；带有自动激活的 CSS class 的链接；HTML5 历史模式或 hash 模式，在 IE9 中自动降级；自定义的滚动条行为。</p></blockquote><h4 id="vue-router的安装"><a href="#vue-router的安装" class="headerlink" title="vue-router的安装"></a>vue-router的安装</h4><ul><li>安装:<code>npm install vue-router</code></li><li>引用:<code>import Router from &#39;./router&#39;</code> <code>Vue.use(Router)</code></li><li>定义与使用</li><li>注册到Vue的根实例中</li></ul><h4 id="vue-router的基本使用"><a href="#vue-router的基本使用" class="headerlink" title="vue-router的基本使用"></a>vue-router的基本使用</h4><ul><li>核心标签:<code>&lt;router-link to=&quot;&quot;&gt;用于用户点击,会被渲染为a标签,to会被渲染为href</code>和<code>&lt;router-view&gt;用于显示匹配后的内容</code></li><li>编程式导航:<code>this.$router.push(&#123;path&#125;)</code></li></ul><h4 id="基础跳转"><a href="#基础跳转" class="headerlink" title="基础跳转"></a>基础跳转</h4><ul><li><p><code>App.vue</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#app</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>Home.vue</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">msg</span>: <span class="string">&quot;这是一个home 组件&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p><code>About</code></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>about<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;aboutMsg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">aboutMsg</span>: <span class="string">&#x27;这是一个about组件&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>定义route的路径</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;../Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> about <span class="keyword">from</span> <span class="string">&quot;../About.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要告诉 vue 使用 vueRouter</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: about</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router =  <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></li><li><p>注册到Vue组件中</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">router,</span><br><span class="line"><span class="attr">components</span>: &#123; <span class="title class_">App</span> &#125;,</span><br><span class="line"><span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  完成后效果:</p>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191109225416.gif" style="zoom: 50%;" />  可以发现,启动项目后进入localhost:8080并没有显示具体的内容。在实际项目中,我们希望启动项目后默认能够进入Home组件,就需要把`/`指向Home页面。但是使用`{path:"/",component: home}`会和`{path:"/home",component: home}`冲突,同一个component出现了两个Path,所以这里需要使用重定向,将页面重定向到home页面。  修改route配置    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;../Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> about <span class="keyword">from</span> <span class="string">&quot;../About.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要告诉 vue 使用 vueRouter</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: about</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> </span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router =  <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>  效果图:</p>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191109230819.gif" style="zoom:50%;" /></li></ul><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>所谓动态路由,就是说我们定义路由的路径不是固定的,可以根据不同的条件进行动态改变。动态路由的路径参数以冒号开头。<br>这里新建一个<code>User.vue</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个user组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在App.vue中添加路径导航</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--新增user组件导航--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/mizhuo&quot;</span>&gt;</span>user:mizhuo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/milu&quot;</span>&gt;</span>user:milu<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#app</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在index.js中添加动态路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;../Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> about <span class="keyword">from</span> <span class="string">&quot;../About.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&quot;../User.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要告诉 vue 使用 vueRouter</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: about</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> </span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: user</span><br><span class="line">   &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router =  <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>可以发现,路径栏中的路径<code>localhost:8080/#/user/mizhuo</code>和<code>localhost:8080/#/user/milu</code>都能够跳转到user的组件中。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191110142748.gif" style="zoom:50%;" /><br>那么问题就来了,我们要如何获取我们的动态参数呢?<br>使用<code>this.$route.params.id</code>就可以获取到了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个user组件,我的username是:&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是这样有一个问题就是在动态路由中,由于使用的是同一个组件,所以Vue不会创建和销毁这一个组件,而是复用这一个组件。导致一个问题就是这个组件的生命周期都没用了。可以看下图。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191110145208.gif" style="zoom:50%;" /><br>在user:mizhuo和user:milu来回切换，其中的动态参数不会改变了。我们必须使用computed来监听这个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个user组件,我的username是:&#123;&#123; res &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">res</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191110145540.gif" style="zoom:50%;" />如果需要在这两个视图切换的过程中do something,就需要用到watch来对$route进行监听了。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个user组件,我的username是:&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">watch</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $route (to,<span class="keyword">from</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// to表示的是你要去的那个组件，from 表示的是你从哪个组件过来的，它们是两个对象，你可以把它打印出来，它们也有一个param 属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(to);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">from</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">username</span> = to.<span class="property">params</span>.<span class="property">id</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>我们从user:mizhuo跳转到user:milu,从console可以看出,打印出的to就是我们要去的user:milu组件。from是我们的user:mizhuo组件。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191110150345.gif" style="zoom:50%;" /></p><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>嵌套路由也就是很多组件属于同一个父组件,也可以理解为父子关系。比如水果下面有苹果、香蕉、梨等等。我们要去苹果页面,首先要找到水果,然后再找到苹果。</p><ul><li>新建<code>Fruit.vue</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>新建<code>Apple.vue</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">msg</span>: <span class="string">&quot;我是一个大苹果&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>新建<code>Banana.vue</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>banana<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">msg</span>: <span class="string">&quot;我是一根大香蕉&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>新建<code>Pear.vue</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>pear<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        data () &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">msg</span>: <span class="string">&quot;我是一只水嫩嫩的梨&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>修改index.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;../Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> about <span class="keyword">from</span> <span class="string">&quot;../About.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&quot;../User.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fruit <span class="keyword">from</span> <span class="string">&quot;../Fruit.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> apple <span class="keyword">from</span> <span class="string">&quot;../Apple.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> banana <span class="keyword">from</span> <span class="string">&quot;../Banana.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> pear <span class="keyword">from</span> <span class="string">&quot;../Pear.vue&quot;</span>;</span><br><span class="line"><span class="comment">// 要告诉 vue 使用 vueRouter</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: about</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/fruit&#x27;</span> </span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: user</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/fruit&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: fruit,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: apple</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: banana</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;pear&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: pear</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: apple</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router =  <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>这样就可以实现嵌套路由了。<img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191110161803.gif" style="zoom:50%;" /></li></ul><h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><p>命名路由就是给路由赋予一个名字,然后根据这个名字来找到它。</p><ul><li>给path:user 中添加name属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;../Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> about <span class="keyword">from</span> <span class="string">&quot;../About.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&quot;../User.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fruit <span class="keyword">from</span> <span class="string">&quot;../Fruit.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> apple <span class="keyword">from</span> <span class="string">&quot;../Apple.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> banana <span class="keyword">from</span> <span class="string">&quot;../Banana.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> pear <span class="keyword">from</span> <span class="string">&quot;../Pear.vue&quot;</span>;</span><br><span class="line"><span class="comment">// 要告诉 vue 使用 vueRouter</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&quot;/home&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: about</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, </span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> </span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: user</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/fruit&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: fruit,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: apple</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: banana</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;pear&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: pear</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: apple</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> router =  <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></li><li>使用name进行跳转<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--新增user组件导航--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/mizhuo&quot;</span>&gt;</span>user:mizhuo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/milu&quot;</span>&gt;</span>user:milu<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name: &#x27;user&#x27;,params:&#123;id: &#x27;mimi&#x27;&#125;&#125;&quot;</span>&gt;</span>user:mimi<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/fruit&quot;</span>&gt;</span>Fruit<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#app</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>这样也可以实现跳转<img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191110163410.gif" style="zoom:50%;" /></li></ul><h4 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h4><p>这个功能一般用于事件中,完成something后将页面进行跳转。实现方法:调用<code>rourter.push()</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--新增user组件导航--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/mizhuo&quot;</span>&gt;</span>user:mizhuo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/milu&quot;</span>&gt;</span>user:milu<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name: &#x27;user&#x27;,params:&#123;id: &#x27;mimi&#x27;&#125;&#125;&quot;</span>&gt;</span>user:mimi<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/fruit&quot;</span>&gt;</span>Fruit<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toFruit&quot;</span>&gt;</span>我要跳转到Fruit页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toHome&quot;</span>&gt;</span>我要跳转到Home页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">toFruit</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/fruit&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">toHome</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/home&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#app</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191110164108.gif" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门系列【二】</title>
      <link href="/Vue%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E3%80%90%E4%BA%8C%E3%80%91/"/>
      <url>/Vue%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E3%80%90%E4%BA%8C%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>上一文章,已经讲解了Vue的安装及项目的搭建,接下来就可以开始学习Vue的语法及使用了。</p><span id="more"></span><h4 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h4><p>Vue中使用数据最多的方式就是使用双大括号包裹数据，如<code>&#123;&#123; msg &#125;&#125;</code>,就会将js中的msg的值显示出来。而且Vue中，所有东西都是响应式的,修改js中msg的内容,页面中的值也会相应的进行更新。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191105221132.png" style="zoom:50%;" /><br>使用<code>v-bind</code>绑定<code>msg</code>数据到<code>span</code>的<code>title</code>属性。同理，也能绑定其他标签的属性。如<code>input</code>标签的<code>value</code>属性。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191105222534.png" style="zoom:50%;" /></p><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p>使用<code>v-if=&lt;true/false&gt;</code>来决定是否隐藏当前标签。如图中<code>display</code>的值为true时p标签的内容才会显示出来。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191106105138.gif" style="zoom:50%;" /></p><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>使用<code>v-for=&#39;&lt;item&gt; in &lt;items&gt;&#39;</code>可以遍历<code>data</code>中的<code>&lt;items&gt;</code>数组，然后使用<code>&#123;&#123;item.key&#125;&#125;</code>可以打印数组中的值。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191106101631.png" style="zoom:50%;" /></p><h4 id="绑定事件方法"><a href="#绑定事件方法" class="headerlink" title="绑定事件方法"></a>绑定事件方法</h4><p>使用<code>v-on:click=&#39;方法名&#39;</code>或者<code>@click=&#39;方法名&#39;</code>,可以添加一个事件监听器，调用vue中的方法。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191106104814.gif" style="zoom:50%;" /></p><h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4><p>使用<code>v-model</code>来实现双向绑定数据。修改任意一处，可以同步改变<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191106105527.gif" style="zoom:50%;" /></p><h4 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h4><p>在 Vue 中注册组件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;myComponent&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;li&gt;&#123;&#123; component.it &#125;&#125;&lt;/li&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;component&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注册完组件后就可以在代码中使用组件了。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191106221852.gif" style="zoom:50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门系列【一】</title>
      <link href="/Vue%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E3%80%90%E4%B8%80%E3%80%91/"/>
      <url>/Vue%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E3%80%90%E4%B8%80%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式JavaScript框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，方便与第三方库或既有项目整合。</p><span id="more"></span><p>在这个大数据时代，对于互联网项目性能越来越高，前后端分离是大势所趋，虽说前后端只需要专攻自己的领域，但是作为一名经验丰富(熟练掌握CTRL+C&#x2F;CTRL+V等复杂技术)的老程序猿，除了要学习后端技术的同时，也要对前端技术进行了解。这样才会有一个充满希望的未来！而<a href="https://cn.vuejs.org/">Vue.js</a>可以说是目前国内最流行的前端框架了，它是以数据驱动和组件化的思想构建的。相比于<a href="https://angularjs.org/">Angular.js</a>，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js。</p><p><strong><span style='color:red;'>Vue的教程十分详细，大家也可以移步查看官网的教程。<a href="https://cn.vuejs.org/v2/guide/">官网教程</a></span></strong></p><h4 id="安装Vue-js"><a href="#安装Vue-js" class="headerlink" title="安装Vue.js"></a>安装Vue.js</h4><p><span style='color:red;font-size:20px;'>注意：Vue 不支持 IE8 及以下版本。</span></p><ul><li><p>使用NPM安装,<code>npm install vue</code>,NPM 能很好地和诸如 webpack 或 Browserify 模块打包器配合使用。使用NPM推荐使用<a href="https://npm.taobao.org/">国内镜像</a>,速度更快,除了使用NPM.</p></li><li><p>直接引入<code>&lt;script&gt;</code>标签,<code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code>,<code>Vue</code>会被注册为一个全局变量。</p></li><li><p>使用官方命令行工具 (CLI),为单页面应用 (SPA) 快速搭建繁杂的脚手架。<br>我这里使用npm进行安装:</p><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031104627.png" style="zoom:50%;" /></li><li><p>全局安装vue-cli工具<br>  <code>cnpm install vue-cli -g</code></p>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031164823.png" style="zoom:50%;" /></li></ul><h4 id="新建Vue项目"><a href="#新建Vue项目" class="headerlink" title="新建Vue项目"></a>新建Vue项目</h4><ul><li><code>vue init webpack (你的项目名称)</code><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031165821.png" style="zoom:50%;" /></li><li>安装中不用全选  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Project name my-project</span><br><span class="line">Project description A Vue.js project</span><br><span class="line">Author lzh &lt;****@qq.com&gt;</span><br><span class="line">Vue build (Use arrow keys)</span><br><span class="line">Vue build standalone</span><br><span class="line">Install vue-router? Yes</span><br><span class="line">Use ESLint to lint your code? No(除这三个外，其他的都回车)</span><br><span class="line">Set up unit tests No</span><br><span class="line">Setup e2e tests with Nightwatch? No</span><br></pre></td></tr></table></figure></li><li>安装完成后，就可以运行项目了  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd my-project</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031170352.png" style="zoom:50%;" /></li><li>打开浏览器，进入<a href="http://localhost:8080/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%BA%86">http://localhost:8080/就可以看到我们的项目了</a><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031170312.png" style="zoom:50%;" /></li></ul><p><strong>至此，已经成功创建了一个Vue项目。还是很简单的,基本都是跟着步骤走就好了。</strong></p><h4 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h4><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031170859.png" style="zoom:50%;" /><p>创建好的项目中有很多文件夹和文件,这里稍微介绍一下src</p><ul><li>在src&#x2F;assets中用于我们存放一些css、img、js文件</li><li>src&#x2F;components中存放自己的vue组件</li><li>src&#x2F;router存放路由配置信息</li><li>src&#x2F;lib存放模拟的数据</li><li>新建src&#x2F;store存放vuex</li><li>新建src&#x2F;views存放路由组件</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发【三】</title>
      <link href="/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E3%80%90%E4%B8%89%E3%80%91/"/>
      <url>/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E3%80%90%E4%B8%89%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>前面文章已经成功接入微信公众号了，我们就能够接受到用户发送的消息了。接收到消息之后就可以编写逻辑来进行处理了。用户向公众号发送消息时，我们收到的消息发送者是一个OpenID，是使用用户微信号加密后的结果，每个用户对每个公众号有一个唯一的OpenID。</p><span id="more"></span><h4 id="创建Message类"><a href="#创建Message类" class="headerlink" title="创建Message类"></a>创建Message类</h4><ul><li><code>BaseMessage</code>：消息基类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.model.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.model.resp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: BaseMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 消息基类 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-17 16:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseMessage</span> &#123;</span><br><span class="line">    <span class="comment">/* 发送方帐号（一个OpenID） */</span></span><br><span class="line">    <span class="keyword">private</span> String ToUserName;</span><br><span class="line">    <span class="comment">/* 开发者微信号 */</span></span><br><span class="line">    <span class="keyword">private</span> String FromUserName;</span><br><span class="line">    <span class="comment">/* 消息创建时间 （整型） */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> CreateTime;</span><br><span class="line">    <span class="comment">/* 消息类型，文本为text */</span></span><br><span class="line">    <span class="keyword">private</span> String MsgType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>TextMessage</code>:文本消息类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.model.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.model.resp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TextMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 文本消息类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-17 16:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextMessage</span> <span class="keyword">extends</span> <span class="title class_">BaseMessage</span> &#123;</span><br><span class="line">    <span class="comment">/* 文本消息内容 */</span></span><br><span class="line">    <span class="keyword">private</span> String Content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>PictureMessage</code>:图片消息类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.model.req;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: PictureMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 图片消息类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-15 19:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.model.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.model.resp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ImageMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 图片消息类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-17 22:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageMessage</span> <span class="keyword">extends</span> <span class="title class_">BaseMessage</span> &#123;</span><br><span class="line">    <span class="comment">/* 通过素材管理中的接口上传多媒体文件，得到的id。 */</span></span><br><span class="line">    <span class="keyword">private</span> String MediaId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>VoiceMessage</code>:语音消息类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.model.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.model.resp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: VoiceMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 语音消息类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-17 22:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoiceMessage</span> <span class="keyword">extends</span> <span class="title class_">BaseMessage</span> &#123;</span><br><span class="line">    <span class="comment">/* 通过素材管理中的接口上传多媒体文件，得到的id */</span></span><br><span class="line">    <span class="keyword">private</span> String MediaId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>VideoMessage</code>:视频消息类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.model.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.model.resp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: VideoMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 视频消息类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-17 22:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VideoMessage</span> <span class="keyword">extends</span> <span class="title class_">BaseMessage</span> &#123;</span><br><span class="line">    <span class="comment">/* 通过素材管理中的接口上传多媒体文件，得到的id */</span></span><br><span class="line">    <span class="keyword">private</span> String MediaId;</span><br><span class="line">    <span class="comment">/* 视频消息的标题 */</span></span><br><span class="line">    <span class="keyword">private</span> String Title;</span><br><span class="line">    <span class="comment">/* 视频消息的描述 */</span></span><br><span class="line">    <span class="keyword">private</span> String Description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>LocationMessage</code>:地理位置消息类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.model.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.model.req</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: LocationMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 地理位置消息类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-16 08:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocationMessage</span> <span class="keyword">extends</span> <span class="title class_">BaseMessage</span> &#123;</span><br><span class="line">    <span class="comment">/* 地理位置维度 */</span></span><br><span class="line">    <span class="keyword">private</span> String Location_X;</span><br><span class="line">    <span class="comment">/* 地理位置经度 */</span></span><br><span class="line">    <span class="keyword">private</span> String Location_Y;</span><br><span class="line">    <span class="comment">/* 地图缩放大小 */</span></span><br><span class="line">    <span class="keyword">private</span> String Scale;</span><br><span class="line">    <span class="comment">/* 地理位置信息 */</span></span><br><span class="line">    <span class="keyword">private</span> String Label;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>LinkMessage</code>：链接消息类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.model.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.model.req</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: LinkMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 链接消息类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-16 08:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkMessage</span> <span class="keyword">extends</span> <span class="title class_">BaseMessage</span> &#123;</span><br><span class="line">    <span class="comment">/* 消息标题 */</span></span><br><span class="line">    <span class="keyword">private</span> String Title;</span><br><span class="line">    <span class="comment">/* 消息描述 */</span></span><br><span class="line">    <span class="keyword">private</span> String Description;</span><br><span class="line">    <span class="comment">/* 消息链接 */</span></span><br><span class="line">    <span class="keyword">private</span> String Url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Article</code>：图文消息类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.model.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.model.resp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ArticleMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 图文消息类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-17 16:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Article</span> &#123;</span><br><span class="line">    <span class="comment">/* 图文消息标题 */</span></span><br><span class="line">    <span class="keyword">private</span> String Title;</span><br><span class="line">    <span class="comment">/* 图文消息描述 */</span></span><br><span class="line">    <span class="keyword">private</span> String Description;</span><br><span class="line">    <span class="comment">/* 图片链接，支持JPG、PNG格式，较好的效果为大图360*200，小图200*200 */</span></span><br><span class="line">    <span class="keyword">private</span> String PicUrl;</span><br><span class="line">    <span class="comment">/* 点击图文消息跳转链接 */</span></span><br><span class="line">    <span class="keyword">private</span> String Url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>ArticlesMessage</code>：多图文消息类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.model.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.model.resp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ArticlesMessage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 多图文消息类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-17 22:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticlesMessage</span> <span class="keyword">extends</span> <span class="title class_">BaseMessage</span> &#123;</span><br><span class="line">    <span class="comment">/* 图文消息信息，注意，如果图文数超过限制，则将只发限制内的条数 */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Article&gt; Articles;</span><br><span class="line">    <span class="comment">/* 图文消息个数；当用户发送文本、图片、视频、图文、地理位置这五种消息时，开发者只能回复1条图文消息；其余场景最多可回复8条图文消息 */</span></span><br><span class="line">    <span class="type">int</span> ArticleCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;dom4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dom4j&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.thoughtworks.xstream&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xstream&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.4</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;json-lib&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.4</span>&lt;/version&gt;</span><br><span class="line">    &lt;classifier&gt;jdk15&lt;/classifier&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="创建解析消息工具类"><a href="#创建解析消息工具类" class="headerlink" title="创建解析消息工具类"></a>创建解析消息工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.core.util.QuickWriter;</span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.io.HierarchicalStreamWriter;</span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.io.xml.PrettyPrintWriter;</span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.io.xml.Xpp3Driver;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.model.message.Article;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.model.message.ArticlesMessage;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.model.message.TextMessage;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.util</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MessageUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 消息处理工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-16 16:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析微信发送来的请求数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,String&gt; <span class="title function_">parseXml</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = request.getInputStream();</span><br><span class="line">            <span class="comment">//读取输入流</span></span><br><span class="line">            <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">            <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> reader.read(in);</span><br><span class="line">            <span class="comment">//得到根元素</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> doc.getRootElement();</span><br><span class="line">            <span class="comment">//得到根元素所有节点</span></span><br><span class="line">            List&lt;Element&gt; list = root.elements();</span><br><span class="line">            <span class="comment">//遍历所有节点，并将数据保存到Map中。</span></span><br><span class="line">            <span class="keyword">for</span> (Element element : list) &#123;</span><br><span class="line">                map.put(element.getName(), element.getText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//释放资源</span></span><br><span class="line">                in.close();</span><br><span class="line">                in = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将文本消息封装成对应的xml格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">textMessageToXml</span><span class="params">(TextMessage message)</span> &#123;</span><br><span class="line">        xStream.alias(<span class="string">&quot;xml&quot;</span>, message.getClass());</span><br><span class="line">        <span class="keyword">return</span> xStream.toXML(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将图文消息封装成对应的xml格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">ArticleMessageToXml</span><span class="params">(ArticlesMessage message)</span> &#123;</span><br><span class="line">        xStream.alias(<span class="string">&quot;xml&quot;</span>, message.getClass());</span><br><span class="line">        xStream.alias(<span class="string">&quot;item&quot;</span>, <span class="keyword">new</span> <span class="title class_">Article</span>().getClass());</span><br><span class="line">        <span class="keyword">return</span> xStream.toXML(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展XStream，使其支持CDATA块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>(<span class="keyword">new</span> <span class="title class_">Xpp3Driver</span>()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> HierarchicalStreamWriter <span class="title function_">createWriter</span><span class="params">(Writer out)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PrettyPrintWriter</span>(out)&#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">cdata</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startNode</span><span class="params">(String name, Class clazz)</span> &#123;</span><br><span class="line">                    <span class="built_in">super</span>.startNode(name, clazz);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">writeText</span><span class="params">(QuickWriter writer, String text)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(cdata)&#123;</span><br><span class="line">                        writer.write(<span class="string">&quot;&lt;![CDATA[&quot;</span>);</span><br><span class="line">                        writer.write(text);</span><br><span class="line">                        writer.write(<span class="string">&quot;]]&gt;&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        writer.write(text);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="定义常量类"><a href="#定义常量类" class="headerlink" title="定义常量类"></a>定义常量类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.util</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Constant</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 常量类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-21 22:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constant</span> &#123;</span><br><span class="line">    <span class="comment">/* 消息类型: 文本 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE_TYPE_TEXT</span> <span class="operator">=</span> <span class="string">&quot;text&quot;</span>;</span><br><span class="line">    <span class="comment">/* 消息类型: 音乐 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE_TYPE_MUSIC</span> <span class="operator">=</span> <span class="string">&quot;music&quot;</span>;</span><br><span class="line">    <span class="comment">/* 消息类型: 图文 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE_TYPE_NEWS</span> <span class="operator">=</span> <span class="string">&quot;news&quot;</span>;</span><br><span class="line">    <span class="comment">/* 消息类型: 图片 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE_TYPE_IMAGE</span> <span class="operator">=</span> <span class="string">&quot;image&quot;</span>;</span><br><span class="line">    <span class="comment">/* 消息类型: 链接 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE_TYPE_LINK</span> <span class="operator">=</span> <span class="string">&quot;link&quot;</span>;</span><br><span class="line">    <span class="comment">/* 消息类型: 语音 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE_TYPE_VOICE</span> <span class="operator">=</span> <span class="string">&quot;voice&quot;</span>;</span><br><span class="line">    <span class="comment">/* 消息类型: 视频 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE_TYPE_VIDEO</span> <span class="operator">=</span> <span class="string">&quot;video&quot;</span>;</span><br><span class="line">    <span class="comment">/* 消息类型: 地理位置 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE_TYPE_LOCATION</span> <span class="operator">=</span> <span class="string">&quot;location&quot;</span>;</span><br><span class="line">    <span class="comment">/* 消息类型: 推送 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MESSAGE_TYPE_EVENT</span> <span class="operator">=</span> <span class="string">&quot;event&quot;</span>;</span><br><span class="line">    <span class="comment">/* 事件类型：订阅 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EVENT_TYPE_SUBSCRIBE</span> <span class="operator">=</span> <span class="string">&quot;subscribe&quot;</span>;</span><br><span class="line">    <span class="comment">/* 事件类型：取消订阅 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EVENT_TYPE_UNSUBSCRIBE</span> <span class="operator">=</span> <span class="string">&quot;unsubscribe&quot;</span>;</span><br><span class="line">    <span class="comment">/* 事件类型：扫码 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EVENT_TYPE_SCAN</span> <span class="operator">=</span> <span class="string">&quot;SCAN&quot;</span>;</span><br><span class="line">    <span class="comment">/* 事件类型：菜单点击事件 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EVENT_TYPE_CLICK</span> <span class="operator">=</span> <span class="string">&quot;CLICK&quot;</span>;</span><br><span class="line">    <span class="comment">/* 事件类型：推送客服 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EVENT_TYPE_TRANSFER_CUSTOMER_SERVICE</span> <span class="operator">=</span> <span class="string">&quot;transfer_customer_service&quot;</span>;</span><br><span class="line">    <span class="comment">/* 获取AccessToken的接口地址(GET) 200次/天 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCESS_TOKEN_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET&quot;</span>;</span><br><span class="line">    <span class="comment">/* 获取自定义菜单 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MENU_GET_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/menu/get?access_token=ACCESS_TOKEN&quot;</span>;</span><br><span class="line">    <span class="comment">/* 创建自定义菜单 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MENU_CREATE_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN&quot;</span>;</span><br><span class="line">    <span class="comment">/* 删除自定义菜单 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MENU_DELETE_URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/menu/delete?access_token=ACCESS_TOKEN&quot;</span>;</span><br><span class="line">    <span class="comment">/* API接口 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RESP_TYPE_API</span> <span class="operator">=</span> <span class="string">&quot;api&quot;</span>;</span><br><span class="line">    <span class="comment">/* 不需要传递参数的API接口 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RESP_TYPE_NOPARAMAPI</span> <span class="operator">=</span> <span class="string">&quot;npapi&quot;</span>;</span><br><span class="line">    <span class="comment">/* 获取关键词 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RESP_TYPE_KEYWORD</span> <span class="operator">=</span> <span class="string">&quot;keyword&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义获取AccessToken的线程类"><a href="#定义获取AccessToken的线程类" class="headerlink" title="定义获取AccessToken的线程类"></a>定义获取AccessToken的线程类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.model.AccessToken;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.util.WeChatUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.thread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AccessTokenThread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 获取AccessToken线程类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-18 16:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessTokenThread</span> &#123;</span><br><span class="line">    <span class="comment">/* 第三方用户唯一凭证 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String appid;</span><br><span class="line">    <span class="comment">/* 第三方用户唯一凭证密钥 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String appsecret;</span><br><span class="line">    <span class="comment">/* 第三方用户唯一凭证 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">AccessToken</span> <span class="variable">accessToken</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;weChat.AccountInfo.appid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAppid</span><span class="params">(String appid)</span> &#123;</span><br><span class="line">        AccessTokenThread.appid = appid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;weChat.AccountInfo.appsecret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAppsecret</span><span class="params">(String appsecret)</span> &#123;</span><br><span class="line">        AccessTokenThread.appsecret = appsecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每7200秒获取一次AccessToken</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedDelay = 2 * 3600 * 1000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getToken</span><span class="params">()</span>&#123;</span><br><span class="line">        accessToken = WeChatUtil.getAccessToken(appid,appsecret);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != accessToken.getToken())&#123;</span><br><span class="line">            log.info(<span class="string">&quot;[&#123;&#125;],获取AccessToken成功，AccessToken:[&#123;&#125;]&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()),accessToken.getToken());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.error(<span class="string">&quot;[&#123;&#125;],获取AccessToken失败！&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义WeChat工具类用于发送http请求和获取AccessToken"><a href="#定义WeChat工具类用于发送http请求和获取AccessToken" class="headerlink" title="定义WeChat工具类用于发送http请求和获取AccessToken"></a>定义WeChat工具类用于发送http请求和获取AccessToken</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.model.AccessToken;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.util</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: WeChatUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 获取AcessToken工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-18 16:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChatUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发起Http请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestUrl 请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestMethod 请求方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStr 提交的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  JSONObject(通过JSONObject.get(key)获取json对象的值)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">httpRequest</span><span class="params">(String requestUrl, String requestMethod, String outputStr)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;[&#123;&#125;]发起Http请求！&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()));</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建SSLContext对象，并使用我们指定的信任管理器初始化</span></span><br><span class="line">            TrustManager[] trustManagers = &#123;<span class="keyword">new</span> <span class="title class_">MyX509TrustManger</span>()&#125;;</span><br><span class="line">            <span class="type">SSLContext</span> <span class="variable">context</span> <span class="operator">=</span> SSLContext.getInstance(<span class="string">&quot;SSL&quot;</span>,<span class="string">&quot;SunJSSE&quot;</span>);</span><br><span class="line">            context.init(<span class="literal">null</span>,trustManagers,<span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">            <span class="comment">//从上述SSLContext对象中获取SSLSocketFactory对象</span></span><br><span class="line">            <span class="type">SSLSocketFactory</span> <span class="variable">sslSocketFactory</span> <span class="operator">=</span> context.getSocketFactory();</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(requestUrl);</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">httpURLConnection</span> <span class="operator">=</span> (HttpURLConnection)url.openConnection();</span><br><span class="line">            httpURLConnection.setDoInput(<span class="literal">true</span>);</span><br><span class="line">            httpURLConnection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">            httpURLConnection.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//设置请求方式GET/POST</span></span><br><span class="line">            httpURLConnection.setRequestMethod(requestMethod);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;GET&quot;</span>.equalsIgnoreCase(requestMethod))&#123;</span><br><span class="line">                httpURLConnection.connect();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当有数据需要提交时</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != outputStr)&#123;</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> httpURLConnection.getOutputStream();</span><br><span class="line">                outputStream.write(outputStr.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将返回的输入流转换成字符串</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> httpURLConnection.getInputStream();</span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((str = bufferedReader.readLine())!= <span class="literal">null</span>)&#123;</span><br><span class="line">                buffer.append(str);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedReader.close();</span><br><span class="line">            inputStreamReader.close();</span><br><span class="line">            inputStream.close();</span><br><span class="line">            httpURLConnection.disconnect();</span><br><span class="line">            jsonObject = JSONObject.fromObject(buffer.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;Http请求失败:[&#123;&#125;]&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  获取AccessToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> appid 凭证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> appsecret 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AccessToken <span class="title function_">getAccessToken</span><span class="params">(String appid, String appsecret)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestUrl</span> <span class="operator">=</span> Constant.ACCESS_TOKEN_URL.replace(<span class="string">&quot;APPID&quot;</span>,appid).replace(<span class="string">&quot;APPSECRET&quot;</span>,appsecret);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> httpRequest(requestUrl,<span class="string">&quot;GET&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">AccessToken</span> <span class="variable">acessToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccessToken</span>();</span><br><span class="line">        Optional.ofNullable(jsonObject)</span><br><span class="line">                .filter(obj-&gt;obj.has(<span class="string">&quot;access_token&quot;</span>))</span><br><span class="line">                .filter(obj-&gt;obj.has(<span class="string">&quot;expires_in&quot;</span>))</span><br><span class="line">                .ifPresent(obj-&gt;&#123;</span><br><span class="line">                    acessToken.setToken(obj.getString(<span class="string">&quot;access_token&quot;</span>));</span><br><span class="line">                    acessToken.setExpireSeconds(obj.getInt(<span class="string">&quot;expires_in&quot;</span>));</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> acessToken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收用户请求-处理逻辑-返回数据"><a href="#接收用户请求-处理逻辑-返回数据" class="headerlink" title="接收用户请求,处理逻辑,返回数据"></a>接收用户请求,处理逻辑,返回数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.service.MessageService;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.service.UserReqHistoryService;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.util.AccessUtil;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.util.Constant;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.util.MessageUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: CoreController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 核心Controller 用于接入微信公众号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-15 14:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoreController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserReqHistoryService historyService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接入微信公众号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timestamp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nonce</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> echostr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">checkSignature</span><span class="params">(<span class="meta">@RequestParam(value = &quot;signature&quot;,required = false)</span> String signature,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(value = &quot;timestamp&quot;,required = false)</span> String timestamp,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(value = &quot;nonce&quot;,required = false)</span> String nonce,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(value = &quot;echostr&quot;,required = false)</span> String echostr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (AccessUtil.checkSignature(signature, timestamp, nonce)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;[&#123;&#125;]接入微信公众号成功&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()));</span><br><span class="line">            <span class="keyword">return</span> echostr;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;[&#123;&#125;]接入微信公众号失败&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doPost</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; data = MessageUtil.parseXml(request);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msgType</span> <span class="operator">=</span> data.get(<span class="string">&quot;MsgType&quot;</span>);</span><br><span class="line">        <span class="comment">//将用户请求数据封装到历史数据表中</span></span><br><span class="line">        historyService.saveDataToHistoryTable(data);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (msgType)&#123;</span><br><span class="line">            <span class="keyword">case</span> Constant.MESSAGE_TYPE_EVENT:</span><br><span class="line">                result = messageService.processEvent(data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                result = messageService.processMessage(data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.mapper.ReplyContentMapper;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.model.table.ReplyContent;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.model.message.Article;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.model.message.ArticlesMessage;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.model.message.TextMessage;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.model.table.User;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.service.MessageService;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.util.Constant;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.util.MessageUtil;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.util.WeChatUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONArray;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.service.impl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: CoreServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 处理用户请求Service实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-16 20:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ReplyContentMapper contentMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理微信消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">processMessage</span><span class="params">(Map&lt;String,String&gt; data)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msgType</span> <span class="operator">=</span> data.get(<span class="string">&quot;MsgType&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (msgType)&#123;</span><br><span class="line">            <span class="comment">/* 处理文本消息 */</span></span><br><span class="line">            <span class="keyword">case</span> Constant.MESSAGE_TYPE_TEXT:</span><br><span class="line">                result = processTextMessage(data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理文本消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">processTextMessage</span><span class="params">(Map&lt;String, String&gt; data)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;-------开始处理文本消息-------&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">resContent</span> <span class="operator">=</span> data.get(<span class="string">&quot;Content&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fromUserName</span> <span class="operator">=</span> data.get(<span class="string">&quot;FromUserName&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">toUserName</span> <span class="operator">=</span> data.get(<span class="string">&quot;ToUserName&quot;</span>);</span><br><span class="line">        <span class="comment">/*-----------------封装文本消息类型-----------------------*/</span></span><br><span class="line">        <span class="type">TextMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextMessage</span>();</span><br><span class="line">        message.setFromUserName(toUserName);</span><br><span class="line">        message.setToUserName(fromUserName);</span><br><span class="line">        message.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()).getTime());</span><br><span class="line">        <span class="comment">/*-------------------封装图文消息类型----------------------*/</span></span><br><span class="line">        <span class="type">ArticlesMessage</span> <span class="variable">articlesMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArticlesMessage</span>();</span><br><span class="line">        articlesMessage.setFromUserName(toUserName);</span><br><span class="line">        articlesMessage.setToUserName(fromUserName);</span><br><span class="line">        articlesMessage.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()).getTime());</span><br><span class="line">        List&lt;Article&gt; articleList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//关键词</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">_keyword</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//关键词后面的参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">_param</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//json对象</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (resContent.indexOf(<span class="string">&quot;:&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                String[] params = resContent.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                _keyword = params[<span class="number">0</span>];</span><br><span class="line">                _param = params[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resContent.indexOf(<span class="string">&quot;：&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                String[] params = resContent.split(<span class="string">&quot;：&quot;</span>);</span><br><span class="line">                _keyword = params[<span class="number">0</span>];</span><br><span class="line">                _param = params[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _keyword = resContent;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//根据关键词查找应答操作</span></span><br><span class="line">            <span class="type">ReplyContent</span> <span class="variable">replyContent</span> <span class="operator">=</span> contentMapper.queryAllByKeyWord(_keyword);</span><br><span class="line">            <span class="keyword">if</span> (replyContent == <span class="literal">null</span>) &#123;</span><br><span class="line">                resContent = <span class="string">&quot;暂时不支持这个关键词哦!您可以回复&lt;关键词&gt;来获取所有支持的关键词。&quot;</span>;</span><br><span class="line">                message.setMsgType(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">                message.setContent(resContent);</span><br><span class="line">                result = MessageUtil.textMessageToXml(message);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取这条关键词的应答操作的类型</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">_msgty</span> <span class="operator">=</span> replyContent.getMsgty();</span><br><span class="line">            <span class="keyword">switch</span> (_msgty) &#123;</span><br><span class="line">                <span class="keyword">case</span> Constant.RESP_TYPE_KEYWORD:&#123;</span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    sb.append(<span class="string">&quot;您可以搜索以下关键词来获取信息:&quot;</span>);</span><br><span class="line">                    List&lt;ReplyContent&gt; replyContents = contentMapper.queryAllKeyword();</span><br><span class="line">                    replyContents.forEach(content-&gt;&#123;</span><br><span class="line">                        sb.append(<span class="string">&quot;\n&quot;</span>).append(content.getId()).append(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                        sb.append(content.getKeyword());</span><br><span class="line">                    &#125;);</span><br><span class="line">                    resContent = sb.toString();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> Constant.RESP_TYPE_API: &#123;</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotEmpty(_param)) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">_api_url</span> <span class="operator">=</span> replyContent.getContent().replace(<span class="string">&quot;[param]&quot;</span>, URLEncoder.encode(_param,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">                        jsonObject = WeChatUtil.httpRequest(_api_url, <span class="string">&quot;GET&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                        <span class="keyword">if</span>(jsonObject == <span class="literal">null</span>)&#123;</span><br><span class="line">                            resContent = <span class="string">&quot;抱歉，数据发生了错误！请稍后重试！&quot;</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                            jsonObject = (JSONObject) jsonObject.get(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">                            <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> (JSONObject) jsonObject.get(<span class="string">&quot;yesterday&quot;</span>);</span><br><span class="line">                            sb.append(_param).append(<span class="string">&quot;天气:\n&quot;</span>).append(object.get(<span class="string">&quot;date&quot;</span>)).append(<span class="string">&quot;:&quot;</span>).append(object.get(<span class="string">&quot;type&quot;</span>))</span><br><span class="line">                                    .append(<span class="string">&quot;|&quot;</span>).append(object.get(<span class="string">&quot;high&quot;</span>)).append(<span class="string">&quot;|&quot;</span>).append(object.get(<span class="string">&quot;low&quot;</span>))</span><br><span class="line">                                    .append(<span class="string">&quot;|&quot;</span>).append(object.get(<span class="string">&quot;fx&quot;</span>));</span><br><span class="line">                            <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> jsonObject.getJSONArray(<span class="string">&quot;forecast&quot;</span>);</span><br><span class="line">                            <span class="keyword">for</span> (Object o : array) &#123;</span><br><span class="line">                                <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) o;</span><br><span class="line">                                sb.append(<span class="string">&quot;\n&quot;</span>).append(map.get(<span class="string">&quot;date&quot;</span>)).append(<span class="string">&quot;:&quot;</span>).append(map.get(<span class="string">&quot;type&quot;</span>))</span><br><span class="line">                                        .append(<span class="string">&quot;|&quot;</span>).append(map.get(<span class="string">&quot;high&quot;</span>)).append(<span class="string">&quot;|&quot;</span>).append(map.get(<span class="string">&quot;low&quot;</span>))</span><br><span class="line">                                        .append(<span class="string">&quot;|&quot;</span>).append(map.get(<span class="string">&quot;fengxiang&quot;</span>));</span><br><span class="line">                            &#125;</span><br><span class="line">                            resContent = sb.toString();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resContent = replyContent.getDescription();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> Constant.RESP_TYPE_NOPARAMAPI: &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">_api_url</span> <span class="operator">=</span> replyContent.getContent();</span><br><span class="line">                    jsonObject = WeChatUtil.httpRequest(_api_url, <span class="string">&quot;GET&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> Constant.MESSAGE_TYPE_TEXT: &#123;</span><br><span class="line">                    resContent = replyContent.getContent();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取应封装的消息类型</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">_resMsgty</span> <span class="operator">=</span> replyContent.getResty();</span><br><span class="line">            <span class="keyword">switch</span> (_resMsgty) &#123;</span><br><span class="line">                <span class="keyword">case</span> Constant.MESSAGE_TYPE_TEXT: &#123;</span><br><span class="line">                    message.setMsgType(_resMsgty);</span><br><span class="line">                    message.setContent(resContent);</span><br><span class="line">                    result = MessageUtil.textMessageToXml(message);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> Constant.MESSAGE_TYPE_NEWS: &#123;</span><br><span class="line">                    <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> jsonObject.getJSONArray(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">                    <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Article</span>();</span><br><span class="line">                    <span class="keyword">for</span> (Object o : array) &#123;</span><br><span class="line">                        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) o;</span><br><span class="line">                        article.setTitle((String) map.get(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">                        article.setPicUrl((String) map.get(<span class="string">&quot;image&quot;</span>));</span><br><span class="line">                        article.setUrl((String) map.get(<span class="string">&quot;path&quot;</span>));</span><br><span class="line">                        articleList.add(article);</span><br><span class="line">                        article = <span class="keyword">new</span> <span class="title class_">Article</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    articlesMessage.setMsgType(_resMsgty);</span><br><span class="line">                    articlesMessage.setArticles(articleList);</span><br><span class="line">                    articlesMessage.setArticleCount(articleList.size());</span><br><span class="line">                    result = MessageUtil.ArticleMessageToXml(articlesMessage);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            resContent = <span class="string">&quot;抱歉，数据发生了错误！请稍后重试！&quot;</span>;</span><br><span class="line">            message.setMsgType(Constant.MESSAGE_TYPE_TEXT);</span><br><span class="line">            message.setContent(resContent);</span><br><span class="line">            result = MessageUtil.textMessageToXml(message);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">processEvent</span><span class="params">(Map&lt;String, String&gt; data)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">event</span> <span class="operator">=</span> data.get(<span class="string">&quot;Event&quot;</span>);</span><br><span class="line">        <span class="keyword">switch</span> (event) &#123;</span><br><span class="line">            <span class="keyword">case</span> Constant.EVENT_TYPE_SUBSCRIBE:</span><br><span class="line">                result = ProcessSubscribeEvent(data);</span><br><span class="line">                log.info(<span class="string">&quot;[&#123;&#125;]用户添加了关注！&quot;</span>,data.get(<span class="string">&quot;FromUserName&quot;</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Constant.EVENT_TYPE_UNSUBSCRIBE:</span><br><span class="line">                result = ProcessUnSubscribeEvent(data);</span><br><span class="line">                log.info(<span class="string">&quot;[&#123;&#125;]用户取消了关注！&quot;</span>,data.get(<span class="string">&quot;FromUserName&quot;</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Constant.EVENT_TYPE_CLICK:</span><br><span class="line">                result = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Constant.EVENT_TYPE_TRANSFER_CUSTOMER_SERVICE:</span><br><span class="line">                result = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理关注事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">ProcessSubscribeEvent</span><span class="params">(Map&lt;String, String&gt; data)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fromUserName</span> <span class="operator">=</span> data.get(<span class="string">&quot;FromUserName&quot;</span>);</span><br><span class="line">        TextMessage textMessage=<span class="keyword">new</span> <span class="title class_">TextMessage</span>();</span><br><span class="line">        textMessage.setToUserName(data.get(<span class="string">&quot;FromUserName&quot;</span>));</span><br><span class="line">        textMessage.setFromUserName(data.get(<span class="string">&quot;ToUserName&quot;</span>));</span><br><span class="line">        textMessage.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()).getTime());</span><br><span class="line">        textMessage.setMsgType(Constant.MESSAGE_TYPE_TEXT);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.queryUserByUserName(fromUserName);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>) &#123;</span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUserid(UUID.randomUUID().toString());</span><br><span class="line">            user.setUsername(fromUserName);</span><br><span class="line">            user.setUserphase(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            user.setCreatetime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            userMapper.insert(user);</span><br><span class="line">            textMessage.setContent(<span class="string">&quot;我是迷浊,感谢您的关注！我的博客:http://www.mizhuo.site,有什么意见可以给我留言哦！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            user.setUserphase(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            user.setUpdatetime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            userMapper.updateByPrimaryKey(user);</span><br><span class="line">            textMessage.setContent(<span class="string">&quot;欢迎回来,我的老朋友,我是迷浊,博客:http://www.mizhuo.site,有什么意见可以给我留言哦！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> MessageUtil.textMessageToXml(textMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理取消关注事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">ProcessUnSubscribeEvent</span><span class="params">(Map&lt;String, String&gt; data)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fromUserName</span> <span class="operator">=</span> data.get(<span class="string">&quot;FromUserName&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.queryUserByUserName(fromUserName);</span><br><span class="line">        user.setUserphase(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        user.setUpdatetime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        userMapper.updateByPrimaryKey(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>至此,微信公众号部分小功能已完成。关注自己的公众号，进行功能测试。也可以使用测试号进行测试，后续可以继续添加自己的功能实现。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 微信公众号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发【二】</title>
      <link href="/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E3%80%90%E4%BA%8C%E3%80%91/"/>
      <url>/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E3%80%90%E4%BA%8C%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>上一节我们已经将环境搭建好了,现在可以开始接入微信公众号了。</p><span id="more"></span><h4 id="微信公众号接入"><a href="#微信公众号接入" class="headerlink" title="微信公众号接入"></a>微信公众号接入</h4><blockquote><p>根据<a href="https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html">微信官方文档</a>，接入微信公众平台开发，开发者需要按照如下步骤完成：</p></blockquote><ul><li><p>填写服务器配置<br>  登录微信公众平台，菜单栏找到 <strong><span style='color:red;'>“开发”-&gt;”基本配置”-&gt;”服务器配置”</span></strong></p>  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031110118.png" style="zoom:50%;" />        <p>  <code>URL</code>:就是服务器地址即公众号后台逻辑处理的入口地址，目前只支持80端口，我们所有的操作请求、逻辑处理都要从这个地址进入。包括接下来的服务器验证都要从这个地址进入。但是验证服务器使用的是GET请求，其它逻辑处理使用的是POST请求。</p><p>   <code>Token</code>:可由开发者可以任意填写，用作生成签名（该Token会和接口URL中包含的Token进行比对，从而验证安全性）。</p><p>  <code>EncodingAESKey</code>:由开发者手动填写或随机生成，将用作消息体加解密密钥。</p></li><li><p>验证服务器<br>  填写好服务器信息后就可以开始验证了。点击提交后，微信服务器将发送GET请求到填写的服务器地址URL上，这个GET请求会携带四个参数。</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">signature</td><td align="center">微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</td></tr><tr><td align="center">timestamp</td><td align="center">时间戳</td></tr><tr><td align="center">nonce</td><td align="center">随机数</td></tr><tr><td align="center">echostr</td><td align="center">随机字符串</td></tr></tbody></table><p>  我们需要接收这个GET请求，并通过signature来对请求进行校验。确认此次GET请求来自微信服务器，然后原样返回echostr。加密&#x2F;校验流程如下：</p><ul><li>将token、timestamp、nonce三个参数进行字典序排序。</li><li>将三个参数字符串拼接成一个字符串进行sha1加密。</li><li>开发者获得加密后的字符串可与signature对比，标识该请求来源于微信。</li></ul></li></ul><h4 id="创建java项目"><a href="#创建java项目" class="headerlink" title="创建java项目"></a>创建java项目</h4><p>我这里使用了Idea创建了一个Spring-boot项目。<br><img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031110134.png" style="zoom: 25%;" /></p><ul><li>创建一个工具类，用来验证签名。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.util</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AccessUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 微信公众号验证服务器的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-15 10:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessUtil</span> &#123;</span><br><span class="line">    <span class="comment">/* 定义Token，要与配置信息中填写的Token一致。 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;weChat.AccountInfo.token&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        AccessUtil.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证签名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature：微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timestamp：时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nonce：随机数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkSignature</span><span class="params">(String signature,String timestamp,String nonce)</span>&#123;</span><br><span class="line">        <span class="comment">//1):将token、timestamp、nonce三个参数进行字典序排序</span></span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;token,timestamp,nonce&#125;;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="comment">//2):将三个参数字符串拼接成一个字符串进行sha1加密</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String s : arr) &#123;</span><br><span class="line">            sb.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tempStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            md = MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = md.digest(sb.toString().getBytes());</span><br><span class="line">            tempStr = byteToStr(bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        sb = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//3):获得加密后的字符串可与signature对比，标识该请求来源于微信</span></span><br><span class="line">        <span class="type">return</span> <span class="variable">tempStr</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">false</span> : tempStr.equals(signature);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将加密后的字符数组转换成字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">byteToStr</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] HEX_DIGITS = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> bytes.length;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(len * <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 把密文转换成十六进制的字符串形式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            buf.append(HEX_DIGITS[(bytes[j] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>]);</span><br><span class="line">            buf.append(HEX_DIGITS[bytes[j] &amp; <span class="number">0x0f</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buf.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建Controller类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.mizhuo.wechat.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.service.MessageService;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.service.UserReqHistoryService;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.util.AccessUtil;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.util.Constant;</span><br><span class="line"><span class="keyword">import</span> fun.mizhuo.wechat.util.MessageUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>: fun.mizhuo.wechat.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: CoreController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Decription</span>: 核心Controller 用于接入微信公众号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: MiZhuo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2019-10-15 14:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoreController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserReqHistoryService historyService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接入微信公众号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timestamp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nonce</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> echostr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">checkSignature</span><span class="params">(<span class="meta">@RequestParam(value = &quot;signature&quot;,required = false)</span> String signature,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(value = &quot;timestamp&quot;,required = false)</span> String timestamp,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(value = &quot;nonce&quot;,required = false)</span> String nonce,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@RequestParam(value = &quot;echostr&quot;,required = false)</span> String echostr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (AccessUtil.checkSignature(signature, timestamp, nonce)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;[&#123;&#125;]接入微信公众号成功&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()));</span><br><span class="line">            <span class="keyword">return</span> echostr;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;[&#123;&#125;]接入微信公众号失败&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>修改本地项目启动端口为80,调试的时候,开启NATAPP。<img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031110146.png" style="zoom:50%;" />然后就可以提交了。提交成功后就可以启动服务器配置，开始我们的微信公众号的开发了。<img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031110154.png" style="zoom:50%;" /></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微信公众号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发【一】</title>
      <link href="/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E3%80%90%E4%B8%80%E3%80%91/"/>
      <url>/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E3%80%90%E4%B8%80%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>微信公众号大家都很了解,平常用的都很多,一些普通的功能设置很简单,但是有些复杂的功能是无法通过简单的设置实现的,需要进行功能开发。</p><span id="more"></span><h4 id="注册微信公众号"><a href="#注册微信公众号" class="headerlink" title="注册微信公众号"></a>注册微信公众号</h4><ul><li>首先，咱要开发微信公众号，总得有一个微信公众号账号吧。<a href="https://mp.weixin.qq.com/">跳转注册</a>。点击页面右上角的立即注册，进入注册界面,选择注册的账号类型，个人的话选择订阅号，完善基本信息就可以注册成功了。<img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105648.png" style="zoom:50%;" /></li><li>注册成功后就可以登陆进入微信公众平台的后台了。<img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105705.png" style="zoom:50%;" /></li><li>接下来可以在左下角的公众号设置修改公众号的信息。但是<span style='color:red;font-size:18px;'>修改信息是有次数限制的</span>,大家慎重行事！<img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105717.png" style="zoom:50%;" /></li></ul><h4 id="搭建微信公众号本地测试环境"><a href="#搭建微信公众号本地测试环境" class="headerlink" title="搭建微信公众号本地测试环境"></a>搭建微信公众号本地测试环境</h4><blockquote><p>因为正常情况，很多接口需要在服务器上验证，每次修改一点代码就需要重新部署一次太过于麻烦，严重影响开发效率。所以我们需要搭建微信公众号本地测试环境。</p></blockquote><ul><li>微信公众平台接口测试帐号申请<br>  <a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login">跳转申请</a>点进去扫一扫就可以免注册登陆测试账号了。会得到两个参数，这就是我们需要用到的参数。  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105728.png" style="zoom:50%;" /></li><li>开启内网穿透<br>因为公众号开发涉及到微信的回调，所以你本地搭建的服务器需要外网能够访问，这个时候就需要把运行在内网的服务器映射到外网去给微信访问。这个时候就需要我们开启内网穿透了。这里推荐使用<a href="https://natapp.cn/">NATAPP</a>,体积小巧，功能强大。<br>进入<a href="https://natapp.cn/">NATAPP</a>主页，根据自己电脑版本下载软件。<img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105744.png" style="zoom:50%;" />下载完成后，解压压缩包，安装Natapp,这个时候你会发现安装不成功。会弹出下面这个窗口，提示认证错误。<img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105755.png" style="zoom:50%;" />这个时候又需要我们进行一系列的操作了。<ul><li>为NATAPP配置环境变量  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105807.png" style="zoom:50%;" /></li><li>获得authtoken<br>  进入<a href="https://natapp.cn/">NATAPP</a>主页免费注册，需要登录支付宝进行实名认证。认证结束后，接下来就可以创建隧道了。有免费的和付费的，可以自行选择。  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105822.png" style="zoom:50%;" /></li><li>填好隧道名称和端口就可以创建一条隧道了。  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105833.png" style="zoom:50%;" /></li><li>然后进入我的隧道就能看见刚刚创建好的隧道信息了。  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105843.png" style="zoom:50%;" /></li><li>复制好你的authtoken，cmd执行natapp -authtoken 你复制的token 回车，出现下图说明已经成功了。  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105854.png" style="zoom:50%;" /></li><li>浏览器输入图中的Forwarding 中的外网地址就可以访问我们的内网了。如果出现下图情况不要慌张，这是正常情况。  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105903.png" style="zoom:50%;" />  这代表natapp客户端已经连接成功,你本地端口的Web服务(nginx,iis等)没有开启或者端口不正确.比如 Tomat的默认端口是 8080.则需要在隧道配置处,将本地改为8080,保存后重启客户端.用浏览器打开 http://127.0.0.1 来确认已开启web服务 (不输入端口代表80)  <img src="https://mizhuo-1259163026.cos.ap-chengdu.myqcloud.com/20191031105920.png" style="zoom:50%;" /></li></ul></li></ul><p><strong>到这里我们的调试环境就已经OK了，下一步就可以开始接入咱们的微信公众号了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 微信公众号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB2系列【三】</title>
      <link href="/DB2%E7%B3%BB%E5%88%97%E3%80%90%E4%B8%89%E3%80%91/"/>
      <url>/DB2%E7%B3%BB%E5%88%97%E3%80%90%E4%B8%89%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>日常使用DB2时，总会出现各种各样的错误，而数据库只会提示一个错误码或错误状态，很难直观的知道错误的原因，这里记录一下错误码对应的原因,方便查询问题。</p><span id="more"></span><table><thead><tr><th align="center">SQLCODE(错误码)</th><th align="center">SQLSTATE(错误状态)</th><th align="center">Description(说明)</th></tr></thead><tbody><tr><td align="center">000</td><td align="center">00000</td><td align="center">SQL语句成功完成</td></tr><tr><td align="center">01xxx</td><td align="center"></td><td align="center">SQL语句成功完成,但是有警告</td></tr><tr><td align="center">+012</td><td align="center">01545</td><td align="center">未限定的列名被解释为一个有相互关系的引用</td></tr><tr><td align="center">+098</td><td align="center">01568</td><td align="center">动态SQL语句用分号结束</td></tr><tr><td align="center">+100</td><td align="center">02000</td><td align="center">没有找到满足SQL语句的行</td></tr><tr><td align="center">+110</td><td align="center">01561</td><td align="center">用DATACAPTURE定义的表的更新操作不能发送到原来的子系统</td></tr><tr><td align="center">+111</td><td align="center">01590</td><td align="center">为2型索引设置了SUBPAGES语句</td></tr><tr><td align="center">+117</td><td align="center">01525</td><td align="center">要插入的值的个数不等于被插入表的列数</td></tr><tr><td align="center">+162</td><td align="center">01514</td><td align="center">指定的表空间被置为检查挂起状态</td></tr><tr><td align="center">+203</td><td align="center">01552</td><td align="center">使用非唯一的名字来解决命名的限定列</td></tr><tr><td align="center">+204</td><td align="center">01532</td><td align="center">命名的对象未在DB2中定义</td></tr><tr><td align="center">+206</td><td align="center">01533</td><td align="center">命名的列不在SQL语句中指定的任何表中存在</td></tr><tr><td align="center">+218</td><td align="center">01537</td><td align="center">因为SQL语句引用一个远程对象,不能为该SQL语句执行EXPLAIN</td></tr><tr><td align="center">+219</td><td align="center">01532</td><td align="center">命名的PLANTABLE不存在</td></tr><tr><td align="center">+220</td><td align="center">01546</td><td align="center">不正确定义PLANTABLE,检查命名列的定义</td></tr><tr><td align="center">+236</td><td align="center">01005</td><td align="center">SQLDA中的SQLN的值至少应于所描述的列的个数一样大</td></tr><tr><td align="center">+237</td><td align="center">01594</td><td align="center">至少有一个被描述的列应该是单值类型,因此扩展的SQLVAR条目需要另外的空间</td></tr><tr><td align="center">+238</td><td align="center">01005</td><td align="center">至少应有一个被描述的列是一个LOB,因此扩展的SQLVAR条目需要另外的空间</td></tr><tr><td align="center">+239</td><td align="center">01005</td><td align="center">至少应有一个被描述的列应是单值类型,因此扩展的SQLVAR条目需要另外的空间</td></tr><tr><td align="center">+304</td><td align="center">01515</td><td align="center">该值不能被分配给宿主变量,因为该值不再数据类型的范围之内</td></tr><tr><td align="center">+331</td><td align="center">01520</td><td align="center">不能被翻译的字符串,因此被设置为NULL</td></tr><tr><td align="center">+339</td><td align="center">01569</td><td align="center">由于与DB22.2版本的子系统连接,所以可能存在字符转换问题</td></tr><tr><td align="center">+394</td><td align="center">01629</td><td align="center">使用优化提示来选择访问路径</td></tr><tr><td align="center">+395</td><td align="center">01628</td><td align="center">设置了无效的优化提示,原因代码指定了为什么,忽略优化提示</td></tr><tr><td align="center">+402</td><td align="center">01521</td><td align="center">未知的位置</td></tr><tr><td align="center">+403</td><td align="center">01522</td><td align="center">本地不存在CREATALIAS对象</td></tr><tr><td align="center">+434</td><td align="center">01608</td><td align="center">在DB2未来发布的版本中将不支持指定的特性,IBM建议你停止使用这些特性</td></tr><tr><td align="center">+445</td><td align="center">01004</td><td align="center">值被CAST函数截取</td></tr><tr><td align="center">+462</td><td align="center">01Hxx</td><td align="center">由用户定义的函数或存储过程发出的警告</td></tr><tr><td align="center">+464</td><td align="center">01609</td><td align="center">命名的存储过程超出了它可能返回的查询结果集的个数限制</td></tr><tr><td align="center">+466</td><td align="center">01610</td><td align="center">指定由命名的存储过程返回的查询结果集的个数.成功完成</td></tr><tr><td align="center">+494</td><td align="center">01614</td><td align="center">由存储过程返回的结果集的个数超过了由ASSOCIATELOCATORS语句指定的结果集定位器的个数</td></tr><tr><td align="center">+495</td><td align="center">01616</td><td align="center">因为倒台SQL的成本估算超出了在ELST中指定的警告阀值,所以发出警告</td></tr><tr><td align="center">+535</td><td align="center">01591</td><td align="center">请求一个主健的定位更新,或请求一个使用自我引出约束的表的删除操作</td></tr><tr><td align="center">+541</td><td align="center">01543</td><td align="center">命名外健是一个重复的引用约束</td></tr><tr><td align="center">+551</td><td align="center">01548</td><td align="center">命名的授权ID缺少在命名的DB2对象上执行命名操作的权限</td></tr><tr><td align="center">+552</td><td align="center">01542</td><td align="center">命名的授权ID缺少执行命名操作的权限</td></tr><tr><td align="center">+558</td><td align="center">01516</td><td align="center">已经被授权该PUBLIC,因此WITHGRANTOPTION不可用</td></tr><tr><td align="center">+561</td><td align="center">01523</td><td align="center">对ALTERREFERENCESINDEX和TRIGGER特权,PUBLICATALLLOCATION无效</td></tr><tr><td align="center">+562</td><td align="center">01560</td><td align="center">因为GRANTEE已经拥有这些特权,所以一个或更多的特权被忽略</td></tr><tr><td align="center">+585</td><td align="center">01625</td><td align="center">模式名指定了不止一次</td></tr><tr><td align="center">+599</td><td align="center">01596</td><td align="center">没有为长字符数据类型(BLOB,CLOB和DBCLOB)建立比较函数</td></tr><tr><td align="center">+610</td><td align="center">01566</td><td align="center">由于建立了一个指定为DEFERYES的索引,指定的对象处于PENDING状态,或者因为使用了ALTERINDEX改变关键值的范围,所以指定的对象处于PENDING状态</td></tr><tr><td align="center">+625</td><td align="center">01518</td><td align="center">因为删除了主健索引,所以表定义被标注为不完整</td></tr><tr><td align="center">+626</td><td align="center">01529</td><td align="center">删除了加强UNIQUE约束的索引,唯一性不在被加强</td></tr><tr><td align="center">+645</td><td align="center">01528</td><td align="center">因为建立的索引中没有包含NULL,所以WHERENOTNULL被忽略</td></tr><tr><td align="center">+650</td><td align="center">01538</td><td align="center">不能更改或者建立已命名的表为从属表</td></tr><tr><td align="center">+653</td><td align="center">01551</td><td align="center">在已指定的分区表空间中尚没有建立指定的分区索引,所以分区索引不可得</td></tr><tr><td align="center">+655</td><td align="center">01597</td><td align="center">为CREATE或ALTERSTOGROUP语句指定特定或者非特定的卷ID,在DB2较新发布的版本中(版本6以后)将不再支持他们</td></tr><tr><td align="center">+658</td><td align="center">01600</td><td align="center">当建立目录索引时,不能指定SUBPAGES语句,SUBPAGES将被忽略,并缺省为1</td></tr><tr><td align="center">+664</td><td align="center">01540</td><td align="center">分区索引的限制关键字超出了最大值</td></tr><tr><td align="center">+738</td><td align="center">01530</td><td align="center">已命名的对象的更改可能像只读系统中对象的改变要求一样</td></tr><tr><td align="center">+799</td><td align="center">0157</td><td align="center">SET语句中引用的特定寄存器不存在,将忽略SET请求</td></tr><tr><td align="center">+802</td><td align="center">01519</td><td align="center">数据溢出或者因除法异常而引起的数据异常错误</td></tr><tr><td align="center">+806</td><td align="center">01553</td><td align="center">ISOLATION(RR)与LOCKSIZEPAGE冲突</td></tr><tr><td align="center">+807</td><td align="center">01554</td><td align="center">由于十进制乘法导致溢出</td></tr><tr><td align="center">+863</td><td align="center">01539</td><td align="center">连接成功,但是只支持SBCS</td></tr><tr><td align="center">+2000</td><td align="center">56094</td><td align="center">SUBPAGES不等于1的1型索引不能成为数据共享环境中的缓冲池组依赖者</td></tr><tr><td align="center">+2002</td><td align="center">01624</td><td align="center">因为指定的缓冲池不允许超高速缓存,GNPCACHE指定被忽略</td></tr><tr><td align="center">+2007</td><td align="center">01602</td><td align="center">因为DB2子系统的参数禁用“提示(hiats)”所以不能指定优化提示</td></tr><tr><td align="center">+30100</td><td align="center">01558</td><td align="center">分布式协议错误被检测到,提供原来的SQLCODE和SQLSTATE</td></tr><tr><td align="center">-007</td><td align="center">42601</td><td align="center">SQL语句中由非法字符</td></tr><tr><td align="center">-010</td><td align="center">42603</td><td align="center">字符串常量非正常终止;检查到有遗漏的引号标志</td></tr><tr><td align="center">-029</td><td align="center">42601</td><td align="center">需要INTO语句</td></tr><tr><td align="center">-060</td><td align="center">42815</td><td align="center">某特定数据类型的长度或者标量规范无效</td></tr><tr><td align="center">-084</td><td align="center">42612</td><td align="center">不能执行SQL语句,因为该语句对动态SQL无效或者对OS&#x2F;390的DB2无效</td></tr><tr><td align="center">-097</td><td align="center">42601</td><td align="center">在单位类型、用户自定义的函数以及过程中不能使用带有CAST的LONGVARCHAR或LONGVARGRAPHIC</td></tr><tr><td align="center">-101</td><td align="center">54001</td><td align="center">SQL语句超出了已确定的DB2限制:例如,表的数目太多,语句中的字节太多</td></tr><tr><td align="center">-102</td><td align="center">54002</td><td align="center">字符串常量太长</td></tr><tr><td align="center">-103</td><td align="center">42604</td><td align="center">无效数学文字</td></tr><tr><td align="center">-104</td><td align="center">42601</td><td align="center">SQL语句中遇到非法符号</td></tr><tr><td align="center">-105</td><td align="center">42604</td><td align="center">无效的字符串格式;通常引用一个格式不正确的图形字符串</td></tr><tr><td align="center">-107</td><td align="center">42622</td><td align="center">对象名太长</td></tr><tr><td align="center">-108</td><td align="center">42601</td><td align="center">RENAME语句中指定的名字有错误,不能使用限定词</td></tr><tr><td align="center">-109</td><td align="center">42601</td><td align="center">指定了无效语句;例如CREATEVIEW不能包含ORDERBY语句</td></tr><tr><td align="center">-110</td><td align="center">42606</td><td align="center">遇到了无效的十六进制的文字</td></tr><tr><td align="center">-111</td><td align="center">42901</td><td align="center">指定的列函数没有给出列名</td></tr><tr><td align="center">-112</td><td align="center">42607</td><td align="center">无效的列函数语法;列函数不能运行与其他的列函数之上</td></tr><tr><td align="center">-113</td><td align="center">42602</td><td align="center">遇到无效字符</td></tr><tr><td align="center">-114</td><td align="center">42961</td><td align="center">该语句的位置名称必须与当前服务器匹配,但是却没有匹配</td></tr><tr><td align="center">-115</td><td align="center">42601</td><td align="center">因为比较运算符没有伴着一个表达式或者列表,遇到了无效谓词</td></tr><tr><td align="center">-117</td><td align="center">42802</td><td align="center">待插入的数值的个数于被插入的行中的列数不相等</td></tr><tr><td align="center">-118</td><td align="center">42902</td><td align="center">数据修改语句(UPDATE或DELETE)和FROM语句中的表和视图命名不合法</td></tr><tr><td align="center">-119</td><td align="center">42803</td><td align="center">HAVING语句中的列的列表与GROUPBY语句中的列列表不匹配</td></tr><tr><td align="center">-120</td><td align="center">42903</td><td align="center">不允许WHERE语句、SET语句、VALUES语句或者SETASSIGNMENT语句引用列函数</td></tr><tr><td align="center">-121</td><td align="center">42701</td><td align="center">在INSERT或UPDATE语句中,某一列被非法引用了两次</td></tr><tr><td align="center">-122</td><td align="center">42803</td><td align="center">非法使用了列函数.因为没有用于一个列函数的所有列不再GROUPBY语句中</td></tr><tr><td align="center">-123</td><td align="center">42601</td><td align="center">特定位置的参数必须是一个常数或者一个关键词</td></tr><tr><td align="center">-125</td><td align="center">42805</td><td align="center">ORDERBY语句中指定了无效数字,该数字要么小于1要么大于选定的列数</td></tr><tr><td align="center">-126</td><td align="center">42829</td><td align="center">不能为一个UPDATE语句指定ORDERBY语句</td></tr><tr><td align="center">-127</td><td align="center">42905</td><td align="center">在子选择中DISTINCT只能指定一次</td></tr><tr><td align="center">-128</td><td align="center">42601</td><td align="center">SQL谓词中NULL使用不当</td></tr><tr><td align="center">-129</td><td align="center">54004</td><td align="center">SQL语句中包含的表多于15个</td></tr><tr><td align="center">-130</td><td align="center">22019</td><td align="center">ESCAPE语句必须为一个字符</td></tr><tr><td align="center">22025</td><td align="center"></td><td align="center">无效的ESCAPE模式</td></tr><tr><td align="center">-131</td><td align="center">42818</td><td align="center">LIKE谓词只能用于字符数据</td></tr><tr><td align="center">-132</td><td align="center">42824</td><td align="center">LIKE语句、ESCAPE语句、LOCATE函数或POSSTR函数中有无效运算对象</td></tr><tr><td align="center">-133</td><td align="center">42906</td><td align="center">无效相关子查询引用</td></tr><tr><td align="center">-134</td><td align="center">42907</td><td align="center">大于255字节的列被不正确使用</td></tr><tr><td align="center">-136</td><td align="center">54005</td><td align="center">排序关键字的长度大于4000字节</td></tr><tr><td align="center">-137</td><td align="center">54006</td><td align="center">被连接的字符串太大;字符的最大值为32767;图形的最大值为16382</td></tr><tr><td align="center">-138</td><td align="center">22011</td><td align="center">SUBSTR列函数的第二个或第三个操作符无效</td></tr><tr><td align="center">-142</td><td align="center">42612</td><td align="center">不支持的SQL语句.该语句可能在另外的RDBMS上有效,也有可能在其他的上下文中有效(例如,VALUES只能在触发器中出现)</td></tr><tr><td align="center">-144</td><td align="center">58003</td><td align="center">指定的段号无效</td></tr><tr><td align="center">-147</td><td align="center">42809</td><td align="center">某一源函数不能更改.要改变源函数,必须删除该源函数并重新建立他</td></tr><tr><td align="center">-148</td><td align="center">42809</td><td align="center">RENAME和ALTER无法执行.RENAME不能对视图或者活动RI.ST表重新命名.ALTER不能用于改变列的长度,因为该列参与了RI、一个用户退出程序、全局的临时表或打开DATACAPTURECHANGES表的列</td></tr><tr><td align="center">-150</td><td align="center">42807</td><td align="center">触发活动的INSERT,UPDATE或DELETE语句中指定了无效的视图更新或一个无效的转换表</td></tr><tr><td align="center">-151</td><td align="center">42808</td><td align="center">试图更新一个不可更新的视图的列、一个DB2CATALOG表的列或者一个ROWID列</td></tr><tr><td align="center">-152</td><td align="center">42809</td><td align="center">DROPCHECK试图删除一个参照约束,或者DROPFOREIGN试图删除一个检查约束</td></tr><tr><td align="center">-153</td><td align="center">42908</td><td align="center">无效的视图建立请求,必须为旋转列表中列出的列出的未命名的列或者重复的列提供一个名字</td></tr><tr><td align="center">-154</td><td align="center">42909</td><td align="center">不能用UNION、UNIONALL或者一个远程表建立视图</td></tr><tr><td align="center">-156</td><td align="center">42809</td><td align="center">在视图上建立索引是非法的,或者在ALTERTABLE,CREATETRIGGER,DROPTABLE或LOCKTABLE语句上指定一个不是表的其他对象这是无效的</td></tr><tr><td align="center">-157</td><td align="center">42810</td><td align="center">必须在FOREIGNKEY语句中指定一个表名</td></tr><tr><td align="center">-158</td><td align="center">42811</td><td align="center">视图的列和选择列表中的列不相匹配</td></tr><tr><td align="center">-159</td><td align="center">42089</td><td align="center">无效DROP或COMMENTON语句</td></tr><tr><td align="center">-160</td><td align="center">42813</td><td align="center">对该视图的WITHCHECKOPTION无效</td></tr><tr><td align="center">-161</td><td align="center">44000</td><td align="center">正被更新的视图WITHCHECKOPTION语句使得这行不能被插入或更新</td></tr><tr><td align="center">-164</td><td align="center">42502</td><td align="center">用户没有建立这个视图的权限</td></tr><tr><td align="center">-170</td><td align="center">42605</td><td align="center">标量函数指定了无效的参数个数</td></tr><tr><td align="center">-171</td><td align="center">42815</td><td align="center">标量函数指定了无效的数据类型长度或者无效数值</td></tr><tr><td align="center">-173</td><td align="center">42801</td><td align="center">在非只读型的游标上不能指定隔离级别UR</td></tr><tr><td align="center">-180</td><td align="center">22007</td><td align="center">DATE、TIME、TIMESTAMP值的字符串表示法的语法不对</td></tr><tr><td align="center">-181</td><td align="center">22001</td><td align="center">不是有效的DATE、TIME、TIMESTAMP值</td></tr><tr><td align="center">-182</td><td align="center">42816</td><td align="center">在算术表达式中的日期&#x2F;时间值无效</td></tr><tr><td align="center">-183</td><td align="center">22008</td><td align="center">在算术表达式中返回的日期&#x2F;时间值的结果不在有效值的范围内</td></tr><tr><td align="center">-184</td><td align="center">42610</td><td align="center">没有正确使用日期&#x2F;时间值的参数标记</td></tr><tr><td align="center">-185</td><td align="center">57008</td><td align="center">没有定义本定的日期&#x2F;时间出口</td></tr><tr><td align="center">-186</td><td align="center">22505</td><td align="center">改变本定的日期&#x2F;时间出口引发这个程序的长度无效</td></tr><tr><td align="center">-187</td><td align="center">22506</td><td align="center">MVS返回无效的当前日期&#x2F;时间</td></tr><tr><td align="center">-188</td><td align="center">22503</td><td align="center">字符串表示无效</td></tr><tr><td align="center">-189</td><td align="center">22522</td><td align="center">指定的编码字符集的ID无效或没有定义</td></tr><tr><td align="center">-190</td><td align="center">42837</td><td align="center">不能象所设定的那样改变(ALTER)列.只能改变(ALTER)VARCHAR列的长度</td></tr><tr><td align="center">-191</td><td align="center">22504</td><td align="center">字符串中包含了无效的混合数据</td></tr><tr><td align="center">-197</td><td align="center">42877</td><td align="center">当两个或多个表被联合在一起排序时,限定的列名不能在ORDERBY语句中使用</td></tr><tr><td align="center">-198</td><td align="center">42617</td><td align="center">试图对空的字符串发布一个PREPARE或EXECUTEIMMEDIATE语句</td></tr><tr><td align="center">-199</td><td align="center">42601</td><td align="center">SQL语句中使用了非法关键词</td></tr><tr><td align="center">-203</td><td align="center">42702</td><td align="center">模糊列引用</td></tr><tr><td align="center">-204</td><td align="center">42704</td><td align="center">没有定义的对象名</td></tr><tr><td align="center">-205</td><td align="center">42703</td><td align="center">指定的表的列名无效</td></tr><tr><td align="center">-206</td><td align="center">42703</td><td align="center">列名没有在FROM语句所引用的任何表中,或者没有在定义触发器所在的表中</td></tr><tr><td align="center">-208</td><td align="center">42707</td><td align="center">不能ORDERBY指定列,应为该列不在选择列表中</td></tr><tr><td align="center">-212</td><td align="center">42712</td><td align="center">指定的表名在触发器中不允许多次使用,只能使用一次</td></tr><tr><td align="center">-214</td><td align="center">42822</td><td align="center">DISTINCT、ORDERBY引起的无效表达式</td></tr><tr><td align="center">-219</td><td align="center">42704</td><td align="center">因为PLAN_TABLE不存在,EXPLAIN无法执行</td></tr><tr><td align="center">-220</td><td align="center">55002</td><td align="center">遇到无效的PLAN_TABLE列</td></tr><tr><td align="center">-221</td><td align="center">55002</td><td align="center">如果为PLAN_TABLE定义了可供选择的列,那么,必须定义所有的列</td></tr><tr><td align="center">-229</td><td align="center">42708</td><td align="center">指定的现场找不到</td></tr><tr><td align="center">-240</td><td align="center">428B4</td><td align="center">LOCKTABLE语句的PART子句无效</td></tr><tr><td align="center">-250</td><td align="center">42718</td><td align="center">没有定义本地位置名</td></tr><tr><td align="center">-251</td><td align="center">42602</td><td align="center">记号无效</td></tr><tr><td align="center">-300</td><td align="center">22024</td><td align="center">宿主变量或参数中的字符串不是以NULL为终止</td></tr><tr><td align="center">-301</td><td align="center">42895</td><td align="center">无效的宿主变量数据类型</td></tr><tr><td align="center">-302</td><td align="center">22001</td><td align="center">输入的变量值对指定的列无效</td></tr><tr><td align="center">22003</td><td align="center"></td><td align="center">输入的变量值对指定的列而言太大</td></tr><tr><td align="center">-303</td><td align="center">42806</td><td align="center">因为数据类型不兼容,不能分配数值</td></tr><tr><td align="center">-304</td><td align="center">22003</td><td align="center">因为数据超出了范围,不能分配数值</td></tr><tr><td align="center">-305</td><td align="center">22002</td><td align="center">没有NULL指示符变量</td></tr><tr><td align="center">-309</td><td align="center">22512</td><td align="center">因为引用的宿主变量被设置成NULL,所以谓词无效</td></tr><tr><td align="center">-310</td><td align="center">22501</td><td align="center">十进制的宿主变量或参数包含非十进制数据</td></tr><tr><td align="center">-311</td><td align="center">22501</td><td align="center">输入的宿主变量长度无效,或者时负值或者太大</td></tr><tr><td align="center">-312</td><td align="center">42618</td><td align="center">没有定义宿主变量或者宿主变量不可用</td></tr><tr><td align="center">-313</td><td align="center">07001</td><td align="center">宿主变量的个数不等于参数标识的个数</td></tr><tr><td align="center">-314</td><td align="center">42714</td><td align="center">模糊的宿主变量引用</td></tr><tr><td align="center">-327</td><td align="center">22525</td><td align="center">在最后分区的关键字范围内,不能插入行</td></tr><tr><td align="center">-330</td><td align="center">22021</td><td align="center">不能成功的翻译字符串</td></tr><tr><td align="center">-331</td><td align="center">22021</td><td align="center">字符串不能分配到宿主变量,因为其不能成功的被翻译</td></tr><tr><td align="center">-332</td><td align="center">57017</td><td align="center">不能为两个命名的编码字符集的ID定义翻译规则</td></tr><tr><td align="center">-333</td><td align="center">56010</td><td align="center">子类型无效导致翻译失败</td></tr><tr><td align="center">-338</td><td align="center">42972</td><td align="center">ON语句无效,必须引用连接的列</td></tr><tr><td align="center">-339</td><td align="center">56082</td><td align="center">访问DB22.2版本的子系统被拒绝,原因时ASCII到EBCDIC翻译不能进行</td></tr><tr><td align="center">-350</td><td align="center">42962</td><td align="center">无效的大对象规范</td></tr><tr><td align="center">-351</td><td align="center">56084</td><td align="center">SELECT列表中有不支持的数据类型</td></tr><tr><td align="center">-352</td><td align="center">56084</td><td align="center">输入列表中有不支持的数据类型</td></tr><tr><td align="center">-355</td><td align="center">42993</td><td align="center">LOB列太大,以至不能被记录在日志中</td></tr><tr><td align="center">-372</td><td align="center">428C1</td><td align="center">每个表只允许有一个ROWID列</td></tr><tr><td align="center">-390</td><td align="center">42887</td><td align="center">在上下文中指定的函数无效</td></tr><tr><td align="center">-392</td><td align="center">42855</td><td align="center">自从前一次FETCH以来,指定游标的SQLDA已被不恰当的改变</td></tr><tr><td align="center">-396</td><td align="center">38505</td><td align="center">在最后的访问过程中,视图执行SQL语句</td></tr><tr><td align="center">-397</td><td align="center">428D3</td><td align="center">在某一列上不恰当的指定了GENERATED因为该列不是ROWID数据类型</td></tr><tr><td align="center">-398</td><td align="center">428D2</td><td align="center">为某一个宿主变量请求LOCATOR,但是该宿主变量不是一个LOB</td></tr><tr><td align="center">-399</td><td align="center">22511</td><td align="center">在INSERT语句中为ROWID列指定的值无效</td></tr><tr><td align="center">-400</td><td align="center">54027</td><td align="center">在DB2编目中定义的用户自定义索引不能超过100个</td></tr><tr><td align="center">-401</td><td align="center">42818</td><td align="center">算术操作符或比较操作符的操作对象不是兼容的</td></tr><tr><td align="center">-402</td><td align="center">42819</td><td align="center">算术函数不能用于字符或日期时间数据</td></tr><tr><td align="center">-404</td><td align="center">22001</td><td align="center">SQL语句指定的字符串太长</td></tr><tr><td align="center">-405</td><td align="center">42820</td><td align="center">数值文字超出了范围</td></tr><tr><td align="center">-406</td><td align="center">22003</td><td align="center">计算出的或者倒出的数值超出了范围</td></tr><tr><td align="center">-407</td><td align="center">23502</td><td align="center">不能把NULL值插到定义为NOTNULL的列中</td></tr><tr><td align="center">-408</td><td align="center">42821</td><td align="center">数值不能被更新或插入,因为他与列的数据类型不兼容</td></tr><tr><td align="center">-409</td><td align="center">42607</td><td align="center">COUNT函数指定的运算对象无效</td></tr><tr><td align="center">-410</td><td align="center">42820</td><td align="center">浮点文字笔30个字符的最大允许长度长</td></tr><tr><td align="center">-411</td><td align="center">56040</td><td align="center">CURRENTSQLID使用无效</td></tr><tr><td align="center">-412</td><td align="center">42823</td><td align="center">在子查询的选择列表中遇到了多个列</td></tr><tr><td align="center">-413</td><td align="center">22003</td><td align="center">当转换为一个数字型数据类型时,数据溢出</td></tr><tr><td align="center">-414</td><td align="center">42824</td><td align="center">LIKE谓词不能运行于用数字或日期时间类型定义的列</td></tr><tr><td align="center">-415</td><td align="center">42825</td><td align="center">为UNION操作指定的选择列表不是联合兼容的</td></tr><tr><td align="center">-416</td><td align="center">42907</td><td align="center">包含UNION操作符的SQL语句不允许有长的字符串列</td></tr><tr><td align="center">-417</td><td align="center">42609</td><td align="center">两参数标识符作为运算对象被指定在同一谓词的两边</td></tr><tr><td align="center">-418</td><td align="center">42610</td><td align="center">参数标识符使用无效</td></tr><tr><td align="center">-419</td><td align="center">42911</td><td align="center">十进制除法无效</td></tr><tr><td align="center">-420</td><td align="center">22018</td><td align="center">字符串自变量值不符合函数的要求</td></tr><tr><td align="center">-421</td><td align="center">42826</td><td align="center">UNION操作的选择列表中没有提供相同数目的列</td></tr><tr><td align="center">-423</td><td align="center">0F001</td><td align="center">为LOB或结果集定位器指定的值无效</td></tr><tr><td align="center">-426</td><td align="center">2D528</td><td align="center">在不允许更新的应用服务器不允许执行COMMIT语句</td></tr><tr><td align="center">-427</td><td align="center">2D529</td><td align="center">在不允许更新的应用服务器不允许执行ROLLBACK语句</td></tr><tr><td align="center">-430</td><td align="center">38503</td><td align="center">在用户自定义的函数或存储过程中遇到了错误</td></tr><tr><td align="center">-433</td><td align="center">22001</td><td align="center">指定的值太长</td></tr><tr><td align="center">-435</td><td align="center">428B3</td><td align="center">无效的应用定义的SQLSTATE</td></tr><tr><td align="center">-438</td><td align="center">xxxxx</td><td align="center">使用了RAISE_ERROR函数的应用发出了一个错误</td></tr><tr><td align="center">-440</td><td align="center">42884</td><td align="center">存储过程或用户自定义函数的参数列表参数个数于预期的个数不匹配</td></tr><tr><td align="center">-441</td><td align="center">42601</td><td align="center">与标量函数一起使用DISTINCT或ALL是不正确的用法</td></tr><tr><td align="center">-443</td><td align="center">42601</td><td align="center">指定的外部函数返回错误的SQLSTATE</td></tr><tr><td align="center">-444</td><td align="center">42724</td><td align="center">与被称为存储过程或用户自定义函数有关的程序不能找到</td></tr><tr><td align="center">-449</td><td align="center">42878</td><td align="center">对存储过程或用户自定义的函数,CREATE或ALTER语句不正确(缺失#214#</td></tr><tr><td align="center">-450</td><td align="center">39501</td><td align="center">存储过程或用户自定义函数写入存储器的值超过了参数声明的长度</td></tr><tr><td align="center">-451</td><td align="center">42815</td><td align="center">CREATEFUNCTION中指定了不正确的数据类型</td></tr><tr><td align="center">-453</td><td align="center">42880</td><td align="center">用户自定义函数中的RETURNS语句无效</td></tr><tr><td align="center">-454</td><td align="center">42723</td><td align="center">指定的函数识别标记与已存在的另一函数的识别标记冲突</td></tr><tr><td align="center">-455</td><td align="center">42882</td><td align="center">模式名不比配</td></tr><tr><td align="center">-456</td><td align="center">42710</td><td align="center">为用户自定义函数指定的函数名已经存在</td></tr><tr><td align="center">-457</td><td align="center">42939</td><td align="center">用户自定义函数或用户自定义类型正试图使用系统中定义的函数或者类型所用的名称</td></tr><tr><td align="center">-458</td><td align="center">42883</td><td align="center">没有找到函数</td></tr><tr><td align="center">-463</td><td align="center">39001</td><td align="center">特定的外部例程返回无效的SQLSTATE</td></tr><tr><td align="center">-469</td><td align="center">42886</td><td align="center">参数定义为OUT或INOUT的CALL语句必须提供宿主变量</td></tr><tr><td align="center">-470</td><td align="center">39002</td><td align="center">指定了NULL参数,但是该例程却不支持NULL</td></tr><tr><td align="center">-471</td><td align="center">55023</td><td align="center">存储过程或用户自定义函数失败:提供原因代码</td></tr><tr><td align="center">-472</td><td align="center">24517</td><td align="center">外部的函数程序使游标处于打开状态</td></tr><tr><td align="center">-473</td><td align="center">42918</td><td align="center">用户自定义数据类型命名不能和系统定义的数据类型一样</td></tr><tr><td align="center">-475</td><td align="center">42866</td><td align="center">结果类型不能被转换成RETURNS类型</td></tr><tr><td align="center">-476</td><td align="center">42725</td><td align="center">在其模式中该函数不是独一无二的</td></tr><tr><td align="center">-478</td><td align="center">42893</td><td align="center">不能DROP或REVOKE特定的对象,因为其他对象依赖于该对象</td></tr><tr><td align="center">-480</td><td align="center">51030</td><td align="center">直到存储过程已经被CALL后,DESCRIBEPROCEDURE和ASSOCIATELOCATORS才能被发布</td></tr><tr><td align="center">-482</td><td align="center">51030</td><td align="center">存储过程不返回到任何一个定位器</td></tr><tr><td align="center">-483</td><td align="center">42885</td><td align="center">CREATEFUNCTION语句中的参数个数与源函数中的参数个数不匹配</td></tr><tr><td align="center">-487</td><td align="center">38001</td><td align="center">选择了NOSQL选项建立指定的存储过程或用户自定义函数,但却视图发布SQL语句</td></tr><tr><td align="center">-491</td><td align="center">42601</td><td align="center">CREATEFUNCTION语句无效,因为该语句没有RETURNS语句或者因为该语句没有指定有效的SOURCE或者EXTERNAL语句</td></tr><tr><td align="center">-492</td><td align="center">42879</td><td align="center">指定函数的指定参数的个数有错误</td></tr><tr><td align="center">-495</td><td align="center">57051</td><td align="center">语句的估计处理器成本超出了资源限制</td></tr><tr><td align="center">-496</td><td align="center">51033</td><td align="center">语句无法执行,因为当前服务器与调用存储过程的服务器不同</td></tr><tr><td align="center">-497</td><td align="center">54041</td><td align="center">指定的数据库超过了32767OBID的上限,或者CREATEDATABASE语句使之达到了32511DBID的上限</td></tr><tr><td align="center">-499</td><td align="center">24516</td><td align="center">指定的游标已被分配到结果集,该结果集来自已经指定的存储过程</td></tr><tr><td align="center">-500</td><td align="center">24501</td><td align="center">因为连接被破坏,WITHHOLD游标被关闭</td></tr><tr><td align="center">-501</td><td align="center">24501</td><td align="center">在试图获取数据或关闭一个游标前必须打开一个游标</td></tr><tr><td align="center">-502</td><td align="center">24502</td><td align="center">在没有关闭游标前不能再次打开游标</td></tr><tr><td align="center">-503</td><td align="center">42912</td><td align="center">因为列在游标的FORUPDATEOF语句中没有被指定,该游标用于获取该列,所以不能更新该列</td></tr><tr><td align="center">-504</td><td align="center">34000</td><td align="center">不能引用一个游标,因为他不是定义到程序里的</td></tr><tr><td align="center">-507</td><td align="center">24501</td><td align="center">在试图更新或者删除WHERECURRENTOF前,必须打开游标</td></tr><tr><td align="center">-508</td><td align="center">24504</td><td align="center">因为被引用的游标当前不是处于数据行上,所以不能被更新或删除</td></tr><tr><td align="center">-509</td><td align="center">42827</td><td align="center">除了在游标上指定的那个表(该表由WHERECURRENTOF语句引用的)以外,再也不能从别的表上更新数据</td></tr><tr><td align="center">-510</td><td align="center">42828</td><td align="center">表或视图不能被修改</td></tr><tr><td align="center">-511</td><td align="center">42829</td><td align="center">对不可修改的表或视图,FORUPDATEOF语句无效</td></tr><tr><td align="center">-512</td><td align="center">56023</td><td align="center">对远程对象的无效引用</td></tr><tr><td align="center">-513</td><td align="center">42924</td><td align="center">一个别名不能再被定义成另外的别名</td></tr><tr><td align="center">-514</td><td align="center">26501</td><td align="center">游标尚没有被准备</td></tr><tr><td align="center">-516</td><td align="center">26501</td><td align="center">试图描述未准备好的SQL语句</td></tr><tr><td align="center">-517</td><td align="center">07005</td><td align="center">因为SQL语句尚没有准备好,游标无效</td></tr><tr><td align="center">-518</td><td align="center">07003</td><td align="center">试图执行尚没有准备好的SQL语句</td></tr><tr><td align="center">-519</td><td align="center">24506</td><td align="center">当为游标的SQL语句发布一个准备语句是,游标不能是打开的</td></tr><tr><td align="center">-525</td><td align="center">51015</td><td align="center">不能在已指定的程序包中执行SQL语句,因为在绑定时间内该程序包无效</td></tr><tr><td align="center">-526</td><td align="center">42995</td><td align="center">在给定的上下文中,不能使用全局的临时表</td></tr><tr><td align="center">-530</td><td align="center">23503</td><td align="center">对特定的约束名指定了无效的外健值</td></tr><tr><td align="center">-531</td><td align="center">23504</td><td align="center">从版本5开始,父关键字的多行更新将试图删除一个外关键字依赖的父关键字值,在版本5以前,当引用主关键值外健值当前存在时,试图更新该主健值</td></tr><tr><td align="center">-532</td><td align="center">23504</td><td align="center">删除操作违反了已指定的参照约束</td></tr><tr><td align="center">-533</td><td align="center">21501</td><td align="center">多行插入无效,试图将多行插到自我引用的表中</td></tr><tr><td align="center">-534</td><td align="center">21502</td><td align="center">可改变主健列值的更新语句不能在同一时刻用于更新多行</td></tr><tr><td align="center">-535</td><td align="center">21502</td><td align="center">当从自我引用表中删除数据或者更新主健列时,不能指定WHERECURRENTOF.不是版本5的子系统才调用该代码</td></tr><tr><td align="center">-536</td><td align="center">42914</td><td align="center">因为某一特定表的参照约束存在,所以删除语句无效</td></tr><tr><td align="center">-537</td><td align="center">42709</td><td align="center">在外健语句或主健语句的规范中,每个列的出现不能多于一次</td></tr><tr><td align="center">-538</td><td align="center">42830</td><td align="center">无效的外健;不符合引用的表没有主健</td></tr><tr><td align="center">-539</td><td align="center">42888</td><td align="center">不能定义外健,因为被引用的表没有主健</td></tr><tr><td align="center">-540</td><td align="center">57001</td><td align="center">表定义不完整,直到为主健建立了唯一索引或UNIQUE语句、或者包含GENERATEDBYDEFAULT属性的ROWID列</td></tr><tr><td align="center">-542</td><td align="center">42831</td><td align="center">可以为空的列不允许作为主健的一部分包含在内</td></tr><tr><td align="center">-543</td><td align="center">23511</td><td align="center">因为该表是指定了SETNULL删除规则的参照约束的父表而且检查约束不允许NULL,所以DELETE不能发生</td></tr><tr><td align="center">-544</td><td align="center">23512</td><td align="center">不能用ALTER添加检查约束,因为已存在的某行与该检查约束冲突</td></tr><tr><td align="center">-545</td><td align="center">23513</td><td align="center">INSERT或者UPDATE导致检查约束冲突</td></tr><tr><td align="center">-546</td><td align="center">42621</td><td align="center">在CREATE或ALTERTABLE中指定的检查约束无效</td></tr><tr><td align="center">-548</td><td align="center">42621</td><td align="center">因为指定的列而引起的检查约束无效</td></tr><tr><td align="center">-549</td><td align="center">42509</td><td align="center">DYNAMICRULES(BIND)计划或程序包的无效SQL语句</td></tr><tr><td align="center">-551</td><td align="center">42501</td><td align="center">用户试图对不拥有权限的特定的对象进行操作,或者表不存在</td></tr><tr><td align="center">-552</td><td align="center">42502</td><td align="center">用户试图执行未被授权的操作</td></tr><tr><td align="center">-553</td><td align="center">42503</td><td align="center">不能指定CURRENTSQLID,因为用户尚没有被允许改变那个ID</td></tr><tr><td align="center">-554</td><td align="center">42502</td><td align="center">不能对你本身赋予一个权限</td></tr><tr><td align="center">-555</td><td align="center">42502</td><td align="center">不能对你本身撤销一个权限</td></tr><tr><td align="center">-556</td><td align="center">42504</td><td align="center">不能撤销用户没有拥有的权限</td></tr><tr><td align="center">-557</td><td align="center">42852</td><td align="center">指定了不一致的授予或撤销关键词</td></tr><tr><td align="center">-558</td><td align="center">56025</td><td align="center">为授予或撤销语句指定了无效的语句(一个或一组)</td></tr><tr><td align="center">-559</td><td align="center">57002</td><td align="center">DB2权限机制已经禁用,授予或者撤销不能被发布</td></tr><tr><td align="center">-567</td><td align="center">42501</td><td align="center">指定的权限ID缺少对指定的程序包的绑定权限</td></tr><tr><td align="center">-571</td><td align="center">25000</td><td align="center">不允许多点更新</td></tr><tr><td align="center">-573</td><td align="center">42890</td><td align="center">不能定义参照约束,因为已指定的父表中在指定的列上没有唯一健</td></tr><tr><td align="center">-574</td><td align="center">42864</td><td align="center">指定的缺省与列定义冲突</td></tr><tr><td align="center">-577</td><td align="center">38002</td><td align="center">试图修改用户自定义函数中的数据或者存储过程中的数据,但这些对象的建立没有选择MODIFIESSQLDATA选项</td></tr><tr><td align="center">-579</td><td align="center">38004</td><td align="center">试图修改用户自定义函数中的数据或者存储过程中的数据,但这些对象的建立没有选择READSQLDATA选项,也没有选择#293#</td></tr><tr><td align="center">-580</td><td align="center">42625</td><td align="center">CASE表达式中的结果表达式不能都是空的</td></tr><tr><td align="center">-581</td><td align="center">42804</td><td align="center">CASE表达式中的结果表达式为不兼容的数据类型</td></tr><tr><td align="center">-582</td><td align="center">42625</td><td align="center">SEARCHED－WHEN－CLAUSE中的查找条件指定了一个限定的、IN或EXISTS谓词</td></tr><tr><td align="center">-583</td><td align="center">42845</td><td align="center">指定的函数失败,因为他不是决定性的,或者可能有外部动作</td></tr><tr><td align="center">-585</td><td align="center">42732</td><td align="center">在当前路径中模式名不止一次出现</td></tr><tr><td align="center">-586</td><td align="center">42907</td><td align="center">CURRENTPATH专用寄存器在长度上不能超过254字符</td></tr><tr><td align="center">-587</td><td align="center">428C6</td><td align="center">项目引用的列表必须是同一个家族</td></tr><tr><td align="center">-590</td><td align="center">42734</td><td align="center">在命名的存储过程或用户自定义的函数中的参数必须是独一无二的</td></tr><tr><td align="center">-592</td><td align="center">42510</td><td align="center">没有授权权限,让你在WLM环境中建立的存储过程或者用户自定义函数</td></tr><tr><td align="center">-601</td><td align="center">42710</td><td align="center">试图创建(或重命名)已经存在的对象</td></tr><tr><td align="center">-602</td><td align="center">54008</td><td align="center">CREATEINDEX语句中指定的列太多</td></tr><tr><td align="center">-603</td><td align="center">23515</td><td align="center">因为发现有重复值,所以不能建立唯一的索引</td></tr><tr><td align="center">-604</td><td align="center">42611</td><td align="center">在CREATE或ALTERTABLE语句中的为数据类型指定的长度、精度以及标度无效</td></tr><tr><td align="center">-607</td><td align="center">42832</td><td align="center">指定的INSERT、UPDATE或DELETE语句不能被发布,应为这些语句对DB2CATLOG表执行写操作</td></tr><tr><td align="center">-611</td><td align="center">53088</td><td align="center">当LOCKSIZE是TABLE或者TABLESPACE时,LOCKMAX必须为0</td></tr><tr><td align="center">-612</td><td align="center">42711</td><td align="center">在同一个表、索引或试图中不允许有重复列名</td></tr><tr><td align="center">-613</td><td align="center">54008</td><td align="center">主健或UNIQUE约束太长或者包含了太多的列</td></tr><tr><td align="center">-614</td><td align="center">54008</td><td align="center">已经超过了索引的内部健长度的最大长度(255)限制</td></tr><tr><td align="center">-615</td><td align="center">55006</td><td align="center">不能删除这个程序包,因为该程序包目前正在执行</td></tr><tr><td align="center">-616</td><td align="center">42893</td><td align="center">指定的对象不能被删除,因为其他对象依赖于该对象</td></tr><tr><td align="center">-617</td><td align="center">56089</td><td align="center">对于DB2版本6,1型索引无效.对于以前的版本,1型索引不能用LOCKSIZEROW或LARGE表空间定义</td></tr><tr><td align="center">-618</td><td align="center">42832</td><td align="center">对DB2CATALOG表的请求操作时不允许的</td></tr><tr><td align="center">-619</td><td align="center">55011</td><td align="center">DSNDB07不能修改,除非他先被停止了</td></tr><tr><td align="center">-620</td><td align="center">53001</td><td align="center">对在DSNDB07中的表空间不允许指定该关键词</td></tr><tr><td align="center">-621</td><td align="center">58001</td><td align="center">遇到了重复的DBID,遇到了系统问题</td></tr><tr><td align="center">-622</td><td align="center">56031</td><td align="center">不能指定FORMIXEDDATA因为没有安装混合数据选项</td></tr><tr><td align="center">-623</td><td align="center">55012</td><td align="center">不能为单一的表定义多个族索引</td></tr><tr><td align="center">-624</td><td align="center">42889</td><td align="center">不能为单一的表定义多个主健</td></tr><tr><td align="center">-625</td><td align="center">55014</td><td align="center">用主健定义的表要求唯一索引</td></tr><tr><td align="center">-626</td><td align="center">55015</td><td align="center">不能发布ALTER语句来改变PRIQTYSECQTY或ERASE,除非先停止了表空间</td></tr><tr><td align="center">-627</td><td align="center">55016</td><td align="center">不能发布ALTER语句来改变PRIQTYSECQTY或ERASE,除非先把表空间定义为使用存储器组的表空间</td></tr><tr><td align="center">-628</td><td align="center">42613</td><td align="center">指定语句时相互排斥的(例如,不能分区一个分段的表空间)</td></tr><tr><td align="center">-629</td><td align="center">42834</td><td align="center">因为该外健不能包含空值,所以SETNULL无效</td></tr><tr><td align="center">-630</td><td align="center">56089</td><td align="center">不能为1型索引指定WHERENOTNULL</td></tr><tr><td align="center">-631</td><td align="center">54008</td><td align="center">无效的外健;要么是比254个字节长,要么包含的列数多于40</td></tr><tr><td align="center">-632</td><td align="center">42915</td><td align="center">指定的删除规则禁止把这个表定义为已制定表的从属表</td></tr><tr><td align="center">-633</td><td align="center">42915</td><td align="center">无效删除规则;必须使用特定的强制删除规则</td></tr><tr><td align="center">-634</td><td align="center">42915</td><td align="center">在这种情况下,DELETECASCADE不允许</td></tr><tr><td align="center">-635</td><td align="center">42915</td><td align="center">删除规则不能有差异或者不能为SETNULL</td></tr><tr><td align="center">-636</td><td align="center">56016</td><td align="center">在分区索引健的升序或降序规范中,分区所以必须与该规范一致</td></tr><tr><td align="center">-637</td><td align="center">42614</td><td align="center">遇到重复的关键词</td></tr><tr><td align="center">-638</td><td align="center">42601</td><td align="center">在CREATETABLE语句中缺少列定义</td></tr><tr><td align="center">-639</td><td align="center">56027</td><td align="center">带有SETNULL的删除规则的外健的可空列不能是分区索引的列</td></tr><tr><td align="center">-640</td><td align="center">56089</td><td align="center">不能为这个表空间指定LOCKSIZEROW,因为在该表空间中的表上定义了1型索引</td></tr><tr><td align="center">-642</td><td align="center">54021</td><td align="center">唯一约束包含太多的列</td></tr><tr><td align="center">-643</td><td align="center">54024</td><td align="center">检查约束超出了3800个字符的最大长度</td></tr><tr><td align="center">-644</td><td align="center">42615</td><td align="center">在SQL语句中为关键词指定的值无效</td></tr><tr><td align="center">-646</td><td align="center">55017</td><td align="center">在指定的分区表空间或者缺省表空间中不能创建表,因为指定的表空间已经包含了一个表</td></tr><tr><td align="center">-647</td><td align="center">57003</td><td align="center">指定的缓冲池无效,因为他没有被激活</td></tr><tr><td align="center">-650</td><td align="center">56090</td><td align="center">ALTERINDEX不能被执行;提供了原因代码</td></tr><tr><td align="center">-651</td><td align="center">54025</td><td align="center">如果CREARE或ALTERTABLE被允许,表对象的描述词(objectdescriptor,OBD)将超过最大值(32KB)</td></tr><tr><td align="center">-652</td><td align="center">23506</td><td align="center">遇到了EDITRPROC或VALIDPROC冲突</td></tr><tr><td align="center">-653</td><td align="center">57004</td><td align="center">在分区表空间中的表不可用,因为分区索引尚未被创建</td></tr><tr><td align="center">-655</td><td align="center">56036</td><td align="center">在卷的列表中,STOGROUP不能指定为特定的或不特定(“*”)的卷</td></tr><tr><td align="center">-658</td><td align="center">42917</td><td align="center">当试图删除指定的对象时,无法删除该对象,该对象的删除必须通过删除与之相关联的对象完成</td></tr><tr><td align="center">-660</td><td align="center">53035</td><td align="center">不正确的分区索引规范,必须为族索引定义有限制的关键字</td></tr><tr><td align="center">-661</td><td align="center">53036</td><td align="center">分区索引没有指定恰当的分区数目</td></tr><tr><td align="center">-662</td><td align="center">53037</td><td align="center">试图在未分区的表空间(分段的或简单的)上建立分区索引</td></tr><tr><td align="center">-663</td><td align="center">53038</td><td align="center">为分区索引指定的关键字限制值是一个无效数字</td></tr><tr><td align="center">-665</td><td align="center">53039</td><td align="center">为ALTERTABLESOACE语句指定了无效的PART语句</td></tr><tr><td align="center">-666</td><td align="center">57005</td><td align="center">SQL语句不能被处理,因为指定的函数当前正处于进行过程中</td></tr><tr><td align="center">-667</td><td align="center">42917</td><td align="center">不能明确的删除分区表空间的族索引,必须除去分区表空间来去掉分区索引</td></tr><tr><td align="center">-668</td><td align="center">56018</td><td align="center">不能向用EDITPROC定义的表中添加列</td></tr><tr><td align="center">-669</td><td align="center">42917</td><td align="center">不能显式的删除分区表空间中的表,必须删除分区表空间来删除表</td></tr><tr><td align="center">-670</td><td align="center">54010</td><td align="center">表的记录长度超过了页面的大小</td></tr><tr><td align="center">-671</td><td align="center">53040</td><td align="center">不能更改指定的表空间的缓冲池,因为这将改变表空间的页面大小</td></tr><tr><td align="center">-672</td><td align="center">55035</td><td align="center">在命名的表上不允许DROP</td></tr><tr><td align="center">-676</td><td align="center">53041</td><td align="center">只有4KB的缓冲池可被用于一个索引</td></tr><tr><td align="center">-677</td><td align="center">57011</td><td align="center">缓冲池扩展失败,由于可用的虚拟内存的大小不足</td></tr><tr><td align="center">-678</td><td align="center">53045</td><td align="center">为才分区索引中指定的限制健提供的值与数据类型不符</td></tr><tr><td align="center">-679</td><td align="center">57006</td><td align="center">不能创建某一个特定对象,因为该对象的一个drop目前正在挂起</td></tr><tr><td align="center">-680</td><td align="center">54011</td><td align="center">对DB2表不能超过750列</td></tr><tr><td align="center">-681</td><td align="center">23507</td><td align="center">列违反了指定的FIELDPROC</td></tr><tr><td align="center">-682</td><td align="center">57010</td><td align="center">不能载入FIELDPROC</td></tr><tr><td align="center">-683</td><td align="center">42842</td><td align="center">列、单值类型、函数或者过程无效,因为不兼容语句.例如,指定的INTEGER具有FORBITDATA选项</td></tr><tr><td align="center">-684</td><td align="center">54012</td><td align="center">指定的文字列表不能超过254个字节</td></tr><tr><td align="center">-685</td><td align="center">58002</td><td align="center">FIELDPROC返回一个无效的域描述</td></tr><tr><td align="center">-686</td><td align="center">53043</td><td align="center">用FIELDPROC定义的一个列不能与一个使用不同的FIELDPROC定义的列作比较</td></tr><tr><td align="center">-687</td><td align="center">53044</td><td align="center">列不能与一个非兼容字段类型的列比较</td></tr><tr><td align="center">-688</td><td align="center">58002</td><td align="center">返回不正确的数据</td></tr><tr><td align="center">-689</td><td align="center">54011</td><td align="center">从属表定义了太多的列</td></tr><tr><td align="center">-690</td><td align="center">23508</td><td align="center">数据定义的控制支持拒绝这个语句</td></tr><tr><td align="center">-691</td><td align="center">57018</td><td align="center">命名的注册表不存在</td></tr><tr><td align="center">-692</td><td align="center">57018</td><td align="center">命名的索引不存在,但命名的注册表需要该索引</td></tr><tr><td align="center">-693</td><td align="center">55003</td><td align="center">命名的注册表&#x2F;索引的命名列无效</td></tr><tr><td align="center">-694</td><td align="center">57023</td><td align="center">DROP正在命名的注册表上挂起</td></tr><tr><td align="center">-696</td><td align="center">42898</td><td align="center">由于相关的名字或者转换表的名字使用不正确,指定的触发器无效</td></tr><tr><td align="center">-697</td><td align="center">42899</td><td align="center">FOREACH语句被指定,因此与OLD合NEW相关的名字是不允许的,或者不能为一个BEFORE触发器指定OLD_TABLE和NEW_TABLE</td></tr><tr><td align="center">-713</td><td align="center">42815</td><td align="center">指定的专用寄存器是无效的</td></tr><tr><td align="center">-715</td><td align="center">56064</td><td align="center">命名的程序不能被运行,因为他依赖与你所安装的DB2版本的部件,但是你的数据中心没有安装这个部件</td></tr><tr><td align="center">-716</td><td align="center">56065</td><td align="center">命名的程序使用这个版本的不正确的发行版本做了预编译</td></tr><tr><td align="center">-717</td><td align="center">56066</td><td align="center">BIND失败,因为他依赖与你所安装的DB2版本的部件,但是你的数据中心没有安装这个部件</td></tr><tr><td align="center">-718</td><td align="center">56067</td><td align="center">REBIND失败,因为IBMREQD列无效</td></tr><tr><td align="center">-719</td><td align="center">42710</td><td align="center">不能BINDADD一个已经存在的程序包</td></tr><tr><td align="center">-720</td><td align="center">42710</td><td align="center">不能BINDREPLACE一个已经存在的程序包版本</td></tr><tr><td align="center">-721</td><td align="center">42710</td><td align="center">程序包的一致性记号必须是独一无二的</td></tr><tr><td align="center">-722</td><td align="center">42704</td><td align="center">绑定错误,因为指定的程序包不存在</td></tr><tr><td align="center">-723</td><td align="center">09000</td><td align="center">一个触发的SQL语句接受到一个错误</td></tr><tr><td align="center">-724</td><td align="center">54038</td><td align="center">达到了(16)级联间接的SQL语句的最大项目</td></tr><tr><td align="center">-725</td><td align="center">42721</td><td align="center">对专门指定的寄存器提供了一个无效值</td></tr><tr><td align="center">-726</td><td align="center">55030</td><td align="center">因为SYSPKSYSTEM条目,不能绑定这个程序包</td></tr><tr><td align="center">-728</td><td align="center">56080</td><td align="center">指定的数据类型不能与私有协议发布一起使用</td></tr><tr><td align="center">-729</td><td align="center">429B1</td><td align="center">用COMMITONRETURN定义的存储过程不能用作嵌套的CALL过程的目标</td></tr><tr><td align="center">-730</td><td align="center">56053</td><td align="center">在只读的共享数据库中为表定义的参照完整性无效</td></tr><tr><td align="center">-731</td><td align="center">56054</td><td align="center">VSAM数据集必须用SHAREOPTION(1.3)定义</td></tr><tr><td align="center">-732</td><td align="center">56055</td><td align="center">被定义为只读型数据库却拥有没有定义空间或者索引空间的DB2子系统</td></tr><tr><td align="center">-733</td><td align="center">56056</td><td align="center">只读共享数据库的定义不一致</td></tr><tr><td align="center">-734</td><td align="center">56057</td><td align="center">一旦一个数据库被定义为ROSHAREREAD,他将不能被更改为其他不同的ROSHARE状态</td></tr><tr><td align="center">-735</td><td align="center">55004</td><td align="center">用DBID名称标识的数据库不再是一个只读共享数据库</td></tr><tr><td align="center">-736</td><td align="center">53014</td><td align="center">命名的DBID无效</td></tr><tr><td align="center">-737</td><td align="center">53056</td><td align="center">在这种状况下,不能建立一个隐含的表空间</td></tr><tr><td align="center">-739</td><td align="center">56088</td><td align="center">因为同时指定了ALLOWPARALLEL和MODIELESSQLDATA这两个语句,因此已设定的函数将不能再被更改</td></tr><tr><td align="center">-740</td><td align="center">51034</td><td align="center">在这种方式下不能用MODIELESSQLDATA定义指定的函数</td></tr><tr><td align="center">-741</td><td align="center">55030</td><td align="center">已经为命名的共享组成员的数据定义了工作文件数据库</td></tr><tr><td align="center">-742</td><td align="center">53004</td><td align="center">DSNDB07是隐含的工作文件数据库</td></tr><tr><td align="center">-746</td><td align="center">57053</td><td align="center">在特定的触发器、存储过程或函数中的SQL语句违反嵌套SQL限制</td></tr><tr><td align="center">-747</td><td align="center">57054</td><td align="center">指定的表是不可用的除非为LOB数据列建立起必须的辅助表</td></tr><tr><td align="center">-748</td><td align="center">54042</td><td align="center">在指定的辅助表上已经有一个索引</td></tr><tr><td align="center">-750</td><td align="center">42986</td><td align="center">不能对已指定的表重新命名,因为他至少在一个现存的视图或触发器中被引用</td></tr><tr><td align="center">-751</td><td align="center">42987</td><td align="center">存储过程或用户自定义的函数试图执行一个不允许执行的SQL语句.DB2的线程被置于MUST_ROLLBACK状态</td></tr><tr><td align="center">-752</td><td align="center">0A001</td><td align="center">无效CONNECT语句</td></tr><tr><td align="center">-763</td><td align="center">560A1</td><td align="center">无效的表空间名</td></tr><tr><td align="center">-764</td><td align="center">560A2</td><td align="center">LOB表空间必须与其相关的基表空间同在一个数据库中</td></tr><tr><td align="center">-765</td><td align="center">560A3</td><td align="center">表和数据库不兼容</td></tr><tr><td align="center">-766</td><td align="center">560A4</td><td align="center">不能对辅助表进行请求的操作</td></tr><tr><td align="center">-767</td><td align="center">42626</td><td align="center">CREATEINDEX失败,因为在辅助表中为索引指定了列,或者因为没有为非辅助表的索引指定列</td></tr><tr><td align="center">-768</td><td align="center">560A50</td><td align="center">不能为指定的列或者指定的分区建立辅助表,因为其辅助表已经存在</td></tr><tr><td align="center">-769</td><td align="center">53096</td><td align="center">CREATEAUXTABLE的规格与基表不匹配</td></tr><tr><td align="center">-770</td><td align="center">530A6</td><td align="center">指定的表必须有一个ROWID列,那么该表才可以包含一个LOB列</td></tr><tr><td align="center">-771</td><td align="center">428C7</td><td align="center">无效的ROWID列规范</td></tr><tr><td align="center">-797</td><td align="center">42987</td><td align="center">CREATETRIGGER包含不被支持的语法</td></tr><tr><td align="center">-798</td><td align="center">428C9</td><td align="center">不能把一个值插入到用GENERATEDALWAYS定义的ROWID列</td></tr><tr><td align="center">-802</td><td align="center">22012</td><td align="center">某一特定操作发生了异常错误.被零除</td></tr><tr><td align="center">22003</td><td align="center"></td><td align="center">某一特定操作发生了异常错误.但不是被零除</td></tr><tr><td align="center">-803</td><td align="center">23505</td><td align="center">不能插入行,因为这将违反唯一索引的约束</td></tr><tr><td align="center">-804</td><td align="center">07002</td><td align="center">SQLDA的调用参数列表有误</td></tr><tr><td align="center">-805</td><td align="center">51002</td><td align="center">在计划中没有发现DBRM或程序包名</td></tr><tr><td align="center">-807</td><td align="center">23509</td><td align="center">对已指定的环境和连接,该程序包不可用</td></tr><tr><td align="center">-808</td><td align="center">08001</td><td align="center">CONECT语句与程序中的第一个CONNECT语句不一致</td></tr><tr><td align="center">-811</td><td align="center">21000</td><td align="center">当多行作为一内嵌的选择语句的返回结果是,必须使用游标</td></tr><tr><td align="center">-812</td><td align="center">22508</td><td align="center">在CURRENTPACKAGESET中的ID集合是空白的,语句不能被执行</td></tr><tr><td align="center">-815</td><td align="center">42920</td><td align="center">在一个内置选择语句或者一个基本谓词的子查询中,显式的或隐含的指定了GROUPBY或HAVING语句</td></tr><tr><td align="center">-817</td><td align="center">25000</td><td align="center">执行SQL语句将可能导致禁止更新用户数据或DB2编目</td></tr><tr><td align="center">-818</td><td align="center">5103</td><td align="center">计划&lt;－&gt;载入组件的时间戳不匹配,在执行计划中没有从同一个预编译中建立DBRM,该预编译是作为组件载入的</td></tr><tr><td align="center">-819</td><td align="center">58004</td><td align="center">视图不能重建,因为在DB2编目中存储的分析树长度为0</td></tr><tr><td align="center">-820</td><td align="center">58004</td><td align="center">在这个DB2版本的DB2编目中遇到了无效值</td></tr><tr><td align="center">-822</td><td align="center">51004</td><td align="center">在SQLDA中遇到了无效地址</td></tr><tr><td align="center">-840</td><td align="center">54004</td><td align="center">在选择列表或插入列表中返回的项目太多</td></tr><tr><td align="center">-842</td><td align="center">08002</td><td align="center">到指定位置的连接已经存在</td></tr><tr><td align="center">-843</td><td align="center">08003</td><td align="center">SETCONNECTION或RELEASE语句无法执行,因为连接不存在</td></tr><tr><td align="center">-870</td><td align="center">58026</td><td align="center">宿主变量描述符的个数不等于语句中宿主变量的个数</td></tr><tr><td align="center">-872</td><td align="center">51302</td><td align="center">这个子系统已指定了有效的CCSID</td></tr><tr><td align="center">-873</td><td align="center">53090</td><td align="center">同一SQL语句中,不能同时引用EBCDIC表中的定义的列和ASCII表中定义的列</td></tr><tr><td align="center">-874</td><td align="center">53901</td><td align="center">指定对象的编码方案与其表空间的编码方案不匹配</td></tr><tr><td align="center">-875</td><td align="center">42988</td><td align="center">指定的操作符不能用于ASCII数据</td></tr><tr><td align="center">-876</td><td align="center">53092</td><td align="center">不能为指定的原因创建对象:提供了原因代码</td></tr><tr><td align="center">-877</td><td align="center">53093</td><td align="center">数据库或表空间不允许用ASCII,必须使用EBCDIC</td></tr><tr><td align="center">-878</td><td align="center">53094</td><td align="center">该PLAN——TABLE不能是ASCII,必须使用EBCDIC</td></tr><tr><td align="center">-879</td><td align="center">53095</td><td align="center">指定对象的CREATE或ALTER语句不能将列、单值类型,某个存储过程或用户自定义函数的参数定义为以下类型:MAXEDDATA,GRAPHIC,VARGRAPHIC,LONGVARGRAPHIC,因为系统没有为指定的编码方案定义相应的CCSID</td></tr><tr><td align="center">-900</td><td align="center">08003</td><td align="center">应用处理没有连接到应用服务器,语句不能被执行</td></tr><tr><td align="center">-901</td><td align="center">58004</td><td align="center">遇到时断时续的系统错误,该错误不能抑制后继的SQL语句的执行</td></tr><tr><td align="center">-902</td><td align="center">58005</td><td align="center">内部控制块的指针错误,要求重新绑定</td></tr><tr><td align="center">-904</td><td align="center">57011</td><td align="center">指定的资源不可用</td></tr><tr><td align="center">-905</td><td align="center">57014</td><td align="center">超出了资源上限</td></tr><tr><td align="center">-906</td><td align="center">51005</td><td align="center">因为重大错误,SQL语句无法执行</td></tr><tr><td align="center">-908</td><td align="center">23510</td><td align="center">当前资源限制设施的规范或者自动重绑定的系统参数不允许BIND,REBIND,AUTOREBIND</td></tr><tr><td align="center">-909</td><td align="center">57007</td><td align="center">对象已被删除</td></tr><tr><td align="center">-910</td><td align="center">57007</td><td align="center">因为在该对象上挂起DROP,所以不能访问该对象</td></tr><tr><td align="center">-911</td><td align="center">40001</td><td align="center">当前工作单元已被回滚</td></tr><tr><td align="center">-913</td><td align="center">57033</td><td align="center">因为死锁或超时导致不成功执行</td></tr><tr><td align="center">-917</td><td align="center">42969</td><td align="center">绑定程序包已经失败</td></tr><tr><td align="center">-918</td><td align="center">51021</td><td align="center">SQL语句不能被执行,因为连接丢失</td></tr><tr><td align="center">-919</td><td align="center">56045</td><td align="center">需要一个ROLLBACK</td></tr><tr><td align="center">-922</td><td align="center">42505</td><td align="center">连接权限失败.试图从TSO、CICS或IMS访问DB2,同时相应的连接设施处于非活动的状态</td></tr><tr><td align="center">-923</td><td align="center">57015</td><td align="center">因为DB2不可用,所以不能建立连接</td></tr><tr><td align="center">-924</td><td align="center">58006</td><td align="center">遇到了DB2内部的连接错误:提供了原因代码</td></tr><tr><td align="center">-925</td><td align="center">2D521</td><td align="center">SQL的COMMIT语句不能从CICS或IMS&#x2F;TM发布</td></tr><tr><td align="center">-926</td><td align="center">2D521</td><td align="center">SQL的ROLLBACK语句不能从CICS或IMS&#x2F;TM发布</td></tr><tr><td align="center">-927</td><td align="center">51006</td><td align="center">当正在连接的环境没有建立时,语言接口被调用.利用DSN命令激发该程序</td></tr><tr><td align="center">-929</td><td align="center">58002</td><td align="center">数据获取退出已经失败(DPROP)</td></tr><tr><td align="center">-939</td><td align="center">51021</td><td align="center">由于远程服务器的未请求的回滚,要求一个回滚</td></tr><tr><td align="center">-947</td><td align="center">56038</td><td align="center">SQL语句失败,因为更新不能被传播(DPROP)</td></tr><tr><td align="center">-948</td><td align="center">56062</td><td align="center">DDF没有启动,分布式操作无效</td></tr><tr><td align="center">-950</td><td align="center">42705</td><td align="center">在SQL语句中指定的位置在SYSIBM.LOCATIONS中没有定义</td></tr><tr><td align="center">-965</td><td align="center">51021</td><td align="center">存储过程非正常终止(在DB26之前的版本)</td></tr><tr><td align="center">-981</td><td align="center">57015</td><td align="center">当前不是处于允许SQL的状态时,试图在RRSAF中执行SQL</td></tr><tr><td align="center">-991</td><td align="center">57015</td><td align="center">调用连接不能建立一个到DB2的隐含或开放连接</td></tr><tr><td align="center">-2001</td><td align="center">53089</td><td align="center">为储存过程指定的宿主变量参数的个数不等于预期的参数个数</td></tr><tr><td align="center">-20003</td><td align="center">560A7</td><td align="center">不能为GRECP中的表空间或索引指定GBPCACHENONE</td></tr><tr><td align="center">-20004</td><td align="center">560A8</td><td align="center">对于WORKFILE对象.8KB或16Kb的缓冲池页面大小无效</td></tr><tr><td align="center">-20005</td><td align="center">54035</td><td align="center">指定的对象类型超出了内部的ID极限</td></tr><tr><td align="center">-20006</td><td align="center">53097</td><td align="center">当没有指定WLM环境时,LOB不能被指定为参数</td></tr><tr><td align="center">-20070</td><td align="center">53098</td><td align="center">不能非LOB列建立一个辅助表</td></tr><tr><td align="center">-20071</td><td align="center">53099</td><td align="center">必须指定WLM环境名</td></tr><tr><td align="center">-20072</td><td align="center">56052</td><td align="center">指定的权限ID不拥有在触发器程序包上执行BIND所需的权限</td></tr><tr><td align="center">-20073</td><td align="center">42927</td><td align="center">不能按照指定的要求更改命名的函数,因为在现存的视图定义中引用了该函数</td></tr><tr><td align="center">-20074</td><td align="center">42939</td><td align="center">不能建立指定的对象,因为“SYS”是一个保留的前缀</td></tr><tr><td align="center">-20100</td><td align="center">56059</td><td align="center">在被触发的SQL语句中有BIND错误,指定了错误的SQLCODE和SQLSTATE</td></tr><tr><td align="center">-20101</td><td align="center">56059</td><td align="center">由于指定的原因代码,该函数失败</td></tr><tr><td align="center">-20102</td><td align="center">42849</td><td align="center">在CREATE或ALTERFUNCTION语句中不能使用指定的选项</td></tr><tr><td align="center">-20104</td><td align="center">42856</td><td align="center">更改一个CCSID失败</td></tr><tr><td align="center">-20106</td><td align="center">42945</td><td align="center">不能改变表空间或数据库的CCSID,因为现存的试图引用</td></tr><tr><td align="center">-30000</td><td align="center">58008</td><td align="center">DRDA分布协议错误;处理可以继续</td></tr><tr><td align="center">-30002</td><td align="center">57057</td><td align="center">使用DRDA的分布式客户把OPEN语句连接到PREPARE,但PREPARE接受到一个SQLCODE为＋495的警告</td></tr><tr><td align="center">-30020</td><td align="center">58009</td><td align="center">DRDA分布协议错误;对话被解除</td></tr><tr><td align="center">-30021</td><td align="center">58010</td><td align="center">DRDA分布协议错误;处理不能继续</td></tr><tr><td align="center">-30030</td><td align="center">58013</td><td align="center">违反分布协议:COMMIT不成功,对话被解除(AS)</td></tr><tr><td align="center">-30040</td><td align="center">57012</td><td align="center">因为不能得到资源,执行失败,处理可以继续(AS)</td></tr><tr><td align="center">-30041</td><td align="center">57013</td><td align="center">因为不能得到资源,执行失败,处理不能成功的继续(AS)</td></tr><tr><td align="center">-30050</td><td align="center">58011</td><td align="center">执行不成功,在BIND过程中不能执行语句</td></tr><tr><td align="center">-30051</td><td align="center">58012</td><td align="center">特定的BIND过程不是处于活动状态(远程BIND),从而导致失败</td></tr><tr><td align="center">-30052</td><td align="center">42932</td><td align="center">程序准备的假设错误</td></tr><tr><td align="center">-30053</td><td align="center">42506</td><td align="center">程序包的拥有者遭遇授权失败</td></tr><tr><td align="center">-30060</td><td align="center">08004</td><td align="center">RBD遭遇授权失败</td></tr><tr><td align="center">-30061</td><td align="center">08004</td><td align="center">指定了无效或者没有存在的RDB</td></tr><tr><td align="center">-30070</td><td align="center">58014</td><td align="center">目标子系统不支持这个命令</td></tr><tr><td align="center">-30071</td><td align="center">58015</td><td align="center">目标子系统不支持这个对象</td></tr><tr><td align="center">-30072</td><td align="center">58016</td><td align="center">目标子系统不支持这个参数</td></tr><tr><td align="center">-30073</td><td align="center">58017</td><td align="center">目标子系统不支持这个参数值</td></tr><tr><td align="center">-30074</td><td align="center">58018</td><td align="center">应答信息不被支持</td></tr><tr><td align="center">-30080</td><td align="center">08001</td><td align="center">SNA通信错误</td></tr><tr><td align="center">-30081</td><td align="center">58019</td><td align="center">TCP&#x2F;IP通信错误</td></tr><tr><td align="center">-30082</td><td align="center">08001</td><td align="center">由于安全冲突、通信失败:提供了原因代码</td></tr><tr><td align="center">-30090</td><td align="center">25000</td><td align="center">指定的操作对远程执行失败</td></tr><tr><td align="center">-30104</td><td align="center">56095</td><td align="center">在绑定选项与绑定值中有错误</td></tr><tr><td align="center">-30105</td><td align="center">56096</td><td align="center">指定的绑定选项不兼容</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB2系列【二】</title>
      <link href="/DB2%E7%B3%BB%E5%88%97%E3%80%90%E4%BA%8C%E3%80%91/"/>
      <url>/DB2%E7%B3%BB%E5%88%97%E3%80%90%E4%BA%8C%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>上篇文章记录了Linux下DB2的安装,现在可以正常使用了,现在记录一下DB2的一些常用命令。</p><span id="more"></span><h4 id="连接DB2数据库"><a href="#连接DB2数据库" class="headerlink" title="连接DB2数据库"></a>连接DB2数据库</h4><ul><li>连接本地数据库：<code>db2 connect to &lt;DB2库名&gt;</code></li><li>连接远程数据库：<code>db2 connect to &lt;DB2库名&gt; user &lt;用户名&gt; using &lt;密码&gt;</code></li><li>查看所有连接：<code>db2 list application</code></li><li>强迫所有应用断开数据库连接(异步的)：<code>db2 force application all</code></li><li>断开数据库连接：<code>db2 connect reset</code>或 <code>db2 terminate</code></li></ul><h4 id="显示DB2错误信息"><a href="#显示DB2错误信息" class="headerlink" title="显示DB2错误信息"></a>显示DB2错误信息</h4><ul><li>DB2解释信息：<code>db2 ? &lt;SQLSTATE&gt;</code></li><li>SQLCODE解释信息：<code>db2 ? &lt;SQLCODE&gt;</code><div class="note red icon-padding flat"><i class="note-icon fa fa-triangle-exclamation"></i><p>缺点是只能看英文信息，不太直观，英文不好的可以<a href="https://www.mizhuo.site/2019/09/24/DB2-SqlCode-%E9%94%99%E8%AF%AF%E7%A0%81%E5%A4%A7%E5%85%A8">点击这里</a>查看中文详细错误信息</p></div></li></ul><h4 id="启动关闭数据库"><a href="#启动关闭数据库" class="headerlink" title="启动关闭数据库"></a>启动关闭数据库</h4><ul><li>启动数据库：<code>db2start</code></li><li>停止数据库：<code>db2stop</code>或<code>db2stop force</code></li></ul><h4 id="备份还原导入导出"><a href="#备份还原导入导出" class="headerlink" title="备份还原导入导出"></a>备份还原导入导出</h4><ul><li>备份整个数据库数据：<code>db2 backup db db2name&lt;数据库名称&gt;</code></li><li>还原数据库：<code>db2 restore db &lt;db2name&gt;</code><br>  例：<code>db2 restore database &lt;库名&gt; from &lt;路径&gt; taken at 20150304215844</code><br>  导出数据：  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db2 &quot;export to &lt;路径&gt;/&lt;名称&gt;.del of del select * from &lt;表名&gt;&quot;</span><br><span class="line">db2 &quot;export to &lt;路径&gt;/&lt;名称&gt;.ixf of ixf select * from &lt;表名&gt;&quot;</span><br><span class="line">db2 &quot;export to &lt;路径&gt;/&lt;名称&gt;.txt of del select * from &lt;表名&gt;&quot;</span><br></pre></td></tr></table></figure>  导入数据：  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db2 import <span class="keyword">from</span> <span class="operator">&lt;</span>路径<span class="operator">&gt;</span><span class="operator">/</span><span class="operator">&lt;</span>名称<span class="operator">&gt;</span>.ixf <span class="keyword">of</span> ixf <span class="keyword">insert</span> <span class="keyword">into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">db2 load <span class="keyword">from</span> <span class="operator">&lt;</span>路径<span class="operator">&gt;</span><span class="operator">/</span><span class="operator">&lt;</span>名称<span class="operator">&gt;</span>.ixf <span class="keyword">of</span> ixf <span class="keyword">insert</span> <span class="keyword">into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">db2 load <span class="keyword">from</span> <span class="operator">&lt;</span>路径<span class="operator">&gt;</span><span class="operator">/</span><span class="operator">&lt;</span>名称<span class="operator">&gt;</span>.ixf <span class="keyword">of</span> ixf replace <span class="keyword">into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="operator">/</span><span class="operator">/</span> 装入数据前，先删除已存在记录</span><br><span class="line">db2 load <span class="keyword">from</span> <span class="operator">&lt;</span>路径<span class="operator">&gt;</span><span class="operator">/</span><span class="operator">&lt;</span>名称<span class="operator">&gt;</span>.ixf <span class="keyword">of</span> ixf restart <span class="keyword">into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="operator">/</span><span class="operator">/</span> 当装入失败时，重新执行，并记录导出结果和错误信息</span><br></pre></td></tr></table></figure></li></ul><h4 id="数据库的创建和删除"><a href="#数据库的创建和删除" class="headerlink" title="数据库的创建和删除"></a>数据库的创建和删除</h4><ul><li>创建数据库：<code>db2 create database &lt;库名&gt; using UFT-8 territory CN</code><br>  若出现以下错误:  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[db2inst1@VM_0_5_centos server_dec]$ db2 create database Test using UFT-8 territory CN</span><br><span class="line">SQL0104N  An unexpected token &quot;UFT-8&quot; was found following &quot;USING&quot;.  Expected </span><br></pre></td></tr></table></figure>  是因为使用了“su username”而非“su -username”在终端切换用户，前者相当于简单地同时登录有用户，而后者相当于注销后重新登录新用户，所以不会维持之前用户的ENV设置。<br>  切换为su - db2inst1 就可以创建成功了  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[db2inst1@VM_0_5_centos ~]$ db2 create database Test  using codeset UTF-8 territory CN</span><br><span class="line">The CREATE DATABASE command completed successfully.</span><br></pre></td></tr></table></figure></li><li>查看所有的数据库：<code>db2 list db directory</code></li><li>删除数据库：<code>db2 drop database Test</code>, 如果执行失败可能是有数据库连接存在。执行<code>db2stop force</code>或者<code>db2 force application all</code>。再启动 <code>db2start</code>。删除数据库时，数据库所有表空间会自动删除。</li></ul><h4 id="Schema的创建和删除"><a href="#Schema的创建和删除" class="headerlink" title="Schema的创建和删除"></a>Schema的创建和删除</h4><ul><li>创建Schema：<code>db2 list schemas</code></li><li>查询Schema：<code>db2 select schemaname from syscat.schemata  </code></li><li>删除Schema：<code>db2 DROP SCHEMA &lt;name&gt; RESTRICT</code>  （只能删除空Schema）</li><li>切换当前Schema： <code>db2 SET CURRENT SCHEMA = &#39;PAYROLL&#39;</code></li><li>查看当前Schema：<code>db2 select current schema from sysibm.sysdummy1</code> 或 <code>db2 select current schema from sysibm.dual</code></li></ul><h4 id="表的创建及修改"><a href="#表的创建及修改" class="headerlink" title="表的创建及修改"></a>表的创建及修改</h4><ul><li>创建表:<code>db2 create table TTBB &quot;( T_ID int not null,T_TYPE CHAR(1))&quot;</code></li></ul><h4 id="表索引"><a href="#表索引" class="headerlink" title="表索引"></a>表索引</h4><ul><li>查看表的索引情况:<code>db2look -d &lt;数据库名&gt; -z &lt;Schema&gt; -t &quot;&lt;表名&gt;&quot; -a -e -c</code></li><li>简单查看索引:<code>db2 describe indexes for table &lt;Schema.tabName&gt;</code></li><li>从系统表中查询索引:&#96;select * from sysibm.sysindexes where tbName &#x3D; &lt;表名&gt;”<br><span style = 'color:red;'>推荐使用第一种，比较详细。</span></li><li>建立表索引:<code>create index 索引名 on 表名(列名，列名);</code></li><li>删除表索引:<code>drop index 索引名 on 表名;</code></li></ul><h4 id="触发器、存储过程"><a href="#触发器、存储过程" class="headerlink" title="触发器、存储过程"></a>触发器、存储过程</h4><ul><li>查看某张表的触发器:<code>select * from syscat.triggers where tabname = &lt;表名&gt;</code></li><li>查看触发器的代码:<code>select text from syscat.triggers where tabname = &lt;表名&gt;</code></li><li>创建触发器:  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="operator">&lt;</span>schema<span class="operator">&gt;</span>.<span class="operator">&lt;</span>触发器名称<span class="operator">&gt;</span> after <span class="operator">&lt;</span><span class="keyword">insert</span><span class="operator">/</span><span class="keyword">update</span><span class="operator">/</span><span class="keyword">delete</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">on</span> <span class="operator">&lt;</span>Schema.tabname<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">referencing</span> <span class="operator">&lt;</span><span class="keyword">new</span> <span class="keyword">as</span> n<span class="operator">&gt;</span><span class="operator">/</span><span class="operator">&lt;</span><span class="keyword">new</span> <span class="keyword">as</span> n <span class="keyword">old</span> <span class="keyword">as</span> o<span class="operator">&gt;</span><span class="operator">/</span><span class="operator">&lt;</span><span class="keyword">old</span> <span class="keyword">as</span> o<span class="operator">&gt;</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> mode db2 <span class="keyword">sql</span></span><br><span class="line"><span class="keyword">begin</span> <span class="keyword">atomic</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> XXX (XXX) <span class="keyword">VALUES</span> (n.XXX);</span><br><span class="line"><span class="keyword">update</span> XXX <span class="keyword">set</span> o.XXX <span class="operator">=</span> n.XXX <span class="keyword">where</span> o.XXX <span class="operator">=</span> n.XXX;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> XXX <span class="keyword">where</span> XXX <span class="operator">=</span> o.XXX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li>删除触发器:<code>DROP TRIGGER &lt;触发器名称&gt;</code></li><li>查看存储过程:<code>select * from syscat.procedures</code></li><li>查看存储过程代码:<code>select text from syscat.procedures where procname = &lt;存储过程名称&gt;</code></li></ul><h4 id="其它命令行"><a href="#其它命令行" class="headerlink" title="其它命令行"></a>其它命令行</h4><ul><li>查看版本:<code>db2level</code></li><li>显示当前数据库管理实例:<code>db2 get instance</code></li><li>列出数据库中所有的表:<code>db2 list tables</code></li><li>执行SQL脚本:<code>db2 -svtf test.sql</code></li><li>查看db2对sql脚本的建议:<code>db2advis -d &lt;数据库名&gt; -i &lt;sql文件位置&gt;</code></li><li>查看执行计划:<code>db2expln -d &lt;数据库名&gt; -i -g -q &lt;sql语句&gt; -t</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DB2系列【一】</title>
      <link href="/DB2%E7%B3%BB%E5%88%97%E3%80%90%E4%B8%80%E3%80%91/"/>
      <url>/DB2%E7%B3%BB%E5%88%97%E3%80%90%E4%B8%80%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>作为一只在银行工作的程序猿，工作需要使用DB2数据库比较多，所以这里记录一下在Linux下安装DB2的方法。</p><span id="more"></span><h4 id="下载DB2-Linux安装包"><a href="#下载DB2-Linux安装包" class="headerlink" title="下载DB2 Linux安装包"></a>下载DB2 Linux安装包</h4><p>进入IBM官网下载DB2安装包。<a href="https://www-01.ibm.com/marketing/iwm/iwm/web/download.do?S_PKG=ov59318&source=mrs-db2devcdbsrv&transactionid=455968724&pageType=urx">点击下载</a></p><h4 id="通过FTP上传至服务器并解压tar包"><a href="#通过FTP上传至服务器并解压tar包" class="headerlink" title="通过FTP上传至服务器并解压tar包"></a>通过FTP上传至服务器并解压tar包</h4><p><code>tar -zxvf &lt;tar包&gt;</code><br>得到一个server_dec文件夹,执行server_dec下的db2_install开始安装<br>分别键入YES YES 和SERVER走流程安装DB2</p><h4 id="创建DB2用户及组"><a href="#创建DB2用户及组" class="headerlink" title="创建DB2用户及组"></a>创建DB2用户及组</h4><p><code>useradd db2adm1</code><br><code>useradd db2inst1</code></p><h4 id="创建db2管理服务器实例"><a href="#创建db2管理服务器实例" class="headerlink" title="创建db2管理服务器实例"></a>创建db2管理服务器实例</h4><ul><li>root用户进入 <code>/home/db2adm1</code></li><li>执行 <code>/opt/ibm/db2/V11.5/instance/dascrt -u db2adm1</code></li></ul><h4 id="创建DB2数据库实例"><a href="#创建DB2数据库实例" class="headerlink" title="创建DB2数据库实例"></a>创建DB2数据库实例</h4><ul><li>root用户进入 <code>cd /home/db2inst1</code></li><li>执行 <code>/opt/IBM/db2/V8.1/instance/db2icrt -u db2inst1 db2inst1</code></li></ul><h4 id="检查db2服务端口-没有则添加-一般安装程序已经自动添加"><a href="#检查db2服务端口-没有则添加-一般安装程序已经自动添加" class="headerlink" title="检查db2服务端口,没有则添加(一般安装程序已经自动添加):"></a>检查db2服务端口,没有则添加(一般安装程序已经自动添加):</h4><p><code>vi /etc/services</code></p><h4 id="设置db2实例运行环境变量"><a href="#设置db2实例运行环境变量" class="headerlink" title="设置db2实例运行环境变量"></a>设置db2实例运行环境变量</h4><ul><li>进入db2inst1用户: <code>su - db2inst1</code></li><li>启动数据库: <code>db2start</code><br><span style="color:red;">如果出现以下错误:</span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[db2inst1@VM_0_5_centos ~]$ db2start</span><br><span class="line">db2start: error while loading shared libraries: libnuma.so.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></li><li>切换root用户,安装缺少组件。<code>yum install numactl</code></li><li>设置允许db2通过tcpip方式访问: <code>db2set DB2COMM=tcpip </code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DB2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
